
DEVICE_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002854  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00802000  00002854  000028e8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002e2  008020ba  008020ba  000029a2  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000029d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000508  00000000  00000000  00002a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b3c7  00000000  00000000  00002f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004ade  00000000  00000000  0000e2e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000076d6  00000000  00000000  00012dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cec  00000000  00000000  0001a49c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00039dd1  00000000  00000000  0001b188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000320f  00000000  00000000  00054f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000468  00000000  00000000  00058168  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000031ae  00000000  00000000  000585d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c1       	rjmp	.+550    	; 0x24c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c1       	rjmp	.+530    	; 0x24c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c1       	rjmp	.+526    	; 0x24c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c1       	rjmp	.+522    	; 0x24c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c1       	rjmp	.+518    	; 0x24c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c1       	rjmp	.+514    	; 0x24c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c0       	rjmp	.+510    	; 0x24c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c0       	rjmp	.+506    	; 0x24c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c0       	rjmp	.+502    	; 0x24c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c0       	rjmp	.+498    	; 0x24c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c0       	rjmp	.+494    	; 0x24c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__vector_25>
      68:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__vector_26>
      6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c0       	rjmp	.+450    	; 0x24c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
      96:	00 00       	nop
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c7 c0       	rjmp	.+398    	; 0x24c <__bad_interrupt>
      be:	00 00       	nop
      c0:	c5 c0       	rjmp	.+394    	; 0x24c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c3 c0       	rjmp	.+390    	; 0x24c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c1 c0       	rjmp	.+386    	; 0x24c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bf c0       	rjmp	.+382    	; 0x24c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bd c0       	rjmp	.+378    	; 0x24c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bb c0       	rjmp	.+374    	; 0x24c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b9 c0       	rjmp	.+370    	; 0x24c <__bad_interrupt>
      da:	00 00       	nop
      dc:	b7 c0       	rjmp	.+366    	; 0x24c <__bad_interrupt>
      de:	00 00       	nop
      e0:	b5 c0       	rjmp	.+362    	; 0x24c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b1 c0       	rjmp	.+354    	; 0x24c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	af c0       	rjmp	.+350    	; 0x24c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ad c0       	rjmp	.+346    	; 0x24c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ab c0       	rjmp	.+342    	; 0x24c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a9 c0       	rjmp	.+338    	; 0x24c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a7 c0       	rjmp	.+334    	; 0x24c <__bad_interrupt>
      fe:	00 00       	nop
     100:	a5 c0       	rjmp	.+330    	; 0x24c <__bad_interrupt>
     102:	00 00       	nop
     104:	a3 c0       	rjmp	.+326    	; 0x24c <__bad_interrupt>
     106:	00 00       	nop
     108:	a1 c0       	rjmp	.+322    	; 0x24c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9f c0       	rjmp	.+318    	; 0x24c <__bad_interrupt>
     10e:	00 00       	nop
     110:	9d c0       	rjmp	.+314    	; 0x24c <__bad_interrupt>
     112:	00 00       	nop
     114:	9b c0       	rjmp	.+310    	; 0x24c <__bad_interrupt>
     116:	00 00       	nop
     118:	99 c0       	rjmp	.+306    	; 0x24c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	97 c0       	rjmp	.+302    	; 0x24c <__bad_interrupt>
     11e:	00 00       	nop
     120:	95 c0       	rjmp	.+298    	; 0x24c <__bad_interrupt>
     122:	00 00       	nop
     124:	93 c0       	rjmp	.+294    	; 0x24c <__bad_interrupt>
     126:	00 00       	nop
     128:	91 c0       	rjmp	.+290    	; 0x24c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8f c0       	rjmp	.+286    	; 0x24c <__bad_interrupt>
     12e:	00 00       	nop
     130:	8d c0       	rjmp	.+282    	; 0x24c <__bad_interrupt>
     132:	00 00       	nop
     134:	8b c0       	rjmp	.+278    	; 0x24c <__bad_interrupt>
     136:	00 00       	nop
     138:	89 c0       	rjmp	.+274    	; 0x24c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	87 c0       	rjmp	.+270    	; 0x24c <__bad_interrupt>
     13e:	00 00       	nop
     140:	85 c0       	rjmp	.+266    	; 0x24c <__bad_interrupt>
     142:	00 00       	nop
     144:	83 c0       	rjmp	.+262    	; 0x24c <__bad_interrupt>
     146:	00 00       	nop
     148:	81 c0       	rjmp	.+258    	; 0x24c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7f c0       	rjmp	.+254    	; 0x24c <__bad_interrupt>
     14e:	00 00       	nop
     150:	7d c0       	rjmp	.+250    	; 0x24c <__bad_interrupt>
     152:	00 00       	nop
     154:	7b c0       	rjmp	.+246    	; 0x24c <__bad_interrupt>
     156:	00 00       	nop
     158:	79 c0       	rjmp	.+242    	; 0x24c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	77 c0       	rjmp	.+238    	; 0x24c <__bad_interrupt>
     15e:	00 00       	nop
     160:	75 c0       	rjmp	.+234    	; 0x24c <__bad_interrupt>
     162:	00 00       	nop
     164:	73 c0       	rjmp	.+230    	; 0x24c <__bad_interrupt>
     166:	00 00       	nop
     168:	71 c0       	rjmp	.+226    	; 0x24c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6f c0       	rjmp	.+222    	; 0x24c <__bad_interrupt>
     16e:	00 00       	nop
     170:	6d c0       	rjmp	.+218    	; 0x24c <__bad_interrupt>
     172:	00 00       	nop
     174:	6b c0       	rjmp	.+214    	; 0x24c <__bad_interrupt>
     176:	00 00       	nop
     178:	69 c0       	rjmp	.+210    	; 0x24c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	67 c0       	rjmp	.+206    	; 0x24c <__bad_interrupt>
     17e:	00 00       	nop
     180:	65 c0       	rjmp	.+202    	; 0x24c <__bad_interrupt>
     182:	00 00       	nop
     184:	63 c0       	rjmp	.+198    	; 0x24c <__bad_interrupt>
     186:	00 00       	nop
     188:	61 c0       	rjmp	.+194    	; 0x24c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5f c0       	rjmp	.+190    	; 0x24c <__bad_interrupt>
     18e:	00 00       	nop
     190:	5d c0       	rjmp	.+186    	; 0x24c <__bad_interrupt>
     192:	00 00       	nop
     194:	5b c0       	rjmp	.+182    	; 0x24c <__bad_interrupt>
     196:	00 00       	nop
     198:	59 c0       	rjmp	.+178    	; 0x24c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	57 c0       	rjmp	.+174    	; 0x24c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	55 c0       	rjmp	.+170    	; 0x24c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	53 c0       	rjmp	.+166    	; 0x24c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	51 c0       	rjmp	.+162    	; 0x24c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4f c0       	rjmp	.+158    	; 0x24c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4d c0       	rjmp	.+154    	; 0x24c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4b c0       	rjmp	.+150    	; 0x24c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	49 c0       	rjmp	.+146    	; 0x24c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	47 c0       	rjmp	.+142    	; 0x24c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	45 c0       	rjmp	.+138    	; 0x24c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	43 c0       	rjmp	.+134    	; 0x24c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	41 c0       	rjmp	.+130    	; 0x24c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3f c0       	rjmp	.+126    	; 0x24c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3d c0       	rjmp	.+122    	; 0x24c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3b c0       	rjmp	.+118    	; 0x24c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	39 c0       	rjmp	.+114    	; 0x24c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	37 c0       	rjmp	.+110    	; 0x24c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	35 c0       	rjmp	.+106    	; 0x24c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	33 c0       	rjmp	.+102    	; 0x24c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	31 c0       	rjmp	.+98     	; 0x24c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2f c0       	rjmp	.+94     	; 0x24c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2d c0       	rjmp	.+90     	; 0x24c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__vector_125>
     1f8:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__vector_126>
     1fc:	e0 0b       	sbc	r30, r16
     1fe:	e3 0b       	sbc	r30, r19
     200:	e6 0b       	sbc	r30, r22
     202:	e9 0b       	sbc	r30, r25
     204:	ec 0b       	sbc	r30, r28
     206:	ef 0b       	sbc	r30, r31
     208:	f2 0b       	sbc	r31, r18

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e5       	ldi	r29, 0x5F	; 95
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
     21a:	10 e2       	ldi	r17, 0x20	; 32
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	e4 e5       	ldi	r30, 0x54	; 84
     222:	f8 e2       	ldi	r31, 0x28	; 40
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	aa 3b       	cpi	r26, 0xBA	; 186
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	23 e2       	ldi	r18, 0x23	; 35
     236:	aa eb       	ldi	r26, 0xBA	; 186
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	ac 39       	cpi	r26, 0x9C	; 156
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 9e 12 	call	0x253c	; 0x253c <main>
     248:	0c 94 28 14 	jmp	0x2850	; 0x2850 <_exit>

0000024c <__bad_interrupt>:
     24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <ui_com_open>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
     254:	08 95       	ret

00000256 <ui_com_close>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
     25c:	08 95       	ret

0000025e <ui_com_rx_start>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     25e:	80 e2       	ldi	r24, 0x20	; 32
     260:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     264:	08 95       	ret

00000266 <ui_com_rx_stop>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     266:	80 e2       	ldi	r24, 0x20	; 32
     268:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     26c:	08 95       	ret

0000026e <ui_com_tx_start>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     26e:	80 e1       	ldi	r24, 0x10	; 16
     270:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     274:	08 95       	ret

00000276 <ui_com_tx_stop>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     276:	80 e1       	ldi	r24, 0x10	; 16
     278:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     27c:	08 95       	ret

0000027e <ui_com_error>:
{
	LED_Off(LED2_GPIO);
}

void ui_com_error(void)
{
     27e:	08 95       	ret

00000280 <ui_com_overflow>:

}

void ui_com_overflow(void)
{
     280:	08 95       	ret

00000282 <ui_process>:

}

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
     282:	00 97       	sbiw	r24, 0x00	; 0
     284:	21 f4       	brne	.+8      	; 0x28e <ui_process+0xc>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
     28c:	08 95       	ret
		LED_On(LED0_GPIO);
	}
	if (1000 == framenumber) {
     28e:	88 3e       	cpi	r24, 0xE8	; 232
     290:	93 40       	sbci	r25, 0x03	; 3
     292:	19 f4       	brne	.+6      	; 0x29a <ui_process+0x18>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
     29a:	08 95       	ret

0000029c <sysclk_init>:
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	27 97       	sbiw	r28, 0x07	; 7
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     2b4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     2b8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     2bc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     2c0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     2c4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     2c8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     2cc:	64 e0       	ldi	r22, 0x04	; 4
     2ce:	81 e4       	ldi	r24, 0x41	; 65
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <ccp_write_io>
     2d6:	6c e1       	ldi	r22, 0x1C	; 28
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <nvm_read_byte>
     2e0:	8a 83       	std	Y+2, r24	; 0x02
     2e2:	6d e1       	ldi	r22, 0x1D	; 29
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <nvm_read_byte>
     2ec:	89 83       	std	Y+1, r24	; 0x01
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	9a 81       	ldd	r25, Y+2	; 0x02
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	21 f4       	brne	.+8      	; 0x2fe <sysclk_init+0x62>
     2f6:	80 e4       	ldi	r24, 0x40	; 64
     2f8:	93 e2       	ldi	r25, 0x23	; 35
     2fa:	89 83       	std	Y+1, r24	; 0x01
     2fc:	9a 83       	std	Y+2, r25	; 0x02
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	9a 81       	ldd	r25, Y+2	; 0x02
     302:	8b 83       	std	Y+3, r24	; 0x03
     304:	9c 83       	std	Y+4, r25	; 0x04
     306:	e0 e6       	ldi	r30, 0x60	; 96
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	82 83       	std	Z+2, r24	; 0x02
     30c:	8c 81       	ldd	r24, Y+4	; 0x04
     30e:	83 83       	std	Z+3, r24	; 0x03
     310:	8f b7       	in	r24, 0x3f	; 63
     312:	8e 83       	std	Y+6, r24	; 0x06
     314:	f8 94       	cli
     316:	9e 81       	ldd	r25, Y+6	; 0x06
     318:	e0 e5       	ldi	r30, 0x50	; 80
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	82 60       	ori	r24, 0x02	; 2
     320:	80 83       	st	Z, r24
     322:	9f bf       	out	0x3f, r25	; 63
     324:	81 81       	ldd	r24, Z+1	; 0x01
     326:	81 ff       	sbrs	r24, 1
     328:	fd cf       	rjmp	.-6      	; 0x324 <sysclk_init+0x88>
     32a:	8f b7       	in	r24, 0x3f	; 63
     32c:	8d 83       	std	Y+5, r24	; 0x05
     32e:	f8 94       	cli
     330:	9d 81       	ldd	r25, Y+5	; 0x05
     332:	00 e5       	ldi	r16, 0x50	; 80
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	d8 01       	movw	r26, r16
     338:	16 96       	adiw	r26, 0x06	; 6
     33a:	8c 91       	ld	r24, X
     33c:	16 97       	sbiw	r26, 0x06	; 6
     33e:	89 7f       	andi	r24, 0xF9	; 249
     340:	16 96       	adiw	r26, 0x06	; 6
     342:	8c 93       	st	X, r24
     344:	16 97       	sbiw	r26, 0x06	; 6
     346:	e0 e6       	ldi	r30, 0x60	; 96
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	80 e8       	ldi	r24, 0x80	; 128
     34c:	85 83       	std	Z+5, r24	; 0x05
     34e:	8b eb       	ldi	r24, 0xBB	; 187
     350:	86 83       	std	Z+6, r24	; 0x06
     352:	16 96       	adiw	r26, 0x06	; 6
     354:	8c 91       	ld	r24, X
     356:	16 97       	sbiw	r26, 0x06	; 6
     358:	84 60       	ori	r24, 0x04	; 4
     35a:	16 96       	adiw	r26, 0x06	; 6
     35c:	8c 93       	st	X, r24
     35e:	80 81       	ld	r24, Z
     360:	81 60       	ori	r24, 0x01	; 1
     362:	80 83       	st	Z, r24
     364:	9f bf       	out	0x3f, r25	; 63
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	80 e4       	ldi	r24, 0x40	; 64
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <ccp_write_io>
     370:	8f b7       	in	r24, 0x3f	; 63
     372:	8f 83       	std	Y+7, r24	; 0x07
     374:	f8 94       	cli
     376:	9f 81       	ldd	r25, Y+7	; 0x07
     378:	f8 01       	movw	r30, r16
     37a:	80 81       	ld	r24, Z
     37c:	8e 7f       	andi	r24, 0xFE	; 254
     37e:	80 83       	st	Z, r24
     380:	9f bf       	out	0x3f, r25	; 63
     382:	27 96       	adiw	r28, 0x07	; 7
     384:	cd bf       	out	0x3d, r28	; 61
     386:	de bf       	out	0x3e, r29	; 62
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <sysclk_enable_module>:
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	1f 92       	push	r1
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	9f b7       	in	r25, 0x3f	; 63
     39e:	99 83       	std	Y+1, r25	; 0x01
     3a0:	f8 94       	cli
     3a2:	99 81       	ldd	r25, Y+1	; 0x01
     3a4:	e8 2f       	mov	r30, r24
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	e0 59       	subi	r30, 0x90	; 144
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	60 95       	com	r22
     3ae:	80 81       	ld	r24, Z
     3b0:	68 23       	and	r22, r24
     3b2:	60 83       	st	Z, r22
     3b4:	9f bf       	out	0x3f, r25	; 63
     3b6:	0f 90       	pop	r0
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <sysclk_disable_module>:
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	1f 92       	push	r1
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	9f b7       	in	r25, 0x3f	; 63
     3ca:	99 83       	std	Y+1, r25	; 0x01
     3cc:	f8 94       	cli
     3ce:	99 81       	ldd	r25, Y+1	; 0x01
     3d0:	e8 2f       	mov	r30, r24
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	e0 59       	subi	r30, 0x90	; 144
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	68 2b       	or	r22, r24
     3dc:	60 83       	st	Z, r22
     3de:	9f bf       	out	0x3f, r25	; 63
     3e0:	0f 90       	pop	r0
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <sysclk_enable_usb>:
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	1f 92       	push	r1
     3ee:	1f 92       	push	r1
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	86 30       	cpi	r24, 0x06	; 6
     3f6:	11 f0       	breq	.+4      	; 0x3fc <sysclk_enable_usb+0x14>
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <sysclk_enable_usb+0x16>
     3fc:	68 e1       	ldi	r22, 0x18	; 24
     3fe:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     402:	81 fd       	sbrc	r24, 1
     404:	2a c0       	rjmp	.+84     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     406:	8f b7       	in	r24, 0x3f	; 63
     408:	8a 83       	std	Y+2, r24	; 0x02
     40a:	f8 94       	cli
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
     40e:	e0 e5       	ldi	r30, 0x50	; 80
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
     414:	82 60       	ori	r24, 0x02	; 2
     416:	80 83       	st	Z, r24
     418:	9f bf       	out	0x3f, r25	; 63
     41a:	81 81       	ldd	r24, Z+1	; 0x01
     41c:	81 ff       	sbrs	r24, 1
     41e:	fd cf       	rjmp	.-6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     420:	8f b7       	in	r24, 0x3f	; 63
     422:	89 83       	std	Y+1, r24	; 0x01
     424:	f8 94       	cli
     426:	99 81       	ldd	r25, Y+1	; 0x01
     428:	a0 e5       	ldi	r26, 0x50	; 80
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	16 96       	adiw	r26, 0x06	; 6
     42e:	8c 91       	ld	r24, X
     430:	16 97       	sbiw	r26, 0x06	; 6
     432:	89 7f       	andi	r24, 0xF9	; 249
     434:	16 96       	adiw	r26, 0x06	; 6
     436:	8c 93       	st	X, r24
     438:	16 97       	sbiw	r26, 0x06	; 6
     43a:	e0 e6       	ldi	r30, 0x60	; 96
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 e8       	ldi	r24, 0x80	; 128
     440:	85 83       	std	Z+5, r24	; 0x05
     442:	8b eb       	ldi	r24, 0xBB	; 187
     444:	86 83       	std	Z+6, r24	; 0x06
     446:	16 96       	adiw	r26, 0x06	; 6
     448:	8c 91       	ld	r24, X
     44a:	16 97       	sbiw	r26, 0x06	; 6
     44c:	84 60       	ori	r24, 0x04	; 4
     44e:	16 96       	adiw	r26, 0x06	; 6
     450:	8c 93       	st	X, r24
     452:	80 81       	ld	r24, Z
     454:	81 60       	ori	r24, 0x01	; 1
     456:	80 83       	st	Z, r24
     458:	9f bf       	out	0x3f, r25	; 63
     45a:	63 60       	ori	r22, 0x03	; 3
     45c:	84 e4       	ldi	r24, 0x44	; 68
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <ccp_write_io>
     464:	60 e4       	ldi	r22, 0x40	; 64
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	94 df       	rcall	.-216    	; 0x392 <sysclk_enable_module>
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <ioport_configure_port_pin>:
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	fc 01       	movw	r30, r24
     47a:	70 96       	adiw	r30, 0x10	; 16
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	c6 2f       	mov	r28, r22
     482:	d0 e0       	ldi	r29, 0x00	; 0
     484:	de 01       	movw	r26, r28
     486:	02 2e       	mov	r0, r18
     488:	02 c0       	rjmp	.+4      	; 0x48e <ioport_configure_port_pin+0x1a>
     48a:	b5 95       	asr	r27
     48c:	a7 95       	ror	r26
     48e:	0a 94       	dec	r0
     490:	e2 f7       	brpl	.-8      	; 0x48a <ioport_configure_port_pin+0x16>
     492:	a0 fd       	sbrc	r26, 0
     494:	50 83       	st	Z, r21
     496:	2f 5f       	subi	r18, 0xFF	; 255
     498:	3f 4f       	sbci	r19, 0xFF	; 255
     49a:	31 96       	adiw	r30, 0x01	; 1
     49c:	28 30       	cpi	r18, 0x08	; 8
     49e:	31 05       	cpc	r19, r1
     4a0:	89 f7       	brne	.-30     	; 0x484 <ioport_configure_port_pin+0x10>
     4a2:	40 ff       	sbrs	r20, 0
     4a4:	0a c0       	rjmp	.+20     	; 0x4ba <ioport_configure_port_pin+0x46>
     4a6:	41 ff       	sbrs	r20, 1
     4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <ioport_configure_port_pin+0x3c>
     4aa:	fc 01       	movw	r30, r24
     4ac:	65 83       	std	Z+5, r22	; 0x05
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <ioport_configure_port_pin+0x40>
     4b0:	fc 01       	movw	r30, r24
     4b2:	66 83       	std	Z+6, r22	; 0x06
     4b4:	fc 01       	movw	r30, r24
     4b6:	61 83       	std	Z+1, r22	; 0x01
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <ioport_configure_port_pin+0x4a>
     4ba:	fc 01       	movw	r30, r24
     4bc:	62 83       	std	Z+2, r22	; 0x02
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
     4c4:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <udi_cdc_nb_comm_enabled>
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <udi_cdc_nb_comm_enabled>
     4ce:	08 95       	ret

000004d0 <udi_cdc_data_setup>:
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	08 95       	ret

000004d4 <udi_cdc_getsetting>:
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	08 95       	ret

000004d8 <udi_cdc_line_coding_received>:
     4d8:	60 ee       	ldi	r22, 0xE0	; 224
     4da:	71 e2       	ldi	r23, 0x21	; 33
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <uart_config>
     4e2:	08 95       	ret

000004e4 <udi_cdc_comm_enable>:
     4e4:	10 92 d0 21 	sts	0x21D0, r1	; 0x8021d0 <udi_cdc_nb_comm_enabled>
     4e8:	10 92 dc 21 	sts	0x21DC, r1	; 0x8021dc <udi_cdc_state>
     4ec:	10 92 dd 21 	sts	0x21DD, r1	; 0x8021dd <udi_cdc_state+0x1>
     4f0:	e2 ed       	ldi	r30, 0xD2	; 210
     4f2:	f1 e2       	ldi	r31, 0x21	; 33
     4f4:	81 ea       	ldi	r24, 0xA1	; 161
     4f6:	80 83       	st	Z, r24
     4f8:	80 e2       	ldi	r24, 0x20	; 32
     4fa:	81 83       	std	Z+1, r24	; 0x01
     4fc:	12 82       	std	Z+2, r1	; 0x02
     4fe:	13 82       	std	Z+3, r1	; 0x03
     500:	14 82       	std	Z+4, r1	; 0x04
     502:	15 82       	std	Z+5, r1	; 0x05
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	86 83       	std	Z+6, r24	; 0x06
     50a:	97 83       	std	Z+7, r25	; 0x07
     50c:	10 86       	std	Z+8, r1	; 0x08
     50e:	11 86       	std	Z+9, r1	; 0x09
     510:	e0 ee       	ldi	r30, 0xE0	; 224
     512:	f1 e2       	ldi	r31, 0x21	; 33
     514:	80 e8       	ldi	r24, 0x80	; 128
     516:	95 e2       	ldi	r25, 0x25	; 37
     518:	a0 e0       	ldi	r26, 0x00	; 0
     51a:	b0 e0       	ldi	r27, 0x00	; 0
     51c:	80 83       	st	Z, r24
     51e:	91 83       	std	Z+1, r25	; 0x01
     520:	a2 83       	std	Z+2, r26	; 0x02
     522:	b3 83       	std	Z+3, r27	; 0x03
     524:	14 82       	std	Z+4, r1	; 0x04
     526:	15 82       	std	Z+5, r1	; 0x05
     528:	88 e0       	ldi	r24, 0x08	; 8
     52a:	86 83       	std	Z+6, r24	; 0x06
     52c:	bf 01       	movw	r22, r30
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	0e 94 db 12 	call	0x25b6	; 0x25b6 <uart_config>
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	0e 94 c9 12 	call	0x2592	; 0x2592 <main_cdc_enable>
     53a:	88 23       	and	r24, r24
     53c:	29 f0       	breq	.+10     	; 0x548 <udi_cdc_comm_enable+0x64>
     53e:	90 91 d0 21 	lds	r25, 0x21D0	; 0x8021d0 <udi_cdc_nb_comm_enabled>
     542:	9f 5f       	subi	r25, 0xFF	; 255
     544:	90 93 d0 21 	sts	0x21D0, r25	; 0x8021d0 <udi_cdc_nb_comm_enabled>
     548:	08 95       	ret

0000054a <udi_cdc_tx_send>:
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	1f 92       	push	r1
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <udi_cdc_tx_trans_ongoing>
     55e:	81 11       	cpse	r24, r1
     560:	9e c0       	rjmp	.+316    	; 0x69e <udi_cdc_tx_send+0x154>
     562:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <udd_is_high_speed>
     566:	88 23       	and	r24, r24
     568:	51 f0       	breq	.+20     	; 0x57e <udi_cdc_tx_send+0x34>
     56a:	00 91 be 20 	lds	r16, 0x20BE	; 0x8020be <udi_cdc_tx_sof_num>
     56e:	10 91 bf 20 	lds	r17, 0x20BF	; 0x8020bf <udi_cdc_tx_sof_num+0x1>
     572:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <udd_get_micro_frame_number>
     576:	08 17       	cp	r16, r24
     578:	19 07       	cpc	r17, r25
     57a:	59 f4       	brne	.+22     	; 0x592 <udi_cdc_tx_send+0x48>
     57c:	90 c0       	rjmp	.+288    	; 0x69e <udi_cdc_tx_send+0x154>
     57e:	00 91 be 20 	lds	r16, 0x20BE	; 0x8020be <udi_cdc_tx_sof_num>
     582:	10 91 bf 20 	lds	r17, 0x20BF	; 0x8020bf <udi_cdc_tx_sof_num+0x1>
     586:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <udd_get_frame_number>
     58a:	08 17       	cp	r16, r24
     58c:	19 07       	cpc	r17, r25
     58e:	09 f4       	brne	.+2      	; 0x592 <udi_cdc_tx_send+0x48>
     590:	86 c0       	rjmp	.+268    	; 0x69e <udi_cdc_tx_send+0x154>
     592:	8f b7       	in	r24, 0x3f	; 63
     594:	89 83       	std	Y+1, r24	; 0x01
     596:	f8 94       	cli
     598:	19 81       	ldd	r17, Y+1	; 0x01
     59a:	00 91 c0 20 	lds	r16, 0x20C0	; 0x8020c0 <udi_cdc_tx_buf_sel>
     59e:	e0 2f       	mov	r30, r16
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	ef 53       	subi	r30, 0x3F	; 63
     5a8:	ff 4d       	sbci	r31, 0xDF	; 223
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	89 2b       	or	r24, r25
     5b0:	09 f5       	brne	.+66     	; 0x5f4 <udi_cdc_tx_send+0xaa>
     5b2:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <__data_end>
     5b6:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <__data_end+0x1>
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <__data_end>
     5c0:	90 93 bb 20 	sts	0x20BB, r25	; 0x8020bb <__data_end+0x1>
     5c4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <udd_is_high_speed>
     5c8:	81 11       	cpse	r24, r1
     5ca:	07 c0       	rjmp	.+14     	; 0x5da <udi_cdc_tx_send+0x90>
     5cc:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <__data_end>
     5d0:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <__data_end+0x1>
     5d4:	84 36       	cpi	r24, 0x64	; 100
     5d6:	91 05       	cpc	r25, r1
     5d8:	58 f0       	brcs	.+22     	; 0x5f0 <udi_cdc_tx_send+0xa6>
     5da:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <udd_is_high_speed>
     5de:	88 23       	and	r24, r24
     5e0:	49 f0       	breq	.+18     	; 0x5f4 <udi_cdc_tx_send+0xaa>
     5e2:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <__data_end>
     5e6:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <__data_end+0x1>
     5ea:	80 32       	cpi	r24, 0x20	; 32
     5ec:	93 40       	sbci	r25, 0x03	; 3
     5ee:	10 f4       	brcc	.+4      	; 0x5f4 <udi_cdc_tx_send+0xaa>
     5f0:	1f bf       	out	0x3f, r17	; 63
     5f2:	55 c0       	rjmp	.+170    	; 0x69e <udi_cdc_tx_send+0x154>
     5f4:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <__data_end>
     5f8:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <__data_end+0x1>
     5fc:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <udi_cdc_tx_both_buf_to_send>
     600:	81 11       	cpse	r24, r1
     602:	06 c0       	rjmp	.+12     	; 0x610 <udi_cdc_tx_send+0xc6>
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	01 11       	cpse	r16, r1
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <udi_cdc_tx_buf_sel>
     60e:	04 c0       	rjmp	.+8      	; 0x618 <udi_cdc_tx_send+0xce>
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	01 11       	cpse	r16, r1
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	08 2f       	mov	r16, r24
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 93 bd 20 	sts	0x20BD, r24	; 0x8020bd <udi_cdc_tx_trans_ongoing>
     61e:	1f bf       	out	0x3f, r17	; 63
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	f8 01       	movw	r30, r16
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	ef 53       	subi	r30, 0x3F	; 63
     62a:	ff 4d       	sbci	r31, 0xDF	; 223
     62c:	ff 24       	eor	r15, r15
     62e:	f3 94       	inc	r15
     630:	80 81       	ld	r24, Z
     632:	91 81       	ldd	r25, Z+1	; 0x01
     634:	80 34       	cpi	r24, 0x40	; 64
     636:	91 05       	cpc	r25, r1
     638:	09 f4       	brne	.+2      	; 0x63c <udi_cdc_tx_send+0xf2>
     63a:	f1 2c       	mov	r15, r1
     63c:	ff 20       	and	r15, r15
     63e:	91 f0       	breq	.+36     	; 0x664 <udi_cdc_tx_send+0x11a>
     640:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <udd_is_high_speed>
     644:	88 23       	and	r24, r24
     646:	39 f0       	breq	.+14     	; 0x656 <udi_cdc_tx_send+0x10c>
     648:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <udd_get_micro_frame_number>
     64c:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <udi_cdc_tx_sof_num>
     650:	90 93 bf 20 	sts	0x20BF, r25	; 0x8020bf <udi_cdc_tx_sof_num+0x1>
     654:	0b c0       	rjmp	.+22     	; 0x66c <udi_cdc_tx_send+0x122>
     656:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <udd_get_frame_number>
     65a:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <udi_cdc_tx_sof_num>
     65e:	90 93 bf 20 	sts	0x20BF, r25	; 0x8020bf <udi_cdc_tx_sof_num+0x1>
     662:	04 c0       	rjmp	.+8      	; 0x66c <udi_cdc_tx_send+0x122>
     664:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <udi_cdc_tx_sof_num>
     668:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <udi_cdc_tx_sof_num+0x1>
     66c:	f8 01       	movw	r30, r16
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	ef 53       	subi	r30, 0x3F	; 63
     674:	ff 4d       	sbci	r31, 0xDF	; 223
     676:	20 81       	ld	r18, Z
     678:	31 81       	ldd	r19, Z+1	; 0x01
     67a:	a8 01       	movw	r20, r16
     67c:	00 24       	eor	r0, r0
     67e:	56 95       	lsr	r21
     680:	47 95       	ror	r20
     682:	07 94       	ror	r0
     684:	56 95       	lsr	r21
     686:	47 95       	ror	r20
     688:	07 94       	ror	r0
     68a:	54 2f       	mov	r21, r20
     68c:	40 2d       	mov	r20, r0
     68e:	4a 53       	subi	r20, 0x3A	; 58
     690:	5f 4d       	sbci	r21, 0xDF	; 223
     692:	06 e5       	ldi	r16, 0x56	; 86
     694:	13 e0       	ldi	r17, 0x03	; 3
     696:	6f 2d       	mov	r22, r15
     698:	81 e8       	ldi	r24, 0x81	; 129
     69a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <udd_ep_run>
     69e:	0f 90       	pop	r0
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	08 95       	ret

000006ac <udi_cdc_data_sent>:
     6ac:	81 11       	cpse	r24, r1
     6ae:	15 c0       	rjmp	.+42     	; 0x6da <udi_cdc_data_sent+0x2e>
     6b0:	20 91 c0 20 	lds	r18, 0x20C0	; 0x8020c0 <udi_cdc_tx_buf_sel>
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	22 23       	and	r18, r18
     6ba:	11 f0       	breq	.+4      	; 0x6c0 <udi_cdc_data_sent+0x14>
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	fc 01       	movw	r30, r24
     6c6:	ef 53       	subi	r30, 0x3F	; 63
     6c8:	ff 4d       	sbci	r31, 0xDF	; 223
     6ca:	10 82       	st	Z, r1
     6cc:	11 82       	std	Z+1, r1	; 0x01
     6ce:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <udi_cdc_tx_both_buf_to_send>
     6d2:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <udi_cdc_tx_trans_ongoing>
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	38 cf       	rjmp	.-400    	; 0x54a <udi_cdc_tx_send>
     6da:	08 95       	ret

000006dc <udi_cdc_data_sof_notify>:
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	35 cf       	rjmp	.-406    	; 0x54a <udi_cdc_tx_send>
     6e0:	08 95       	ret

000006e2 <udi_cdc_ctrl_state_notify>:
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <udi_cdc_serial_state_msg_ongoing>
     6ea:	81 11       	cpse	r24, r1
     6ec:	1f c0       	rjmp	.+62     	; 0x72c <udi_cdc_ctrl_state_notify+0x4a>
     6ee:	20 91 dc 21 	lds	r18, 0x21DC	; 0x8021dc <udi_cdc_state>
     6f2:	30 91 dd 21 	lds	r19, 0x21DD	; 0x8021dd <udi_cdc_state+0x1>
     6f6:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <uid_cdc_state_msg+0x8>
     6fa:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <uid_cdc_state_msg+0x9>
     6fe:	28 17       	cp	r18, r24
     700:	39 07       	cpc	r19, r25
     702:	a1 f0       	breq	.+40     	; 0x72c <udi_cdc_ctrl_state_notify+0x4a>
     704:	86 2f       	mov	r24, r22
     706:	20 91 dc 21 	lds	r18, 0x21DC	; 0x8021dc <udi_cdc_state>
     70a:	30 91 dd 21 	lds	r19, 0x21DD	; 0x8021dd <udi_cdc_state+0x1>
     70e:	20 93 da 21 	sts	0x21DA, r18	; 0x8021da <uid_cdc_state_msg+0x8>
     712:	30 93 db 21 	sts	0x21DB, r19	; 0x8021db <uid_cdc_state_msg+0x9>
     716:	03 ec       	ldi	r16, 0xC3	; 195
     718:	13 e0       	ldi	r17, 0x03	; 3
     71a:	2a e0       	ldi	r18, 0x0A	; 10
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	42 ed       	ldi	r20, 0xD2	; 210
     720:	51 e2       	ldi	r21, 0x21	; 33
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <udd_ep_run>
     728:	80 93 de 21 	sts	0x21DE, r24	; 0x8021de <udi_cdc_serial_state_msg_ongoing>
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	08 95       	ret

00000732 <udi_cdc_ctrl_state_change>:
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	1f 92       	push	r1
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	8f b7       	in	r24, 0x3f	; 63
     73e:	89 83       	std	Y+1, r24	; 0x01
     740:	f8 94       	cli
     742:	29 81       	ldd	r18, Y+1	; 0x01
     744:	66 23       	and	r22, r22
     746:	59 f0       	breq	.+22     	; 0x75e <udi_cdc_ctrl_state_change+0x2c>
     748:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <udi_cdc_state>
     74c:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <udi_cdc_state+0x1>
     750:	48 2b       	or	r20, r24
     752:	59 2b       	or	r21, r25
     754:	40 93 dc 21 	sts	0x21DC, r20	; 0x8021dc <udi_cdc_state>
     758:	50 93 dd 21 	sts	0x21DD, r21	; 0x8021dd <udi_cdc_state+0x1>
     75c:	0c c0       	rjmp	.+24     	; 0x776 <udi_cdc_ctrl_state_change+0x44>
     75e:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <udi_cdc_state>
     762:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <udi_cdc_state+0x1>
     766:	40 95       	com	r20
     768:	50 95       	com	r21
     76a:	48 23       	and	r20, r24
     76c:	59 23       	and	r21, r25
     76e:	40 93 dc 21 	sts	0x21DC, r20	; 0x8021dc <udi_cdc_state>
     772:	50 93 dd 21 	sts	0x21DD, r21	; 0x8021dd <udi_cdc_state+0x1>
     776:	2f bf       	out	0x3f, r18	; 63
     778:	62 e8       	ldi	r22, 0x82	; 130
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	b2 df       	rcall	.-156    	; 0x6e2 <udi_cdc_ctrl_state_notify>
     77e:	0f 90       	pop	r0
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <udi_cdc_serial_state_msg_sent>:
     786:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <udi_cdc_serial_state_msg_ongoing>
     78a:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <udi_cdc_state>
     78e:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <udi_cdc_state+0x1>
     792:	83 78       	andi	r24, 0x83	; 131
     794:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <udi_cdc_state>
     798:	90 93 dd 21 	sts	0x21DD, r25	; 0x8021dd <udi_cdc_state+0x1>
     79c:	e2 ed       	ldi	r30, 0xD2	; 210
     79e:	f1 e2       	ldi	r31, 0x21	; 33
     7a0:	80 85       	ldd	r24, Z+8	; 0x08
     7a2:	91 85       	ldd	r25, Z+9	; 0x09
     7a4:	83 78       	andi	r24, 0x83	; 131
     7a6:	80 87       	std	Z+8, r24	; 0x08
     7a8:	91 87       	std	Z+9, r25	; 0x09
     7aa:	64 2f       	mov	r22, r20
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	99 cf       	rjmp	.-206    	; 0x6e2 <udi_cdc_ctrl_state_notify>
     7b0:	08 95       	ret

000007b2 <udi_cdc_data_disable>:
     7b2:	80 91 cf 21 	lds	r24, 0x21CF	; 0x8021cf <udi_cdc_nb_data_enabled>
     7b6:	81 50       	subi	r24, 0x01	; 1
     7b8:	80 93 cf 21 	sts	0x21CF, r24	; 0x8021cf <udi_cdc_nb_data_enabled>
     7bc:	80 91 cf 21 	lds	r24, 0x21CF	; 0x8021cf <udi_cdc_nb_data_enabled>
     7c0:	0e 94 cf 12 	call	0x259e	; 0x259e <main_cdc_disable>
     7c4:	10 92 ce 21 	sts	0x21CE, r1	; 0x8021ce <udi_cdc_data_running>
     7c8:	08 95       	ret

000007ca <udi_cdc_comm_setup>:
     7ca:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <udd_g_ctrlreq>
     7ce:	88 23       	and	r24, r24
     7d0:	cc f4       	brge	.+50     	; 0x804 <udi_cdc_comm_setup+0x3a>
     7d2:	80 76       	andi	r24, 0x60	; 96
     7d4:	80 32       	cpi	r24, 0x20	; 32
     7d6:	f1 f5       	brne	.+124    	; 0x854 <udi_cdc_comm_setup+0x8a>
     7d8:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
     7dc:	81 32       	cpi	r24, 0x21	; 33
     7de:	e1 f5       	brne	.+120    	; 0x858 <udi_cdc_comm_setup+0x8e>
     7e0:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
     7e4:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
     7e8:	07 97       	sbiw	r24, 0x07	; 7
     7ea:	c1 f5       	brne	.+112    	; 0x85c <udi_cdc_comm_setup+0x92>
     7ec:	ec e8       	ldi	r30, 0x8C	; 140
     7ee:	f3 e2       	ldi	r31, 0x23	; 35
     7f0:	80 ee       	ldi	r24, 0xE0	; 224
     7f2:	91 e2       	ldi	r25, 0x21	; 33
     7f4:	80 87       	std	Z+8, r24	; 0x08
     7f6:	91 87       	std	Z+9, r25	; 0x09
     7f8:	87 e0       	ldi	r24, 0x07	; 7
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	82 87       	std	Z+10, r24	; 0x0a
     7fe:	93 87       	std	Z+11, r25	; 0x0b
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	08 95       	ret
     804:	80 76       	andi	r24, 0x60	; 96
     806:	80 32       	cpi	r24, 0x20	; 32
     808:	59 f5       	brne	.+86     	; 0x860 <udi_cdc_comm_setup+0x96>
     80a:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
     80e:	80 32       	cpi	r24, 0x20	; 32
     810:	19 f0       	breq	.+6      	; 0x818 <udi_cdc_comm_setup+0x4e>
     812:	82 32       	cpi	r24, 0x22	; 34
     814:	b9 f0       	breq	.+46     	; 0x844 <udi_cdc_comm_setup+0x7a>
     816:	26 c0       	rjmp	.+76     	; 0x864 <udi_cdc_comm_setup+0x9a>
     818:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
     81c:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
     820:	07 97       	sbiw	r24, 0x07	; 7
     822:	11 f5       	brne	.+68     	; 0x868 <udi_cdc_comm_setup+0x9e>
     824:	ec e8       	ldi	r30, 0x8C	; 140
     826:	f3 e2       	ldi	r31, 0x23	; 35
     828:	8c e6       	ldi	r24, 0x6C	; 108
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	84 87       	std	Z+12, r24	; 0x0c
     82e:	95 87       	std	Z+13, r25	; 0x0d
     830:	80 ee       	ldi	r24, 0xE0	; 224
     832:	91 e2       	ldi	r25, 0x21	; 33
     834:	80 87       	std	Z+8, r24	; 0x08
     836:	91 87       	std	Z+9, r25	; 0x09
     838:	87 e0       	ldi	r24, 0x07	; 7
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 87       	std	Z+10, r24	; 0x0a
     83e:	93 87       	std	Z+11, r25	; 0x0b
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 95       	ret
     844:	60 91 8e 23 	lds	r22, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
     848:	61 70       	andi	r22, 0x01	; 1
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <main_cdc_set_dtr>
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	08 95       	ret
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	08 95       	ret
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	08 95       	ret
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	08 95       	ret
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	08 95       	ret
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	08 95       	ret
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	08 95       	ret

0000086c <udi_cdc_signal_framing_error>:
     86c:	40 e1       	ldi	r20, 0x10	; 16
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	5e cf       	rjmp	.-324    	; 0x732 <udi_cdc_ctrl_state_change>
     876:	08 95       	ret

00000878 <udi_cdc_signal_overrun>:
     878:	40 e4       	ldi	r20, 0x40	; 64
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	58 cf       	rjmp	.-336    	; 0x732 <udi_cdc_ctrl_state_change>
     882:	08 95       	ret

00000884 <udi_cdc_multi_get_nb_received_data>:
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	1f 92       	push	r1
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	8f b7       	in	r24, 0x3f	; 63
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	f8 94       	cli
     894:	49 81       	ldd	r20, Y+1	; 0x01
     896:	20 91 47 21 	lds	r18, 0x2147	; 0x802147 <udi_cdc_rx_pos>
     89a:	30 91 48 21 	lds	r19, 0x2148	; 0x802148 <udi_cdc_rx_pos+0x1>
     89e:	e0 91 49 21 	lds	r30, 0x2149	; 0x802149 <udi_cdc_rx_buf_sel>
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	ee 0f       	add	r30, r30
     8a6:	ff 1f       	adc	r31, r31
     8a8:	e6 5b       	subi	r30, 0xB6	; 182
     8aa:	fe 4d       	sbci	r31, 0xDE	; 222
     8ac:	80 81       	ld	r24, Z
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
     8b0:	4f bf       	out	0x3f, r20	; 63
     8b2:	82 1b       	sub	r24, r18
     8b4:	93 0b       	sbc	r25, r19
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <udi_cdc_multi_is_rx_ready>:
     8be:	e2 df       	rcall	.-60     	; 0x884 <udi_cdc_multi_get_nb_received_data>
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	89 2b       	or	r24, r25
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <udi_cdc_multi_is_rx_ready+0xa>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	82 2f       	mov	r24, r18
     8ca:	08 95       	ret

000008cc <udi_cdc_rx_start>:
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	1f 92       	push	r1
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	8f b7       	in	r24, 0x3f	; 63
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	f8 94       	cli
     8e0:	99 81       	ldd	r25, Y+1	; 0x01
     8e2:	20 91 49 21 	lds	r18, 0x2149	; 0x802149 <udi_cdc_rx_buf_sel>
     8e6:	80 91 46 21 	lds	r24, 0x2146	; 0x802146 <udi_cdc_rx_trans_ongoing>
     8ea:	81 11       	cpse	r24, r1
     8ec:	10 c0       	rjmp	.+32     	; 0x90e <udi_cdc_rx_start+0x42>
     8ee:	60 91 47 21 	lds	r22, 0x2147	; 0x802147 <udi_cdc_rx_pos>
     8f2:	70 91 48 21 	lds	r23, 0x2148	; 0x802148 <udi_cdc_rx_pos+0x1>
     8f6:	02 2f       	mov	r16, r18
     8f8:	10 e0       	ldi	r17, 0x00	; 0
     8fa:	f8 01       	movw	r30, r16
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	e6 5b       	subi	r30, 0xB6	; 182
     902:	fe 4d       	sbci	r31, 0xDE	; 222
     904:	40 81       	ld	r20, Z
     906:	51 81       	ldd	r21, Z+1	; 0x01
     908:	64 17       	cp	r22, r20
     90a:	75 07       	cpc	r23, r21
     90c:	18 f4       	brcc	.+6      	; 0x914 <udi_cdc_rx_start+0x48>
     90e:	9f bf       	out	0x3f, r25	; 63
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	28 c0       	rjmp	.+80     	; 0x964 <udi_cdc_rx_start+0x98>
     914:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <udi_cdc_rx_pos>
     918:	10 92 48 21 	sts	0x2148, r1	; 0x802148 <udi_cdc_rx_pos+0x1>
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	21 11       	cpse	r18, r1
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	80 93 49 21 	sts	0x2149, r24	; 0x802149 <udi_cdc_rx_buf_sel>
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 46 21 	sts	0x2146, r24	; 0x802146 <udi_cdc_rx_trans_ongoing>
     92c:	9f bf       	out	0x3f, r25	; 63
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	c6 df       	rcall	.-116    	; 0x8be <udi_cdc_multi_is_rx_ready>
     932:	88 23       	and	r24, r24
     934:	19 f0       	breq	.+6      	; 0x93c <udi_cdc_rx_start+0x70>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 60 13 	call	0x26c0	; 0x26c0 <uart_rx_notify>
     93c:	a8 01       	movw	r20, r16
     93e:	00 24       	eor	r0, r0
     940:	56 95       	lsr	r21
     942:	47 95       	ror	r20
     944:	07 94       	ror	r0
     946:	56 95       	lsr	r21
     948:	47 95       	ror	r20
     94a:	07 94       	ror	r0
     94c:	54 2f       	mov	r21, r20
     94e:	40 2d       	mov	r20, r0
     950:	42 5b       	subi	r20, 0xB2	; 178
     952:	5e 4d       	sbci	r21, 0xDE	; 222
     954:	0a ee       	ldi	r16, 0xEA	; 234
     956:	14 e0       	ldi	r17, 0x04	; 4
     958:	20 e4       	ldi	r18, 0x40	; 64
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <udd_ep_run>
     964:	0f 90       	pop	r0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	08 95       	ret

00000970 <udi_cdc_data_enable>:
     970:	10 92 cf 21 	sts	0x21CF, r1	; 0x8021cf <udi_cdc_nb_data_enabled>
     974:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <udi_cdc_tx_trans_ongoing>
     978:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <udi_cdc_tx_both_buf_to_send>
     97c:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <udi_cdc_tx_buf_sel>
     980:	e1 ec       	ldi	r30, 0xC1	; 193
     982:	f0 e2       	ldi	r31, 0x20	; 32
     984:	10 82       	st	Z, r1
     986:	11 82       	std	Z+1, r1	; 0x01
     988:	12 82       	std	Z+2, r1	; 0x02
     98a:	13 82       	std	Z+3, r1	; 0x03
     98c:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <udi_cdc_tx_sof_num>
     990:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <udi_cdc_tx_sof_num+0x1>
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	d9 dd       	rcall	.-1102   	; 0x54a <udi_cdc_tx_send>
     998:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <udi_cdc_rx_trans_ongoing>
     99c:	10 92 49 21 	sts	0x2149, r1	; 0x802149 <udi_cdc_rx_buf_sel>
     9a0:	ea e4       	ldi	r30, 0x4A	; 74
     9a2:	f1 e2       	ldi	r31, 0x21	; 33
     9a4:	10 82       	st	Z, r1
     9a6:	11 82       	std	Z+1, r1	; 0x01
     9a8:	12 82       	std	Z+2, r1	; 0x02
     9aa:	13 82       	std	Z+3, r1	; 0x03
     9ac:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <udi_cdc_rx_pos>
     9b0:	10 92 48 21 	sts	0x2148, r1	; 0x802148 <udi_cdc_rx_pos+0x1>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	8a df       	rcall	.-236    	; 0x8cc <udi_cdc_rx_start>
     9b8:	88 23       	and	r24, r24
     9ba:	59 f0       	breq	.+22     	; 0x9d2 <udi_cdc_data_enable+0x62>
     9bc:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <udi_cdc_nb_data_enabled>
     9c0:	9f 5f       	subi	r25, 0xFF	; 255
     9c2:	90 93 cf 21 	sts	0x21CF, r25	; 0x8021cf <udi_cdc_nb_data_enabled>
     9c6:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <udi_cdc_nb_data_enabled>
     9ca:	91 30       	cpi	r25, 0x01	; 1
     9cc:	11 f4       	brne	.+4      	; 0x9d2 <udi_cdc_data_enable+0x62>
     9ce:	90 93 ce 21 	sts	0x21CE, r25	; 0x8021ce <udi_cdc_data_running>
     9d2:	08 95       	ret

000009d4 <udi_cdc_data_received>:
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	81 11       	cpse	r24, r1
     9da:	29 c0       	rjmp	.+82     	; 0xa2e <udi_cdc_data_received+0x5a>
     9dc:	80 91 49 21 	lds	r24, 0x2149	; 0x802149 <udi_cdc_rx_buf_sel>
     9e0:	e1 e0       	ldi	r30, 0x01	; 1
     9e2:	81 11       	cpse	r24, r1
     9e4:	e0 e0       	ldi	r30, 0x00	; 0
     9e6:	84 2f       	mov	r24, r20
     9e8:	61 15       	cp	r22, r1
     9ea:	71 05       	cpc	r23, r1
     9ec:	a9 f4       	brne	.+42     	; 0xa18 <udi_cdc_data_received+0x44>
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	00 24       	eor	r0, r0
     9f2:	f6 95       	lsr	r31
     9f4:	e7 95       	ror	r30
     9f6:	07 94       	ror	r0
     9f8:	f6 95       	lsr	r31
     9fa:	e7 95       	ror	r30
     9fc:	07 94       	ror	r0
     9fe:	fe 2f       	mov	r31, r30
     a00:	e0 2d       	mov	r30, r0
     a02:	af 01       	movw	r20, r30
     a04:	42 5b       	subi	r20, 0xB2	; 178
     a06:	5e 4d       	sbci	r21, 0xDE	; 222
     a08:	0a ee       	ldi	r16, 0xEA	; 234
     a0a:	14 e0       	ldi	r17, 0x04	; 4
     a0c:	20 e4       	ldi	r18, 0x40	; 64
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <udd_ep_run>
     a16:	0b c0       	rjmp	.+22     	; 0xa2e <udi_cdc_data_received+0x5a>
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	e6 5b       	subi	r30, 0xB6	; 182
     a20:	fe 4d       	sbci	r31, 0xDE	; 222
     a22:	60 83       	st	Z, r22
     a24:	71 83       	std	Z+1, r23	; 0x01
     a26:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <udi_cdc_rx_trans_ongoing>
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	4f df       	rcall	.-354    	; 0x8cc <udi_cdc_rx_start>
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <udi_cdc_is_rx_ready>:
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	43 cf       	rjmp	.-378    	; 0x8be <udi_cdc_multi_is_rx_ready>
     a38:	08 95       	ret

00000a3a <udi_cdc_multi_getc>:
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	1f 92       	push	r1
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	11 e0       	ldi	r17, 0x01	; 1
     a4c:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udi_cdc_line_coding+0x6>
     a50:	89 30       	cpi	r24, 0x09	; 9
     a52:	09 f0       	breq	.+2      	; 0xa56 <udi_cdc_multi_getc+0x1c>
     a54:	10 e0       	ldi	r17, 0x00	; 0
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	8f b7       	in	r24, 0x3f	; 63
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	f8 94       	cli
     a60:	a9 81       	ldd	r26, Y+1	; 0x01
     a62:	20 91 47 21 	lds	r18, 0x2147	; 0x802147 <udi_cdc_rx_pos>
     a66:	30 91 48 21 	lds	r19, 0x2148	; 0x802148 <udi_cdc_rx_pos+0x1>
     a6a:	80 91 49 21 	lds	r24, 0x2149	; 0x802149 <udi_cdc_rx_buf_sel>
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	fc 01       	movw	r30, r24
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	e6 5b       	subi	r30, 0xB6	; 182
     a78:	fe 4d       	sbci	r31, 0xDE	; 222
     a7a:	60 81       	ld	r22, Z
     a7c:	71 81       	ldd	r23, Z+1	; 0x01
     a7e:	af bf       	out	0x3f, r26	; 63
     a80:	26 17       	cp	r18, r22
     a82:	37 07       	cpc	r19, r23
     a84:	30 f0       	brcs	.+12     	; 0xa92 <udi_cdc_multi_getc+0x58>
     a86:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <udi_cdc_data_running>
     a8a:	81 11       	cpse	r24, r1
     a8c:	e6 cf       	rjmp	.-52     	; 0xa5a <udi_cdc_multi_getc+0x20>
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	21 c0       	rjmp	.+66     	; 0xad4 <udi_cdc_multi_getc+0x9a>
     a92:	fc 01       	movw	r30, r24
     a94:	00 24       	eor	r0, r0
     a96:	f6 95       	lsr	r31
     a98:	e7 95       	ror	r30
     a9a:	07 94       	ror	r0
     a9c:	f6 95       	lsr	r31
     a9e:	e7 95       	ror	r30
     aa0:	07 94       	ror	r0
     aa2:	fe 2f       	mov	r31, r30
     aa4:	e0 2d       	mov	r30, r0
     aa6:	e2 0f       	add	r30, r18
     aa8:	f3 1f       	adc	r31, r19
     aaa:	e2 5b       	subi	r30, 0xB2	; 178
     aac:	fe 4d       	sbci	r31, 0xDE	; 222
     aae:	80 81       	ld	r24, Z
     ab0:	7a 01       	movw	r14, r20
     ab2:	e8 2a       	or	r14, r24
     ab4:	2f 5f       	subi	r18, 0xFF	; 255
     ab6:	3f 4f       	sbci	r19, 0xFF	; 255
     ab8:	20 93 47 21 	sts	0x2147, r18	; 0x802147 <udi_cdc_rx_pos>
     abc:	30 93 48 21 	sts	0x2148, r19	; 0x802148 <udi_cdc_rx_pos+0x1>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	04 df       	rcall	.-504    	; 0x8cc <udi_cdc_rx_start>
     ac4:	11 23       	and	r17, r17
     ac6:	21 f0       	breq	.+8      	; 0xad0 <udi_cdc_multi_getc+0x96>
     ac8:	5e 2d       	mov	r21, r14
     aca:	44 27       	eor	r20, r20
     acc:	10 e0       	ldi	r17, 0x00	; 0
     ace:	c5 cf       	rjmp	.-118    	; 0xa5a <udi_cdc_multi_getc+0x20>
     ad0:	8e 2d       	mov	r24, r14
     ad2:	9f 2d       	mov	r25, r15
     ad4:	0f 90       	pop	r0
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <udi_cdc_getc>:
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	aa cf       	rjmp	.-172    	; 0xa3a <udi_cdc_multi_getc>
     ae6:	08 95       	ret

00000ae8 <udi_cdc_multi_read_buf>:
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	1f 92       	push	r1
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	6b 01       	movw	r12, r22
     b00:	7a 01       	movw	r14, r20
     b02:	8f b7       	in	r24, 0x3f	; 63
     b04:	89 83       	std	Y+1, r24	; 0x01
     b06:	f8 94       	cli
     b08:	49 81       	ldd	r20, Y+1	; 0x01
     b0a:	60 91 47 21 	lds	r22, 0x2147	; 0x802147 <udi_cdc_rx_pos>
     b0e:	70 91 48 21 	lds	r23, 0x2148	; 0x802148 <udi_cdc_rx_pos+0x1>
     b12:	20 91 49 21 	lds	r18, 0x2149	; 0x802149 <udi_cdc_rx_buf_sel>
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	f9 01       	movw	r30, r18
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	e6 5b       	subi	r30, 0xB6	; 182
     b20:	fe 4d       	sbci	r31, 0xDE	; 222
     b22:	80 81       	ld	r24, Z
     b24:	91 81       	ldd	r25, Z+1	; 0x01
     b26:	4f bf       	out	0x3f, r20	; 63
     b28:	68 17       	cp	r22, r24
     b2a:	79 07       	cpc	r23, r25
     b2c:	38 f0       	brcs	.+14     	; 0xb3c <udi_cdc_multi_read_buf+0x54>
     b2e:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <udi_cdc_data_running>
     b32:	81 11       	cpse	r24, r1
     b34:	e6 cf       	rjmp	.-52     	; 0xb02 <udi_cdc_multi_read_buf+0x1a>
     b36:	8e 2d       	mov	r24, r14
     b38:	9f 2d       	mov	r25, r15
     b3a:	35 c0       	rjmp	.+106    	; 0xba6 <udi_cdc_multi_read_buf+0xbe>
     b3c:	f9 01       	movw	r30, r18
     b3e:	ee 0f       	add	r30, r30
     b40:	ff 1f       	adc	r31, r31
     b42:	e6 5b       	subi	r30, 0xB6	; 182
     b44:	fe 4d       	sbci	r31, 0xDE	; 222
     b46:	80 81       	ld	r24, Z
     b48:	91 81       	ldd	r25, Z+1	; 0x01
     b4a:	86 1b       	sub	r24, r22
     b4c:	97 0b       	sbc	r25, r23
     b4e:	87 01       	movw	r16, r14
     b50:	8e 15       	cp	r24, r14
     b52:	9f 05       	cpc	r25, r15
     b54:	08 f4       	brcc	.+2      	; 0xb58 <udi_cdc_multi_read_buf+0x70>
     b56:	8c 01       	movw	r16, r24
     b58:	00 24       	eor	r0, r0
     b5a:	36 95       	lsr	r19
     b5c:	27 95       	ror	r18
     b5e:	07 94       	ror	r0
     b60:	36 95       	lsr	r19
     b62:	27 95       	ror	r18
     b64:	07 94       	ror	r0
     b66:	32 2f       	mov	r19, r18
     b68:	20 2d       	mov	r18, r0
     b6a:	62 0f       	add	r22, r18
     b6c:	73 1f       	adc	r23, r19
     b6e:	62 5b       	subi	r22, 0xB2	; 178
     b70:	7e 4d       	sbci	r23, 0xDE	; 222
     b72:	a8 01       	movw	r20, r16
     b74:	c6 01       	movw	r24, r12
     b76:	0e 94 1f 14 	call	0x283e	; 0x283e <memcpy>
     b7a:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <udi_cdc_rx_pos>
     b7e:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <udi_cdc_rx_pos+0x1>
     b82:	80 0f       	add	r24, r16
     b84:	91 1f       	adc	r25, r17
     b86:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <udi_cdc_rx_pos>
     b8a:	90 93 48 21 	sts	0x2148, r25	; 0x802148 <udi_cdc_rx_pos+0x1>
     b8e:	c0 0e       	add	r12, r16
     b90:	d1 1e       	adc	r13, r17
     b92:	e0 1a       	sub	r14, r16
     b94:	f1 0a       	sbc	r15, r17
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	99 de       	rcall	.-718    	; 0x8cc <udi_cdc_rx_start>
     b9a:	e1 14       	cp	r14, r1
     b9c:	f1 04       	cpc	r15, r1
     b9e:	09 f0       	breq	.+2      	; 0xba2 <udi_cdc_multi_read_buf+0xba>
     ba0:	b0 cf       	rjmp	.-160    	; 0xb02 <udi_cdc_multi_read_buf+0x1a>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0f 90       	pop	r0
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	08 95       	ret

00000bba <udi_cdc_read_buf>:
     bba:	ab 01       	movw	r20, r22
     bbc:	bc 01       	movw	r22, r24
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	93 cf       	rjmp	.-218    	; 0xae8 <udi_cdc_multi_read_buf>
     bc2:	08 95       	ret

00000bc4 <udi_cdc_multi_get_free_tx_buffer>:
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	1f 92       	push	r1
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	8f b7       	in	r24, 0x3f	; 63
     bd0:	89 83       	std	Y+1, r24	; 0x01
     bd2:	f8 94       	cli
     bd4:	99 81       	ldd	r25, Y+1	; 0x01
     bd6:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udi_cdc_tx_buf_sel>
     bda:	e8 2f       	mov	r30, r24
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	ef 53       	subi	r30, 0x3F	; 63
     be4:	ff 4d       	sbci	r31, 0xDF	; 223
     be6:	20 81       	ld	r18, Z
     be8:	31 81       	ldd	r19, Z+1	; 0x01
     bea:	20 34       	cpi	r18, 0x40	; 64
     bec:	31 05       	cpc	r19, r1
     bee:	89 f4       	brne	.+34     	; 0xc12 <udi_cdc_multi_get_free_tx_buffer+0x4e>
     bf0:	40 91 bd 20 	lds	r20, 0x20BD	; 0x8020bd <udi_cdc_tx_trans_ongoing>
     bf4:	41 11       	cpse	r20, r1
     bf6:	0d c0       	rjmp	.+26     	; 0xc12 <udi_cdc_multi_get_free_tx_buffer+0x4e>
     bf8:	40 91 bc 20 	lds	r20, 0x20BC	; 0x8020bc <udi_cdc_tx_both_buf_to_send>
     bfc:	41 11       	cpse	r20, r1
     bfe:	09 c0       	rjmp	.+18     	; 0xc12 <udi_cdc_multi_get_free_tx_buffer+0x4e>
     c00:	21 e0       	ldi	r18, 0x01	; 1
     c02:	20 93 bc 20 	sts	0x20BC, r18	; 0x8020bc <udi_cdc_tx_both_buf_to_send>
     c06:	81 11       	cpse	r24, r1
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	20 93 c0 20 	sts	0x20C0, r18	; 0x8020c0 <udi_cdc_tx_buf_sel>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	9f bf       	out	0x3f, r25	; 63
     c14:	80 e4       	ldi	r24, 0x40	; 64
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	82 1b       	sub	r24, r18
     c1a:	93 0b       	sbc	r25, r19
     c1c:	0f 90       	pop	r0
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     c24:	cf df       	rcall	.-98     	; 0xbc4 <udi_cdc_multi_get_free_tx_buffer>
     c26:	21 e0       	ldi	r18, 0x01	; 1
     c28:	89 2b       	or	r24, r25
     c2a:	09 f4       	brne	.+2      	; 0xc2e <udi_cdc_multi_is_tx_ready+0xa>
     c2c:	20 e0       	ldi	r18, 0x00	; 0
}
     c2e:	82 2f       	mov	r24, r18
     c30:	08 95       	ret

00000c32 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	f7 cf       	rjmp	.-18     	; 0xc24 <udi_cdc_multi_is_tx_ready>
}
     c36:	08 95       	ret

00000c38 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	1f 92       	push	r1
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	f6 2e       	mov	r15, r22
     c4a:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     c4c:	01 e0       	ldi	r16, 0x01	; 1
     c4e:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udi_cdc_line_coding+0x6>
     c52:	89 30       	cpi	r24, 0x09	; 9
     c54:	09 f0       	breq	.+2      	; 0xc58 <udi_cdc_multi_putc+0x20>
     c56:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	e4 df       	rcall	.-56     	; 0xc24 <udi_cdc_multi_is_tx_ready>
     c5c:	81 11       	cpse	r24, r1
     c5e:	07 c0       	rjmp	.+14     	; 0xc6e <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
     c60:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <udi_cdc_data_running>
     c64:	81 11       	cpse	r24, r1
     c66:	f8 cf       	rjmp	.-16     	; 0xc58 <udi_cdc_multi_putc+0x20>
			return false;
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	2d c0       	rjmp	.+90     	; 0xcc8 <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c6e:	8f b7       	in	r24, 0x3f	; 63
     c70:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c72:	f8 94       	cli
	return flags;
     c74:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     c76:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	df 01       	movw	r26, r30
     c7e:	aa 0f       	add	r26, r26
     c80:	bb 1f       	adc	r27, r27
     c82:	af 53       	subi	r26, 0x3F	; 63
     c84:	bf 4d       	sbci	r27, 0xDF	; 223
     c86:	8d 91       	ld	r24, X+
     c88:	9c 91       	ld	r25, X
     c8a:	11 97       	sbiw	r26, 0x01	; 1
     c8c:	ac 01       	movw	r20, r24
     c8e:	4f 5f       	subi	r20, 0xFF	; 255
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	4d 93       	st	X+, r20
     c94:	5c 93       	st	X, r21
     c96:	00 24       	eor	r0, r0
     c98:	f6 95       	lsr	r31
     c9a:	e7 95       	ror	r30
     c9c:	07 94       	ror	r0
     c9e:	f6 95       	lsr	r31
     ca0:	e7 95       	ror	r30
     ca2:	07 94       	ror	r0
     ca4:	fe 2f       	mov	r31, r30
     ca6:	e0 2d       	mov	r30, r0
     ca8:	8e 0f       	add	r24, r30
     caa:	9f 1f       	adc	r25, r31
     cac:	fc 01       	movw	r30, r24
     cae:	ea 53       	subi	r30, 0x3A	; 58
     cb0:	ff 4d       	sbci	r31, 0xDF	; 223
     cb2:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cb4:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     cb6:	00 23       	and	r16, r16
     cb8:	29 f0       	breq	.+10     	; 0xcc4 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     cba:	f1 2e       	mov	r15, r17
     cbc:	11 0f       	add	r17, r17
     cbe:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     cc0:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     cc2:	ca cf       	rjmp	.-108    	; 0xc58 <udi_cdc_multi_putc+0x20>
	}
	return true;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
}
     cc8:	0f 90       	pop	r0
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	08 95       	ret

00000cd6 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     cd6:	bc 01       	movw	r22, r24
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	ae cf       	rjmp	.-164    	; 0xc38 <udi_cdc_multi_putc>
}
     cdc:	08 95       	ret

00000cde <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
     cde:	5f 92       	push	r5
     ce0:	6f 92       	push	r6
     ce2:	7f 92       	push	r7
     ce4:	8f 92       	push	r8
     ce6:	9f 92       	push	r9
     ce8:	af 92       	push	r10
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	1f 92       	push	r1
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	4b 01       	movw	r8, r22
     d04:	5a 01       	movw	r10, r20

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
     d06:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udi_cdc_line_coding+0x6>
     d0a:	89 30       	cpi	r24, 0x09	; 9
     d0c:	11 f4       	brne	.+4      	; 0xd12 <udi_cdc_multi_write_buf+0x34>
		size *=2;
     d0e:	aa 0c       	add	r10, r10
     d10:	bb 1c       	adc	r11, r11

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
     d12:	68 94       	set
     d14:	66 24       	eor	r6, r6
     d16:	66 f8       	bld	r6, 6
     d18:	71 2c       	mov	r7, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	83 df       	rcall	.-250    	; 0xc24 <udi_cdc_multi_is_tx_ready>
     d1e:	81 11       	cpse	r24, r1
     d20:	07 c0       	rjmp	.+14     	; 0xd30 <udi_cdc_multi_write_buf+0x52>
		if (!udi_cdc_data_running) {
     d22:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <udi_cdc_data_running>
     d26:	81 11       	cpse	r24, r1
     d28:	f8 cf       	rjmp	.-16     	; 0xd1a <udi_cdc_multi_write_buf+0x3c>
     d2a:	8a 2d       	mov	r24, r10
     d2c:	9b 2d       	mov	r25, r11
     d2e:	3a c0       	rjmp	.+116    	; 0xda4 <udi_cdc_multi_write_buf+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d30:	8f b7       	in	r24, 0x3f	; 63
     d32:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d34:	f8 94       	cli
	return flags;
     d36:	59 80       	ldd	r5, Y+1	; 0x01
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     d38:	00 91 c0 20 	lds	r16, 0x20C0	; 0x8020c0 <udi_cdc_tx_buf_sel>
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     d3c:	10 e0       	ldi	r17, 0x00	; 0
     d3e:	f8 01       	movw	r30, r16
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	ef 53       	subi	r30, 0x3F	; 63
     d46:	ff 4d       	sbci	r31, 0xDF	; 223
     d48:	e0 80       	ld	r14, Z
     d4a:	f1 80       	ldd	r15, Z+1	; 0x01
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
     d4c:	c3 01       	movw	r24, r6
     d4e:	8e 19       	sub	r24, r14
     d50:	9f 09       	sbc	r25, r15
     d52:	65 01       	movw	r12, r10
     d54:	8a 15       	cp	r24, r10
     d56:	9b 05       	cpc	r25, r11
     d58:	08 f4       	brcc	.+2      	; 0xd5c <udi_cdc_multi_write_buf+0x7e>
     d5a:	6c 01       	movw	r12, r24
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
     d5c:	c8 01       	movw	r24, r16
     d5e:	00 24       	eor	r0, r0
     d60:	96 95       	lsr	r25
     d62:	87 95       	ror	r24
     d64:	07 94       	ror	r0
     d66:	96 95       	lsr	r25
     d68:	87 95       	ror	r24
     d6a:	07 94       	ror	r0
     d6c:	98 2f       	mov	r25, r24
     d6e:	80 2d       	mov	r24, r0
     d70:	8e 0d       	add	r24, r14
     d72:	9f 1d       	adc	r25, r15
     d74:	a6 01       	movw	r20, r12
     d76:	b4 01       	movw	r22, r8
     d78:	8a 53       	subi	r24, 0x3A	; 58
     d7a:	9f 4d       	sbci	r25, 0xDF	; 223
     d7c:	0e 94 1f 14 	call	0x283e	; 0x283e <memcpy>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
     d80:	00 0f       	add	r16, r16
     d82:	11 1f       	adc	r17, r17
     d84:	f8 01       	movw	r30, r16
     d86:	ef 53       	subi	r30, 0x3F	; 63
     d88:	ff 4d       	sbci	r31, 0xDF	; 223
     d8a:	ec 0c       	add	r14, r12
     d8c:	fd 1c       	adc	r15, r13
     d8e:	e0 82       	st	Z, r14
     d90:	f1 82       	std	Z+1, r15	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d92:	5f be       	out	0x3f, r5	; 63
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
     d94:	8c 0c       	add	r8, r12
     d96:	9d 1c       	adc	r9, r13
	size -= copy_nb;
     d98:	ac 18       	sub	r10, r12
     d9a:	bd 08       	sbc	r11, r13

	if (size) {
     d9c:	09 f0       	breq	.+2      	; 0xda0 <udi_cdc_multi_write_buf+0xc2>
     d9e:	bd cf       	rjmp	.-134    	; 0xd1a <udi_cdc_multi_write_buf+0x3c>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
}
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	df 90       	pop	r13
     db4:	cf 90       	pop	r12
     db6:	bf 90       	pop	r11
     db8:	af 90       	pop	r10
     dba:	9f 90       	pop	r9
     dbc:	8f 90       	pop	r8
     dbe:	7f 90       	pop	r7
     dc0:	6f 90       	pop	r6
     dc2:	5f 90       	pop	r5
     dc4:	08 95       	ret

00000dc6 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
     dc6:	ab 01       	movw	r20, r22
	return udi_cdc_multi_write_buf(0, buf, size);
     dc8:	bc 01       	movw	r22, r24
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	88 cf       	rjmp	.-240    	; 0xcde <udi_cdc_multi_write_buf>
}
     dce:	08 95       	ret

00000dd0 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     dd0:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <udc_ptr_conf>
     dd4:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
     dd8:	01 90       	ld	r0, Z+
     dda:	f0 81       	ld	r31, Z
     ddc:	e0 2d       	mov	r30, r0
     dde:	22 81       	ldd	r18, Z+2	; 0x02
     de0:	33 81       	ldd	r19, Z+3	; 0x03
     de2:	2e 0f       	add	r18, r30
     de4:	3f 1f       	adc	r19, r31
     de6:	fc 01       	movw	r30, r24
     de8:	40 81       	ld	r20, Z
     dea:	e4 0f       	add	r30, r20
     dec:	f1 1d       	adc	r31, r1
     dee:	e2 17       	cp	r30, r18
     df0:	f3 07       	cpc	r31, r19
     df2:	b8 f4       	brcc	.+46     	; 0xe22 <udc_next_desc_in_iface+0x52>
     df4:	81 81       	ldd	r24, Z+1	; 0x01
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	b9 f0       	breq	.+46     	; 0xe28 <udc_next_desc_in_iface+0x58>
     dfa:	86 13       	cpse	r24, r22
     dfc:	09 c0       	rjmp	.+18     	; 0xe10 <udc_next_desc_in_iface+0x40>
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <udc_next_desc_in_iface+0x3a>
     e00:	81 81       	ldd	r24, Z+1	; 0x01
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	a1 f0       	breq	.+40     	; 0xe2e <udc_next_desc_in_iface+0x5e>
     e06:	86 13       	cpse	r24, r22
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <udc_next_desc_in_iface+0x40>
     e0a:	8e 2f       	mov	r24, r30
     e0c:	9f 2f       	mov	r25, r31
     e0e:	08 95       	ret
     e10:	80 81       	ld	r24, Z
     e12:	e8 0f       	add	r30, r24
     e14:	f1 1d       	adc	r31, r1
     e16:	e2 17       	cp	r30, r18
     e18:	f3 07       	cpc	r31, r19
     e1a:	90 f3       	brcs	.-28     	; 0xe00 <udc_next_desc_in_iface+0x30>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	08 95       	ret
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	08 95       	ret
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	08 95       	ret
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	08 95       	ret

00000e34 <udc_valid_address>:
     e34:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
     e38:	8f 77       	andi	r24, 0x7F	; 127
     e3a:	95 c7       	rjmp	.+3882   	; 0x1d66 <udd_set_address>
     e3c:	08 95       	ret

00000e3e <udc_update_iface_desc>:
     e3e:	90 91 ee 21 	lds	r25, 0x21EE	; 0x8021ee <udc_num_configuration>
     e42:	99 23       	and	r25, r25
     e44:	81 f1       	breq	.+96     	; 0xea6 <udc_update_iface_desc+0x68>
     e46:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <udc_ptr_conf>
     e4a:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
     e4e:	01 90       	ld	r0, Z+
     e50:	f0 81       	ld	r31, Z
     e52:	e0 2d       	mov	r30, r0
     e54:	94 81       	ldd	r25, Z+4	; 0x04
     e56:	89 17       	cp	r24, r25
     e58:	40 f5       	brcc	.+80     	; 0xeaa <udc_update_iface_desc+0x6c>
     e5a:	e0 93 ea 21 	sts	0x21EA, r30	; 0x8021ea <udc_ptr_iface>
     e5e:	f0 93 eb 21 	sts	0x21EB, r31	; 0x8021eb <udc_ptr_iface+0x1>
     e62:	22 81       	ldd	r18, Z+2	; 0x02
     e64:	33 81       	ldd	r19, Z+3	; 0x03
     e66:	2e 0f       	add	r18, r30
     e68:	3f 1f       	adc	r19, r31
     e6a:	e2 17       	cp	r30, r18
     e6c:	f3 07       	cpc	r31, r19
     e6e:	f8 f4       	brcc	.+62     	; 0xeae <udc_update_iface_desc+0x70>
     e70:	91 81       	ldd	r25, Z+1	; 0x01
     e72:	94 30       	cpi	r25, 0x04	; 4
     e74:	61 f4       	brne	.+24     	; 0xe8e <udc_update_iface_desc+0x50>
     e76:	92 81       	ldd	r25, Z+2	; 0x02
     e78:	98 13       	cpse	r25, r24
     e7a:	09 c0       	rjmp	.+18     	; 0xe8e <udc_update_iface_desc+0x50>
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	96 13       	cpse	r25, r22
     e80:	06 c0       	rjmp	.+12     	; 0xe8e <udc_update_iface_desc+0x50>
     e82:	e0 93 ea 21 	sts	0x21EA, r30	; 0x8021ea <udc_ptr_iface>
     e86:	f0 93 eb 21 	sts	0x21EB, r31	; 0x8021eb <udc_ptr_iface+0x1>
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	08 95       	ret
     e8e:	90 81       	ld	r25, Z
     e90:	e9 0f       	add	r30, r25
     e92:	f1 1d       	adc	r31, r1
     e94:	e2 17       	cp	r30, r18
     e96:	f3 07       	cpc	r31, r19
     e98:	58 f3       	brcs	.-42     	; 0xe70 <udc_update_iface_desc+0x32>
     e9a:	e0 93 ea 21 	sts	0x21EA, r30	; 0x8021ea <udc_ptr_iface>
     e9e:	f0 93 eb 21 	sts	0x21EB, r31	; 0x8021eb <udc_ptr_iface+0x1>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	08 95       	ret
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	08 95       	ret
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	08 95       	ret
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	08 95       	ret

00000eb2 <udc_iface_disable>:
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	c8 2f       	mov	r28, r24
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	be df       	rcall	.-132    	; 0xe3e <udc_update_iface_desc>
     ec2:	18 2f       	mov	r17, r24
     ec4:	88 23       	and	r24, r24
     ec6:	81 f1       	breq	.+96     	; 0xf28 <udc_iface_disable+0x76>
     ec8:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
     ecc:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
     ed0:	ec 2f       	mov	r30, r28
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	ee 0f       	add	r30, r30
     ed6:	ff 1f       	adc	r31, r31
     ed8:	12 96       	adiw	r26, 0x02	; 2
     eda:	8d 91       	ld	r24, X+
     edc:	9c 91       	ld	r25, X
     ede:	13 97       	sbiw	r26, 0x03	; 3
     ee0:	e8 0f       	add	r30, r24
     ee2:	f9 1f       	adc	r31, r25
     ee4:	e0 80       	ld	r14, Z
     ee6:	f1 80       	ldd	r15, Z+1	; 0x01
     ee8:	d7 01       	movw	r26, r14
     eea:	16 96       	adiw	r26, 0x06	; 6
     eec:	ed 91       	ld	r30, X+
     eee:	fc 91       	ld	r31, X
     ef0:	17 97       	sbiw	r26, 0x07	; 7
     ef2:	19 95       	eicall
     ef4:	68 2f       	mov	r22, r24
     ef6:	8c 2f       	mov	r24, r28
     ef8:	a2 df       	rcall	.-188    	; 0xe3e <udc_update_iface_desc>
     efa:	18 2f       	mov	r17, r24
     efc:	88 23       	and	r24, r24
     efe:	a1 f0       	breq	.+40     	; 0xf28 <udc_iface_disable+0x76>
     f00:	c0 91 ea 21 	lds	r28, 0x21EA	; 0x8021ea <udc_ptr_iface>
     f04:	d0 91 eb 21 	lds	r29, 0x21EB	; 0x8021eb <udc_ptr_iface+0x1>
     f08:	65 e0       	ldi	r22, 0x05	; 5
     f0a:	ce 01       	movw	r24, r28
     f0c:	61 df       	rcall	.-318    	; 0xdd0 <udc_next_desc_in_iface>
     f0e:	ec 01       	movw	r28, r24
     f10:	89 2b       	or	r24, r25
     f12:	21 f0       	breq	.+8      	; 0xf1c <udc_iface_disable+0x6a>
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	0e 94 b2 10 	call	0x2164	; 0x2164 <udd_ep_free>
     f1a:	f6 cf       	rjmp	.-20     	; 0xf08 <udc_iface_disable+0x56>
     f1c:	d7 01       	movw	r26, r14
     f1e:	12 96       	adiw	r26, 0x02	; 2
     f20:	ed 91       	ld	r30, X+
     f22:	fc 91       	ld	r31, X
     f24:	13 97       	sbiw	r26, 0x03	; 3
     f26:	19 95       	eicall
     f28:	81 2f       	mov	r24, r17
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	08 95       	ret

00000f36 <udc_iface_enable>:
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	18 2f       	mov	r17, r24
     f3e:	7f df       	rcall	.-258    	; 0xe3e <udc_update_iface_desc>
     f40:	88 23       	and	r24, r24
     f42:	39 f1       	breq	.+78     	; 0xf92 <udc_iface_enable+0x5c>
     f44:	c0 91 ea 21 	lds	r28, 0x21EA	; 0x8021ea <udc_ptr_iface>
     f48:	d0 91 eb 21 	lds	r29, 0x21EB	; 0x8021eb <udc_ptr_iface+0x1>
     f4c:	65 e0       	ldi	r22, 0x05	; 5
     f4e:	ce 01       	movw	r24, r28
     f50:	3f df       	rcall	.-386    	; 0xdd0 <udc_next_desc_in_iface>
     f52:	ec 01       	movw	r28, r24
     f54:	89 2b       	or	r24, r25
     f56:	41 f0       	breq	.+16     	; 0xf68 <udc_iface_enable+0x32>
     f58:	4c 81       	ldd	r20, Y+4	; 0x04
     f5a:	5d 81       	ldd	r21, Y+5	; 0x05
     f5c:	6b 81       	ldd	r22, Y+3	; 0x03
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	17 d7       	rcall	.+3630   	; 0x1d90 <udd_ep_alloc>
     f62:	81 11       	cpse	r24, r1
     f64:	f3 cf       	rjmp	.-26     	; 0xf4c <udc_iface_enable+0x16>
     f66:	15 c0       	rjmp	.+42     	; 0xf92 <udc_iface_enable+0x5c>
     f68:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
     f6c:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
     f70:	e1 2f       	mov	r30, r17
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	12 96       	adiw	r26, 0x02	; 2
     f7a:	8d 91       	ld	r24, X+
     f7c:	9c 91       	ld	r25, X
     f7e:	13 97       	sbiw	r26, 0x03	; 3
     f80:	e8 0f       	add	r30, r24
     f82:	f9 1f       	adc	r31, r25
     f84:	01 90       	ld	r0, Z+
     f86:	f0 81       	ld	r31, Z
     f88:	e0 2d       	mov	r30, r0
     f8a:	01 90       	ld	r0, Z+
     f8c:	f0 81       	ld	r31, Z
     f8e:	e0 2d       	mov	r30, r0
     f90:	19 95       	eicall
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	08 95       	ret

00000f9a <udc_start>:
     f9a:	60 c6       	rjmp	.+3264   	; 0x1c5c <udd_enable>
     f9c:	08 95       	ret

00000f9e <udc_reset>:
     f9e:	cf 93       	push	r28
     fa0:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
     fa4:	88 23       	and	r24, r24
     fa6:	c1 f0       	breq	.+48     	; 0xfd8 <udc_reset+0x3a>
     fa8:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <udc_ptr_conf>
     fac:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
     fb0:	01 90       	ld	r0, Z+
     fb2:	f0 81       	ld	r31, Z
     fb4:	e0 2d       	mov	r30, r0
     fb6:	84 81       	ldd	r24, Z+4	; 0x04
     fb8:	88 23       	and	r24, r24
     fba:	71 f0       	breq	.+28     	; 0xfd8 <udc_reset+0x3a>
     fbc:	c0 e0       	ldi	r28, 0x00	; 0
     fbe:	8c 2f       	mov	r24, r28
     fc0:	78 df       	rcall	.-272    	; 0xeb2 <udc_iface_disable>
     fc2:	cf 5f       	subi	r28, 0xFF	; 255
     fc4:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <udc_ptr_conf>
     fc8:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
     fcc:	01 90       	ld	r0, Z+
     fce:	f0 81       	ld	r31, Z
     fd0:	e0 2d       	mov	r30, r0
     fd2:	84 81       	ldd	r24, Z+4	; 0x04
     fd4:	c8 17       	cp	r28, r24
     fd6:	98 f3       	brcs	.-26     	; 0xfbe <udc_reset+0x20>
     fd8:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <udc_num_configuration>
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udc_device_status>
     fe4:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <udc_device_status+0x1>
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     fec:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     fee:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
     ff2:	88 23       	and	r24, r24
     ff4:	49 f1       	breq	.+82     	; 0x1048 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ff6:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
     ffa:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
     ffe:	ed 91       	ld	r30, X+
    1000:	fc 91       	ld	r31, X
    1002:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1004:	84 81       	ldd	r24, Z+4	; 0x04
    1006:	88 23       	and	r24, r24
    1008:	f9 f0       	breq	.+62     	; 0x1048 <udc_sof_notify+0x5c>
    100a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    100c:	ec 2f       	mov	r30, r28
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	12 96       	adiw	r26, 0x02	; 2
    1016:	8d 91       	ld	r24, X+
    1018:	9c 91       	ld	r25, X
    101a:	13 97       	sbiw	r26, 0x03	; 3
    101c:	e8 0f       	add	r30, r24
    101e:	f9 1f       	adc	r31, r25
    1020:	01 90       	ld	r0, Z+
    1022:	f0 81       	ld	r31, Z
    1024:	e0 2d       	mov	r30, r0
    1026:	00 84       	ldd	r0, Z+8	; 0x08
    1028:	f1 85       	ldd	r31, Z+9	; 0x09
    102a:	e0 2d       	mov	r30, r0
    102c:	30 97       	sbiw	r30, 0x00	; 0
    102e:	09 f0       	breq	.+2      	; 0x1032 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1030:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1032:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1034:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
    1038:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    103c:	ed 91       	ld	r30, X+
    103e:	fc 91       	ld	r31, X
    1040:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	c8 17       	cp	r28, r24
    1046:	10 f3       	brcs	.-60     	; 0x100c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1054:	ec e8       	ldi	r30, 0x8C	; 140
    1056:	f3 e2       	ldi	r31, 0x23	; 35
    1058:	12 86       	std	Z+10, r1	; 0x0a
    105a:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    105c:	14 86       	std	Z+12, r1	; 0x0c
    105e:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1060:	16 86       	std	Z+14, r1	; 0x0e
    1062:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1064:	80 81       	ld	r24, Z
    1066:	88 23       	and	r24, r24
    1068:	0c f0       	brlt	.+2      	; 0x106c <udc_process_setup+0x20>
    106a:	5a c2       	rjmp	.+1204   	; 0x1520 <udc_process_setup+0x4d4>
		if (udd_g_ctrlreq.req.wLength == 0) {
    106c:	20 91 92 23 	lds	r18, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    1070:	30 91 93 23 	lds	r19, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    1074:	21 15       	cp	r18, r1
    1076:	31 05       	cpc	r19, r1
    1078:	09 f0       	breq	.+2      	; 0x107c <udc_process_setup+0x30>
    107a:	57 c2       	rjmp	.+1198   	; 0x152a <udc_process_setup+0x4de>
    107c:	4d c2       	rjmp	.+1178   	; 0x1518 <udc_process_setup+0x4cc>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    107e:	8f 71       	andi	r24, 0x1F	; 31
    1080:	09 f0       	breq	.+2      	; 0x1084 <udc_process_setup+0x38>
    1082:	a3 c0       	rjmp	.+326    	; 0x11ca <udc_process_setup+0x17e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1084:	90 91 8d 23 	lds	r25, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    1088:	96 30       	cpi	r25, 0x06	; 6
    108a:	79 f0       	breq	.+30     	; 0x10aa <udc_process_setup+0x5e>
    108c:	98 30       	cpi	r25, 0x08	; 8
    108e:	09 f4       	brne	.+2      	; 0x1092 <udc_process_setup+0x46>
    1090:	92 c0       	rjmp	.+292    	; 0x11b6 <udc_process_setup+0x16a>
    1092:	91 11       	cpse	r25, r1
    1094:	9a c0       	rjmp	.+308    	; 0x11ca <udc_process_setup+0x17e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	09 f0       	breq	.+2      	; 0x109e <udc_process_setup+0x52>
    109c:	c6 c1       	rjmp	.+908    	; 0x142a <udc_process_setup+0x3de>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    109e:	62 e0       	ldi	r22, 0x02	; 2
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	82 ef       	ldi	r24, 0xF2	; 242
    10a4:	91 e2       	ldi	r25, 0x21	; 33
    10a6:	6d d6       	rcall	.+3290   	; 0x1d82 <udd_set_setup_payload>
    10a8:	45 c2       	rjmp	.+1162   	; 0x1534 <udc_process_setup+0x4e8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    10aa:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    10ae:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    10b2:	29 2f       	mov	r18, r25
    10b4:	33 27       	eor	r19, r19
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	a9 f0       	breq	.+42     	; 0x10e6 <udc_process_setup+0x9a>
    10bc:	24 f4       	brge	.+8      	; 0x10c6 <udc_process_setup+0x7a>
    10be:	21 30       	cpi	r18, 0x01	; 1
    10c0:	31 05       	cpc	r19, r1
    10c2:	41 f0       	breq	.+16     	; 0x10d4 <udc_process_setup+0x88>
    10c4:	a9 c1       	rjmp	.+850    	; 0x1418 <udc_process_setup+0x3cc>
    10c6:	23 30       	cpi	r18, 0x03	; 3
    10c8:	31 05       	cpc	r19, r1
    10ca:	d9 f1       	breq	.+118    	; 0x1142 <udc_process_setup+0xf6>
    10cc:	2f 30       	cpi	r18, 0x0F	; 15
    10ce:	31 05       	cpc	r19, r1
    10d0:	51 f1       	breq	.+84     	; 0x1126 <udc_process_setup+0xda>
    10d2:	a2 c1       	rjmp	.+836    	; 0x1418 <udc_process_setup+0x3cc>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    10d4:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config>
    10d8:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    10dc:	dc 01       	movw	r26, r24
    10de:	6c 91       	ld	r22, X
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	4f d6       	rcall	.+3230   	; 0x1d82 <udd_set_setup_payload>
    10e4:	59 c0       	rjmp	.+178    	; 0x1198 <udc_process_setup+0x14c>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    10e6:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    10ea:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
    10ee:	21 89       	ldd	r18, Z+17	; 0x11
    10f0:	82 17       	cp	r24, r18
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <udc_process_setup+0xaa>
    10f4:	9a c1       	rjmp	.+820    	; 0x142a <udc_process_setup+0x3de>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    10f6:	99 27       	eor	r25, r25
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    1104:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    1108:	e8 0f       	add	r30, r24
    110a:	f9 1f       	adc	r31, r25
    110c:	80 81       	ld	r24, Z
    110e:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1110:	fc 01       	movw	r30, r24
    1112:	62 81       	ldd	r22, Z+2	; 0x02
    1114:	73 81       	ldd	r23, Z+3	; 0x03
    1116:	35 d6       	rcall	.+3178   	; 0x1d82 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1118:	e0 91 94 23 	lds	r30, 0x2394	; 0x802394 <udd_g_ctrlreq+0x8>
    111c:	f0 91 95 23 	lds	r31, 0x2395	; 0x802395 <udd_g_ctrlreq+0x9>
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	81 83       	std	Z+1, r24	; 0x01
    1124:	39 c0       	rjmp	.+114    	; 0x1198 <udc_process_setup+0x14c>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1126:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <udc_config+0x4>
    112a:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <udc_config+0x5>
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	09 f4       	brne	.+2      	; 0x1134 <udc_process_setup+0xe8>
    1132:	7b c1       	rjmp	.+758    	; 0x142a <udc_process_setup+0x3de>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1134:	dc 01       	movw	r26, r24
    1136:	12 96       	adiw	r26, 0x02	; 2
    1138:	6d 91       	ld	r22, X+
    113a:	7c 91       	ld	r23, X
    113c:	13 97       	sbiw	r26, 0x03	; 3
    113e:	21 d6       	rcall	.+3138   	; 0x1d82 <udd_set_setup_payload>
    1140:	2b c0       	rjmp	.+86     	; 0x1198 <udc_process_setup+0x14c>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1142:	99 27       	eor	r25, r25
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	71 f0       	breq	.+28     	; 0x1166 <udc_process_setup+0x11a>
    114a:	38 f0       	brcs	.+14     	; 0x115a <udc_process_setup+0x10e>
    114c:	02 97       	sbiw	r24, 0x02	; 2
    114e:	09 f0       	breq	.+2      	; 0x1152 <udc_process_setup+0x106>
    1150:	6c c1       	rjmp	.+728    	; 0x142a <udc_process_setup+0x3de>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1152:	88 e9       	ldi	r24, 0x98	; 152
    1154:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1156:	2f e0       	ldi	r18, 0x0F	; 15
    1158:	09 c0       	rjmp	.+18     	; 0x116c <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    115a:	64 e0       	ldi	r22, 0x04	; 4
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	82 eb       	ldi	r24, 0xB2	; 178
    1160:	90 e2       	ldi	r25, 0x20	; 32
    1162:	0f d6       	rcall	.+3102   	; 0x1d82 <udd_set_setup_payload>
    1164:	19 c0       	rjmp	.+50     	; 0x1198 <udc_process_setup+0x14c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1166:	88 ea       	ldi	r24, 0xA8	; 168
    1168:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    116a:	29 e0       	ldi	r18, 0x09	; 9
    116c:	38 2f       	mov	r19, r24
    116e:	aa e7       	ldi	r26, 0x7A	; 122
    1170:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1172:	e8 2f       	mov	r30, r24
    1174:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1176:	81 91       	ld	r24, Z+
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	8d 93       	st	X+, r24
    117c:	9d 93       	st	X+, r25
    117e:	8e 2f       	mov	r24, r30
    1180:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1182:	82 17       	cp	r24, r18
    1184:	c0 f3       	brcs	.-16     	; 0x1176 <udc_process_setup+0x12a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1186:	62 2f       	mov	r22, r18
    1188:	66 0f       	add	r22, r22
    118a:	6e 5f       	subi	r22, 0xFE	; 254
    118c:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <udc_string_desc>
		udd_set_setup_payload(
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	88 e7       	ldi	r24, 0x78	; 120
    1194:	90 e2       	ldi	r25, 0x20	; 32
    1196:	f5 d5       	rcall	.+3050   	; 0x1d82 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1198:	ec e8       	ldi	r30, 0x8C	; 140
    119a:	f3 e2       	ldi	r31, 0x23	; 35
    119c:	86 81       	ldd	r24, Z+6	; 0x06
    119e:	97 81       	ldd	r25, Z+7	; 0x07
    11a0:	22 85       	ldd	r18, Z+10	; 0x0a
    11a2:	33 85       	ldd	r19, Z+11	; 0x0b
    11a4:	82 17       	cp	r24, r18
    11a6:	93 07       	cpc	r25, r19
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <udc_process_setup+0x160>
    11aa:	c4 c1       	rjmp	.+904    	; 0x1534 <udc_process_setup+0x4e8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    11ac:	80 93 96 23 	sts	0x2396, r24	; 0x802396 <udd_g_ctrlreq+0xa>
    11b0:	90 93 97 23 	sts	0x2397, r25	; 0x802397 <udd_g_ctrlreq+0xb>
    11b4:	bf c1       	rjmp	.+894    	; 0x1534 <udc_process_setup+0x4e8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    11b6:	21 30       	cpi	r18, 0x01	; 1
    11b8:	31 05       	cpc	r19, r1
    11ba:	09 f0       	breq	.+2      	; 0x11be <udc_process_setup+0x172>
    11bc:	36 c1       	rjmp	.+620    	; 0x142a <udc_process_setup+0x3de>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    11be:	61 e0       	ldi	r22, 0x01	; 1
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	8e ee       	ldi	r24, 0xEE	; 238
    11c4:	91 e2       	ldi	r25, 0x21	; 33
    11c6:	dd d5       	rcall	.+3002   	; 0x1d82 <udd_set_setup_payload>
    11c8:	b5 c1       	rjmp	.+874    	; 0x1534 <udc_process_setup+0x4e8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	e1 f5       	brne	.+120    	; 0x1246 <udc_process_setup+0x1fa>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    11ce:	90 91 8d 23 	lds	r25, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    11d2:	9a 30       	cpi	r25, 0x0A	; 10
    11d4:	c1 f5       	brne	.+112    	; 0x1246 <udc_process_setup+0x1fa>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    11d6:	21 30       	cpi	r18, 0x01	; 1
    11d8:	31 05       	cpc	r19, r1
    11da:	09 f0       	breq	.+2      	; 0x11de <udc_process_setup+0x192>
    11dc:	26 c1       	rjmp	.+588    	; 0x142a <udc_process_setup+0x3de>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    11de:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
    11e2:	88 23       	and	r24, r24
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <udc_process_setup+0x19c>
    11e6:	21 c1       	rjmp	.+578    	; 0x142a <udc_process_setup+0x3de>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    11e8:	c0 91 90 23 	lds	r28, 0x2390	; 0x802390 <udd_g_ctrlreq+0x4>
    11ec:	d0 91 91 23 	lds	r29, 0x2391	; 0x802391 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    11f0:	00 91 ec 21 	lds	r16, 0x21EC	; 0x8021ec <udc_ptr_conf>
    11f4:	10 91 ed 21 	lds	r17, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    11f8:	d8 01       	movw	r26, r16
    11fa:	ed 91       	ld	r30, X+
    11fc:	fc 91       	ld	r31, X
    11fe:	84 81       	ldd	r24, Z+4	; 0x04
    1200:	c8 17       	cp	r28, r24
    1202:	08 f0       	brcs	.+2      	; 0x1206 <udc_process_setup+0x1ba>
    1204:	12 c1       	rjmp	.+548    	; 0x142a <udc_process_setup+0x3de>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	8c 2f       	mov	r24, r28
    120a:	19 de       	rcall	.-974    	; 0xe3e <udc_update_iface_desc>
    120c:	88 23       	and	r24, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <udc_process_setup+0x1c6>
    1210:	0c c1       	rjmp	.+536    	; 0x142a <udc_process_setup+0x3de>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1212:	ce 01       	movw	r24, r28
    1214:	99 27       	eor	r25, r25
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	d8 01       	movw	r26, r16
    121c:	12 96       	adiw	r26, 0x02	; 2
    121e:	ed 91       	ld	r30, X+
    1220:	fc 91       	ld	r31, X
    1222:	13 97       	sbiw	r26, 0x03	; 3
    1224:	e8 0f       	add	r30, r24
    1226:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1228:	01 90       	ld	r0, Z+
    122a:	f0 81       	ld	r31, Z
    122c:	e0 2d       	mov	r30, r0
    122e:	86 81       	ldd	r24, Z+6	; 0x06
    1230:	97 81       	ldd	r25, Z+7	; 0x07
    1232:	fc 01       	movw	r30, r24
    1234:	19 95       	eicall
    1236:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	80 ef       	ldi	r24, 0xF0	; 240
    1240:	91 e2       	ldi	r25, 0x21	; 33
    1242:	9f d5       	rcall	.+2878   	; 0x1d82 <udd_set_setup_payload>
    1244:	77 c1       	rjmp	.+750    	; 0x1534 <udc_process_setup+0x4e8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	09 f0       	breq	.+2      	; 0x124c <udc_process_setup+0x200>
    124a:	ef c0       	rjmp	.+478    	; 0x142a <udc_process_setup+0x3de>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    124c:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    1250:	81 11       	cpse	r24, r1
    1252:	e4 c0       	rjmp	.+456    	; 0x141c <udc_process_setup+0x3d0>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	09 f0       	breq	.+2      	; 0x125c <udc_process_setup+0x210>
    125a:	e7 c0       	rjmp	.+462    	; 0x142a <udc_process_setup+0x3de>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    125c:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <udd_g_ctrlreq+0x4>
    1260:	1f d6       	rcall	.+3134   	; 0x1ea0 <udd_ep_is_halted>
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	80 93 e8 21 	sts	0x21E8, r24	; 0x8021e8 <udc_ep_status.4680>
    1268:	90 93 e9 21 	sts	0x21E9, r25	; 0x8021e9 <udc_ep_status.4680+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    126c:	62 e0       	ldi	r22, 0x02	; 2
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	88 ee       	ldi	r24, 0xE8	; 232
    1272:	91 e2       	ldi	r25, 0x21	; 33
    1274:	86 d5       	rcall	.+2828   	; 0x1d82 <udd_set_setup_payload>
    1276:	5e c1       	rjmp	.+700    	; 0x1534 <udc_process_setup+0x4e8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1278:	8f 71       	andi	r24, 0x1F	; 31
    127a:	09 f0       	breq	.+2      	; 0x127e <udc_process_setup+0x232>
    127c:	83 c0       	rjmp	.+262    	; 0x1384 <udc_process_setup+0x338>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    127e:	90 91 8d 23 	lds	r25, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    1282:	93 30       	cpi	r25, 0x03	; 3
    1284:	09 f4       	brne	.+2      	; 0x1288 <udc_process_setup+0x23c>
    1286:	cc c0       	rjmp	.+408    	; 0x1420 <udc_process_setup+0x3d4>
    1288:	18 f4       	brcc	.+6      	; 0x1290 <udc_process_setup+0x244>
    128a:	91 30       	cpi	r25, 0x01	; 1
    128c:	a1 f0       	breq	.+40     	; 0x12b6 <udc_process_setup+0x26a>
    128e:	7a c0       	rjmp	.+244    	; 0x1384 <udc_process_setup+0x338>
    1290:	95 30       	cpi	r25, 0x05	; 5
    1292:	19 f0       	breq	.+6      	; 0x129a <udc_process_setup+0x24e>
    1294:	99 30       	cpi	r25, 0x09	; 9
    1296:	39 f1       	breq	.+78     	; 0x12e6 <udc_process_setup+0x29a>
    1298:	75 c0       	rjmp	.+234    	; 0x1384 <udc_process_setup+0x338>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    129a:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    129e:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    12a2:	89 2b       	or	r24, r25
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <udc_process_setup+0x25c>
    12a6:	c1 c0       	rjmp	.+386    	; 0x142a <udc_process_setup+0x3de>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    12a8:	8a e1       	ldi	r24, 0x1A	; 26
    12aa:	97 e0       	ldi	r25, 0x07	; 7
    12ac:	80 93 98 23 	sts	0x2398, r24	; 0x802398 <udd_g_ctrlreq+0xc>
    12b0:	90 93 99 23 	sts	0x2399, r25	; 0x802399 <udd_g_ctrlreq+0xd>
    12b4:	3f c1       	rjmp	.+638    	; 0x1534 <udc_process_setup+0x4e8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    12b6:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    12ba:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    12be:	89 2b       	or	r24, r25
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <udc_process_setup+0x278>
    12c2:	b3 c0       	rjmp	.+358    	; 0x142a <udc_process_setup+0x3de>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    12c4:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    12c8:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <udc_process_setup+0x286>
    12d0:	ac c0       	rjmp	.+344    	; 0x142a <udc_process_setup+0x3de>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    12d2:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udc_device_status>
    12d6:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <udc_device_status+0x1>
    12da:	8d 7f       	andi	r24, 0xFD	; 253
    12dc:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udc_device_status>
    12e0:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <udc_device_status+0x1>
    12e4:	27 c1       	rjmp	.+590    	; 0x1534 <udc_process_setup+0x4e8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    12e6:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    12ea:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    12ee:	89 2b       	or	r24, r25
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <udc_process_setup+0x2a8>
    12f2:	9b c0       	rjmp	.+310    	; 0x142a <udc_process_setup+0x3de>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    12f4:	3b d5       	rcall	.+2678   	; 0x1d6c <udd_getaddress>
    12f6:	88 23       	and	r24, r24
    12f8:	09 f4       	brne	.+2      	; 0x12fc <udc_process_setup+0x2b0>
    12fa:	97 c0       	rjmp	.+302    	; 0x142a <udc_process_setup+0x3de>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    12fc:	20 91 8e 23 	lds	r18, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    1300:	30 91 8f 23 	lds	r19, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>
    1304:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1306:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    130a:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    130e:	81 89       	ldd	r24, Z+17	; 0x11
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	82 17       	cp	r24, r18
    1314:	93 07       	cpc	r25, r19
    1316:	08 f4       	brcc	.+2      	; 0x131a <udc_process_setup+0x2ce>
    1318:	88 c0       	rjmp	.+272    	; 0x142a <udc_process_setup+0x3de>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    131a:	41 de       	rcall	.-894    	; 0xf9e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    131c:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    1320:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>
    1324:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1328:	88 23       	and	r24, r24
    132a:	09 f4       	brne	.+2      	; 0x132e <udc_process_setup+0x2e2>
    132c:	03 c1       	rjmp	.+518    	; 0x1534 <udc_process_setup+0x4e8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    132e:	99 27       	eor	r25, r25
    1330:	81 50       	subi	r24, 0x01	; 1
    1332:	90 4c       	sbci	r25, 0xC0	; 192
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    1340:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    1344:	e8 0f       	add	r30, r24
    1346:	f9 1f       	adc	r31, r25
    1348:	e0 93 ec 21 	sts	0x21EC, r30	; 0x8021ec <udc_ptr_conf>
    134c:	f0 93 ed 21 	sts	0x21ED, r31	; 0x8021ed <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1350:	01 90       	ld	r0, Z+
    1352:	f0 81       	ld	r31, Z
    1354:	e0 2d       	mov	r30, r0
    1356:	84 81       	ldd	r24, Z+4	; 0x04
    1358:	88 23       	and	r24, r24
    135a:	09 f4       	brne	.+2      	; 0x135e <udc_process_setup+0x312>
    135c:	eb c0       	rjmp	.+470    	; 0x1534 <udc_process_setup+0x4e8>
    135e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	8c 2f       	mov	r24, r28
    1364:	e8 dd       	rcall	.-1072   	; 0xf36 <udc_iface_enable>
    1366:	88 23       	and	r24, r24
    1368:	09 f4       	brne	.+2      	; 0x136c <udc_process_setup+0x320>
    136a:	5f c0       	rjmp	.+190    	; 0x142a <udc_process_setup+0x3de>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    136c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    136e:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <udc_ptr_conf>
    1372:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    1376:	01 90       	ld	r0, Z+
    1378:	f0 81       	ld	r31, Z
    137a:	e0 2d       	mov	r30, r0
    137c:	84 81       	ldd	r24, Z+4	; 0x04
    137e:	c8 17       	cp	r28, r24
    1380:	78 f3       	brcs	.-34     	; 0x1360 <udc_process_setup+0x314>
    1382:	d8 c0       	rjmp	.+432    	; 0x1534 <udc_process_setup+0x4e8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	e1 f4       	brne	.+56     	; 0x13c0 <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1388:	90 91 8d 23 	lds	r25, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    138c:	9b 30       	cpi	r25, 0x0B	; 11
    138e:	c1 f4       	brne	.+48     	; 0x13c0 <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1390:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    1394:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    1398:	89 2b       	or	r24, r25
    139a:	09 f0       	breq	.+2      	; 0x139e <udc_process_setup+0x352>
    139c:	46 c0       	rjmp	.+140    	; 0x142a <udc_process_setup+0x3de>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    139e:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
    13a2:	88 23       	and	r24, r24
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <udc_process_setup+0x35c>
    13a6:	41 c0       	rjmp	.+130    	; 0x142a <udc_process_setup+0x3de>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    13a8:	ec e8       	ldi	r30, 0x8C	; 140
    13aa:	f3 e2       	ldi	r31, 0x23	; 35
    13ac:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    13ae:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    13b0:	8c 2f       	mov	r24, r28
    13b2:	7f dd       	rcall	.-1282   	; 0xeb2 <udc_iface_disable>
    13b4:	88 23       	and	r24, r24
    13b6:	c9 f1       	breq	.+114    	; 0x142a <udc_process_setup+0x3de>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    13b8:	6d 2f       	mov	r22, r29
    13ba:	8c 2f       	mov	r24, r28
    13bc:	bc dd       	rcall	.-1160   	; 0xf36 <udc_iface_enable>
    13be:	33 c0       	rjmp	.+102    	; 0x1426 <udc_process_setup+0x3da>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    13c0:	82 30       	cpi	r24, 0x02	; 2
    13c2:	99 f5       	brne	.+102    	; 0x142a <udc_process_setup+0x3de>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    13c4:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	19 f0       	breq	.+6      	; 0x13d2 <udc_process_setup+0x386>
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	89 f0       	breq	.+34     	; 0x13f2 <udc_process_setup+0x3a6>
    13d0:	29 c0       	rjmp	.+82     	; 0x1424 <udc_process_setup+0x3d8>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    13d2:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    13d6:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    13da:	89 2b       	or	r24, r25
    13dc:	31 f5       	brne	.+76     	; 0x142a <udc_process_setup+0x3de>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    13de:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    13e2:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>
    13e6:	89 2b       	or	r24, r25
    13e8:	01 f5       	brne	.+64     	; 0x142a <udc_process_setup+0x3de>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    13ea:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <udd_g_ctrlreq+0x4>
    13ee:	73 d5       	rcall	.+2790   	; 0x1ed6 <udd_ep_clear_halt>
    13f0:	1a c0       	rjmp	.+52     	; 0x1426 <udc_process_setup+0x3da>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    13f2:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    13f6:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    13fa:	89 2b       	or	r24, r25
    13fc:	b1 f4       	brne	.+44     	; 0x142a <udc_process_setup+0x3de>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    13fe:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    1402:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>
    1406:	89 2b       	or	r24, r25
    1408:	81 f4       	brne	.+32     	; 0x142a <udc_process_setup+0x3de>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    140a:	cc e8       	ldi	r28, 0x8C	; 140
    140c:	d3 e2       	ldi	r29, 0x23	; 35
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	60 d6       	rcall	.+3264   	; 0x20d2 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	c3 d6       	rcall	.+3462   	; 0x219c <udd_ep_set_halt>
    1416:	07 c0       	rjmp	.+14     	; 0x1426 <udc_process_setup+0x3da>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <udc_process_setup+0x3da>
				break;
			}
		}
#endif
	}
	return false;
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <udc_process_setup+0x3da>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <udc_process_setup+0x3da>
				break;
			}
		}
#endif
	}
	return false;
    1424:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1426:	81 11       	cpse	r24, r1
    1428:	86 c0       	rjmp	.+268    	; 0x1536 <udc_process_setup+0x4ea>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    142a:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <udd_g_ctrlreq>
    142e:	8f 71       	andi	r24, 0x1F	; 31
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	71 f5       	brne	.+92     	; 0x1490 <udc_process_setup+0x444>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1434:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
    1438:	88 23       	and	r24, r24
    143a:	51 f1       	breq	.+84     	; 0x1490 <udc_process_setup+0x444>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    143c:	00 91 90 23 	lds	r16, 0x2390	; 0x802390 <udd_g_ctrlreq+0x4>
    1440:	10 91 91 23 	lds	r17, 0x2391	; 0x802391 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1444:	c0 91 ec 21 	lds	r28, 0x21EC	; 0x8021ec <udc_ptr_conf>
    1448:	d0 91 ed 21 	lds	r29, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    144c:	e8 81       	ld	r30, Y
    144e:	f9 81       	ldd	r31, Y+1	; 0x01
    1450:	84 81       	ldd	r24, Z+4	; 0x04
    1452:	08 17       	cp	r16, r24
    1454:	e8 f4       	brcc	.+58     	; 0x1490 <udc_process_setup+0x444>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	80 2f       	mov	r24, r16
    145a:	f1 dc       	rcall	.-1566   	; 0xe3e <udc_update_iface_desc>
    145c:	88 23       	and	r24, r24
    145e:	c1 f0       	breq	.+48     	; 0x1490 <udc_process_setup+0x444>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1460:	f8 01       	movw	r30, r16
    1462:	ff 27       	eor	r31, r31
    1464:	cf 01       	movw	r24, r30
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	ea 81       	ldd	r30, Y+2	; 0x02
    146c:	fb 81       	ldd	r31, Y+3	; 0x03
    146e:	e8 0f       	add	r30, r24
    1470:	f9 1f       	adc	r31, r25
    1472:	c0 81       	ld	r28, Z
    1474:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1476:	ee 81       	ldd	r30, Y+6	; 0x06
    1478:	ff 81       	ldd	r31, Y+7	; 0x07
    147a:	19 95       	eicall
    147c:	68 2f       	mov	r22, r24
    147e:	80 2f       	mov	r24, r16
    1480:	de dc       	rcall	.-1604   	; 0xe3e <udc_update_iface_desc>
    1482:	88 23       	and	r24, r24
    1484:	29 f0       	breq	.+10     	; 0x1490 <udc_process_setup+0x444>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1486:	ec 81       	ldd	r30, Y+4	; 0x04
    1488:	fd 81       	ldd	r31, Y+5	; 0x05
    148a:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    148c:	81 11       	cpse	r24, r1
    148e:	53 c0       	rjmp	.+166    	; 0x1536 <udc_process_setup+0x4ea>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1490:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <udd_g_ctrlreq>
    1494:	8f 71       	andi	r24, 0x1F	; 31
    1496:	82 30       	cpi	r24, 0x02	; 2
    1498:	09 f0       	breq	.+2      	; 0x149c <udc_process_setup+0x450>
    149a:	40 c0       	rjmp	.+128    	; 0x151c <udc_process_setup+0x4d0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    149c:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
    14a0:	88 23       	and	r24, r24
    14a2:	b1 f1       	breq	.+108    	; 0x1510 <udc_process_setup+0x4c4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14a4:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
    14a8:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    14ac:	ed 91       	ld	r30, X+
    14ae:	fc 91       	ld	r31, X
    14b0:	11 97       	sbiw	r26, 0x01	; 1
    14b2:	84 81       	ldd	r24, Z+4	; 0x04
    14b4:	88 23       	and	r24, r24
    14b6:	71 f1       	breq	.+92     	; 0x1514 <udc_process_setup+0x4c8>
    14b8:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    14ba:	ec 2f       	mov	r30, r28
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	12 96       	adiw	r26, 0x02	; 2
    14c4:	8d 91       	ld	r24, X+
    14c6:	9c 91       	ld	r25, X
    14c8:	13 97       	sbiw	r26, 0x03	; 3
    14ca:	e8 0f       	add	r30, r24
    14cc:	f9 1f       	adc	r31, r25
    14ce:	00 81       	ld	r16, Z
    14d0:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    14d2:	d8 01       	movw	r26, r16
    14d4:	16 96       	adiw	r26, 0x06	; 6
    14d6:	ed 91       	ld	r30, X+
    14d8:	fc 91       	ld	r31, X
    14da:	17 97       	sbiw	r26, 0x07	; 7
    14dc:	19 95       	eicall
    14de:	68 2f       	mov	r22, r24
    14e0:	8c 2f       	mov	r24, r28
    14e2:	ad dc       	rcall	.-1702   	; 0xe3e <udc_update_iface_desc>
    14e4:	88 23       	and	r24, r24
    14e6:	39 f1       	breq	.+78     	; 0x1536 <udc_process_setup+0x4ea>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    14e8:	d8 01       	movw	r26, r16
    14ea:	14 96       	adiw	r26, 0x04	; 4
    14ec:	ed 91       	ld	r30, X+
    14ee:	fc 91       	ld	r31, X
    14f0:	15 97       	sbiw	r26, 0x05	; 5
    14f2:	19 95       	eicall
    14f4:	81 11       	cpse	r24, r1
    14f6:	1f c0       	rjmp	.+62     	; 0x1536 <udc_process_setup+0x4ea>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    14f8:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14fa:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
    14fe:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    1502:	ed 91       	ld	r30, X+
    1504:	fc 91       	ld	r31, X
    1506:	11 97       	sbiw	r26, 0x01	; 1
    1508:	94 81       	ldd	r25, Z+4	; 0x04
    150a:	c9 17       	cp	r28, r25
    150c:	b0 f2       	brcs	.-84     	; 0x14ba <udc_process_setup+0x46e>
    150e:	13 c0       	rjmp	.+38     	; 0x1536 <udc_process_setup+0x4ea>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	11 c0       	rjmp	.+34     	; 0x1536 <udc_process_setup+0x4ea>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	0f c0       	rjmp	.+30     	; 0x1536 <udc_process_setup+0x4ea>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	0d c0       	rjmp	.+26     	; 0x1536 <udc_process_setup+0x4ea>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0b c0       	rjmp	.+22     	; 0x1536 <udc_process_setup+0x4ea>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1520:	98 2f       	mov	r25, r24
    1522:	90 76       	andi	r25, 0x60	; 96
    1524:	09 f0       	breq	.+2      	; 0x1528 <udc_process_setup+0x4dc>
    1526:	81 cf       	rjmp	.-254    	; 0x142a <udc_process_setup+0x3de>
    1528:	a7 ce       	rjmp	.-690    	; 0x1278 <udc_process_setup+0x22c>
    152a:	98 2f       	mov	r25, r24
    152c:	90 76       	andi	r25, 0x60	; 96
    152e:	09 f0       	breq	.+2      	; 0x1532 <udc_process_setup+0x4e6>
    1530:	7c cf       	rjmp	.-264    	; 0x142a <udc_process_setup+0x3de>
    1532:	a5 cd       	rjmp	.-1206   	; 0x107e <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1534:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	08 95       	ret

00001540 <board_init>:
    1540:	43 e0       	ldi	r20, 0x03	; 3
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	80 ee       	ldi	r24, 0xE0	; 224
    1548:	97 e0       	ldi	r25, 0x07	; 7
    154a:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    154e:	43 e0       	ldi	r20, 0x03	; 3
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	62 e0       	ldi	r22, 0x02	; 2
    1554:	80 ee       	ldi	r24, 0xE0	; 224
    1556:	97 e0       	ldi	r25, 0x07	; 7
    1558:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    155c:	43 e0       	ldi	r20, 0x03	; 3
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	60 e1       	ldi	r22, 0x10	; 16
    1562:	80 e6       	ldi	r24, 0x60	; 96
    1564:	96 e0       	ldi	r25, 0x06	; 6
    1566:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    156a:	41 e0       	ldi	r20, 0x01	; 1
    156c:	50 e4       	ldi	r21, 0x40	; 64
    156e:	60 e2       	ldi	r22, 0x20	; 32
    1570:	80 e6       	ldi	r24, 0x60	; 96
    1572:	96 e0       	ldi	r25, 0x06	; 6
    1574:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	5b e1       	ldi	r21, 0x1B	; 27
    157c:	60 e2       	ldi	r22, 0x20	; 32
    157e:	80 e8       	ldi	r24, 0x80	; 128
    1580:	96 e0       	ldi	r25, 0x06	; 6
    1582:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	5b e1       	ldi	r21, 0x1B	; 27
    158a:	62 e0       	ldi	r22, 0x02	; 2
    158c:	80 ea       	ldi	r24, 0xA0	; 160
    158e:	96 e0       	ldi	r25, 0x06	; 6
    1590:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	5b e1       	ldi	r21, 0x1B	; 27
    1598:	64 e0       	ldi	r22, 0x04	; 4
    159a:	80 ea       	ldi	r24, 0xA0	; 160
    159c:	96 e0       	ldi	r25, 0x06	; 6
    159e:	0c 94 3a 02 	jmp	0x474	; 0x474 <ioport_configure_port_pin>
    15a2:	08 95       	ret

000015a4 <ccp_write_io>:
    15a4:	1b be       	out	0x3b, r1	; 59
    15a6:	fc 01       	movw	r30, r24
    15a8:	28 ed       	ldi	r18, 0xD8	; 216
    15aa:	24 bf       	out	0x34, r18	; 52
    15ac:	60 83       	st	Z, r22
    15ae:	08 95       	ret

000015b0 <nvm_read_byte>:
    15b0:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    15b4:	e6 2f       	mov	r30, r22
    15b6:	f7 2f       	mov	r31, r23
    15b8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    15bc:	84 91       	lpm	r24, Z
    15be:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    15c2:	08 95       	ret

000015c4 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	1f 92       	push	r1
    15ca:	1f 92       	push	r1
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	81 11       	cpse	r24, r1
    15d2:	26 c0       	rjmp	.+76     	; 0x1620 <udd_sleep_mode+0x5c>
    15d4:	90 91 20 23 	lds	r25, 0x2320	; 0x802320 <udd_b_idle>
    15d8:	99 23       	and	r25, r25
    15da:	f9 f0       	breq	.+62     	; 0x161a <udd_sleep_mode+0x56>
    15dc:	90 91 87 23 	lds	r25, 0x2387	; 0x802387 <sleepmgr_locks+0x1>
    15e0:	91 11       	cpse	r25, r1
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <udd_sleep_mode+0x22>
    15e4:	ff cf       	rjmp	.-2      	; 0x15e4 <udd_sleep_mode+0x20>
    15e6:	9f b7       	in	r25, 0x3f	; 63
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	f8 94       	cli
    15ec:	2a 81       	ldd	r18, Y+2	; 0x02
    15ee:	e6 e8       	ldi	r30, 0x86	; 134
    15f0:	f3 e2       	ldi	r31, 0x23	; 35
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	91 50       	subi	r25, 0x01	; 1
    15f6:	91 83       	std	Z+1, r25	; 0x01
    15f8:	2f bf       	out	0x3f, r18	; 63
    15fa:	0f c0       	rjmp	.+30     	; 0x161a <udd_sleep_mode+0x56>
    15fc:	90 91 87 23 	lds	r25, 0x2387	; 0x802387 <sleepmgr_locks+0x1>
    1600:	9f 3f       	cpi	r25, 0xFF	; 255
    1602:	09 f4       	brne	.+2      	; 0x1606 <udd_sleep_mode+0x42>
    1604:	ff cf       	rjmp	.-2      	; 0x1604 <udd_sleep_mode+0x40>
    1606:	9f b7       	in	r25, 0x3f	; 63
    1608:	99 83       	std	Y+1, r25	; 0x01
    160a:	f8 94       	cli
    160c:	29 81       	ldd	r18, Y+1	; 0x01
    160e:	e6 e8       	ldi	r30, 0x86	; 134
    1610:	f3 e2       	ldi	r31, 0x23	; 35
    1612:	91 81       	ldd	r25, Z+1	; 0x01
    1614:	9f 5f       	subi	r25, 0xFF	; 255
    1616:	91 83       	std	Z+1, r25	; 0x01
    1618:	2f bf       	out	0x3f, r18	; 63
    161a:	80 93 20 23 	sts	0x2320, r24	; 0x802320 <udd_b_idle>
    161e:	05 c0       	rjmp	.+10     	; 0x162a <udd_sleep_mode+0x66>
    1620:	90 91 20 23 	lds	r25, 0x2320	; 0x802320 <udd_b_idle>
    1624:	99 23       	and	r25, r25
    1626:	51 f3       	breq	.-44     	; 0x15fc <udd_sleep_mode+0x38>
    1628:	f8 cf       	rjmp	.-16     	; 0x161a <udd_sleep_mode+0x56>
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	08 95       	ret

00001634 <udd_ctrl_init>:
    1634:	0f 93       	push	r16
    1636:	e8 ec       	ldi	r30, 0xC8	; 200
    1638:	f4 e0       	ldi	r31, 0x04	; 4
    163a:	80 81       	ld	r24, Z
    163c:	8f 7d       	andi	r24, 0xDF	; 223
    163e:	80 83       	st	Z, r24
    1640:	80 81       	ld	r24, Z
    1642:	8f 7d       	andi	r24, 0xDF	; 223
    1644:	80 83       	st	Z, r24
    1646:	e4 ef       	ldi	r30, 0xF4	; 244
    1648:	f2 e2       	ldi	r31, 0x22	; 34
    164a:	02 e0       	ldi	r16, 0x02	; 2
    164c:	05 93       	las	Z, r16
    164e:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_sram+0x16>
    1652:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_sram+0x17>
    1656:	00 e2       	ldi	r16, 0x20	; 32
    1658:	06 93       	lac	Z, r16
    165a:	00 e4       	ldi	r16, 0x40	; 64
    165c:	06 93       	lac	Z, r16
    165e:	ec ee       	ldi	r30, 0xEC	; 236
    1660:	f2 e2       	ldi	r31, 0x22	; 34
    1662:	00 e4       	ldi	r16, 0x40	; 64
    1664:	06 93       	lac	Z, r16
    1666:	ec e8       	ldi	r30, 0x8C	; 140
    1668:	f3 e2       	ldi	r31, 0x23	; 35
    166a:	14 86       	std	Z+12, r1	; 0x0c
    166c:	15 86       	std	Z+13, r1	; 0x0d
    166e:	16 86       	std	Z+14, r1	; 0x0e
    1670:	17 86       	std	Z+15, r1	; 0x0f
    1672:	12 86       	std	Z+10, r1	; 0x0a
    1674:	13 86       	std	Z+11, r1	; 0x0b
    1676:	10 92 dd 22 	sts	0x22DD, r1	; 0x8022dd <udd_ep_control_state>
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <udd_ctrl_stall_data>:
    167e:	0f 93       	push	r16
    1680:	85 e0       	ldi	r24, 0x05	; 5
    1682:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <udd_ep_control_state>
    1686:	e5 ef       	ldi	r30, 0xF5	; 245
    1688:	f2 e2       	ldi	r31, 0x22	; 34
    168a:	04 e0       	ldi	r16, 0x04	; 4
    168c:	05 93       	las	Z, r16
    168e:	ed ee       	ldi	r30, 0xED	; 237
    1690:	f2 e2       	ldi	r31, 0x22	; 34
    1692:	04 e0       	ldi	r16, 0x04	; 4
    1694:	05 93       	las	Z, r16
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <udd_ctrl_send_zlp_in>:
    169a:	0f 93       	push	r16
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <udd_ep_control_state>
    16a2:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_sram+0x16>
    16a6:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_sram+0x17>
    16aa:	e4 ef       	ldi	r30, 0xF4	; 244
    16ac:	f2 e2       	ldi	r31, 0x22	; 34
    16ae:	02 e0       	ldi	r16, 0x02	; 2
    16b0:	06 93       	lac	Z, r16
    16b2:	0f 91       	pop	r16
    16b4:	08 95       	ret

000016b6 <udd_ctrl_endofrequest>:
    16b6:	e0 91 98 23 	lds	r30, 0x2398	; 0x802398 <udd_g_ctrlreq+0xc>
    16ba:	f0 91 99 23 	lds	r31, 0x2399	; 0x802399 <udd_g_ctrlreq+0xd>
    16be:	30 97       	sbiw	r30, 0x00	; 0
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <udd_ctrl_endofrequest+0xe>
    16c2:	19 95       	eicall
    16c4:	08 95       	ret

000016c6 <udd_ctrl_in_sent>:
    16c6:	0f 93       	push	r16
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <udd_ep_control_state>
    16d0:	83 30       	cpi	r24, 0x03	; 3
    16d2:	19 f4       	brne	.+6      	; 0x16da <udd_ctrl_in_sent+0x14>
    16d4:	f0 df       	rcall	.-32     	; 0x16b6 <udd_ctrl_endofrequest>
    16d6:	ae df       	rcall	.-164    	; 0x1634 <udd_ctrl_init>
    16d8:	5e c0       	rjmp	.+188    	; 0x1796 <udd_ctrl_in_sent+0xd0>
    16da:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <udd_ctrl_payload_nb_trans>
    16de:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <udd_ctrl_payload_nb_trans+0x1>
    16e2:	c0 91 96 23 	lds	r28, 0x2396	; 0x802396 <udd_g_ctrlreq+0xa>
    16e6:	d0 91 97 23 	lds	r29, 0x2397	; 0x802397 <udd_g_ctrlreq+0xb>
    16ea:	c8 1b       	sub	r28, r24
    16ec:	d9 0b       	sbc	r29, r25
    16ee:	71 f5       	brne	.+92     	; 0x174c <udd_ctrl_in_sent+0x86>
    16f0:	20 91 db 22 	lds	r18, 0x22DB	; 0x8022db <udd_ctrl_prev_payload_nb_trans>
    16f4:	30 91 dc 22 	lds	r19, 0x22DC	; 0x8022dc <udd_ctrl_prev_payload_nb_trans+0x1>
    16f8:	82 0f       	add	r24, r18
    16fa:	93 1f       	adc	r25, r19
    16fc:	80 93 db 22 	sts	0x22DB, r24	; 0x8022db <udd_ctrl_prev_payload_nb_trans>
    1700:	90 93 dc 22 	sts	0x22DC, r25	; 0x8022dc <udd_ctrl_prev_payload_nb_trans+0x1>
    1704:	20 91 92 23 	lds	r18, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    1708:	30 91 93 23 	lds	r19, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    170c:	82 17       	cp	r24, r18
    170e:	93 07       	cpc	r25, r19
    1710:	21 f0       	breq	.+8      	; 0x171a <udd_ctrl_in_sent+0x54>
    1712:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <b_shortpacket.5394>
    1716:	88 23       	and	r24, r24
    1718:	41 f0       	breq	.+16     	; 0x172a <udd_ctrl_in_sent+0x64>
    171a:	84 e0       	ldi	r24, 0x04	; 4
    171c:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <udd_ep_control_state>
    1720:	ec ee       	ldi	r30, 0xEC	; 236
    1722:	f2 e2       	ldi	r31, 0x22	; 34
    1724:	02 e0       	ldi	r16, 0x02	; 2
    1726:	06 93       	lac	Z, r16
    1728:	36 c0       	rjmp	.+108    	; 0x1796 <udd_ctrl_in_sent+0xd0>
    172a:	e0 91 9a 23 	lds	r30, 0x239A	; 0x80239a <udd_g_ctrlreq+0xe>
    172e:	f0 91 9b 23 	lds	r31, 0x239B	; 0x80239b <udd_g_ctrlreq+0xf>
    1732:	30 97       	sbiw	r30, 0x00	; 0
    1734:	99 f0       	breq	.+38     	; 0x175c <udd_ctrl_in_sent+0x96>
    1736:	19 95       	eicall
    1738:	88 23       	and	r24, r24
    173a:	81 f0       	breq	.+32     	; 0x175c <udd_ctrl_in_sent+0x96>
    173c:	10 92 d9 22 	sts	0x22D9, r1	; 0x8022d9 <udd_ctrl_payload_nb_trans>
    1740:	10 92 da 22 	sts	0x22DA, r1	; 0x8022da <udd_ctrl_payload_nb_trans+0x1>
    1744:	c0 91 96 23 	lds	r28, 0x2396	; 0x802396 <udd_g_ctrlreq+0xa>
    1748:	d0 91 97 23 	lds	r29, 0x2397	; 0x802397 <udd_g_ctrlreq+0xb>
    174c:	c0 34       	cpi	r28, 0x40	; 64
    174e:	d1 05       	cpc	r29, r1
    1750:	28 f0       	brcs	.+10     	; 0x175c <udd_ctrl_in_sent+0x96>
    1752:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <b_shortpacket.5394>
    1756:	c0 e4       	ldi	r28, 0x40	; 64
    1758:	d0 e0       	ldi	r29, 0x00	; 0
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <udd_ctrl_in_sent+0x9c>
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <b_shortpacket.5394>
    1762:	e0 ee       	ldi	r30, 0xE0	; 224
    1764:	f2 e2       	ldi	r31, 0x22	; 34
    1766:	c6 8b       	std	Z+22, r28	; 0x16
    1768:	d7 8b       	std	Z+23, r29	; 0x17
    176a:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <udd_ctrl_payload_nb_trans>
    176e:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <udd_ctrl_payload_nb_trans+0x1>
    1772:	20 91 94 23 	lds	r18, 0x2394	; 0x802394 <udd_g_ctrlreq+0x8>
    1776:	30 91 95 23 	lds	r19, 0x2395	; 0x802395 <udd_g_ctrlreq+0x9>
    177a:	28 0f       	add	r18, r24
    177c:	39 1f       	adc	r19, r25
    177e:	20 8f       	std	Z+24, r18	; 0x18
    1780:	31 8f       	std	Z+25, r19	; 0x19
    1782:	c8 0f       	add	r28, r24
    1784:	d9 1f       	adc	r29, r25
    1786:	c0 93 d9 22 	sts	0x22D9, r28	; 0x8022d9 <udd_ctrl_payload_nb_trans>
    178a:	d0 93 da 22 	sts	0x22DA, r29	; 0x8022da <udd_ctrl_payload_nb_trans+0x1>
    178e:	e4 ef       	ldi	r30, 0xF4	; 244
    1790:	f2 e2       	ldi	r31, 0x22	; 34
    1792:	02 e0       	ldi	r16, 0x02	; 2
    1794:	06 93       	lac	Z, r16
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	0f 91       	pop	r16
    179c:	08 95       	ret

0000179e <udd_ep_get_size>:
    179e:	fc 01       	movw	r30, r24
    17a0:	81 81       	ldd	r24, Z+1	; 0x01
    17a2:	e8 2f       	mov	r30, r24
    17a4:	e7 70       	andi	r30, 0x07	; 7
    17a6:	8e 2f       	mov	r24, r30
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	fc 01       	movw	r30, r24
    17ac:	31 97       	sbiw	r30, 0x01	; 1
    17ae:	e7 30       	cpi	r30, 0x07	; 7
    17b0:	f1 05       	cpc	r31, r1
    17b2:	d8 f4       	brcc	.+54     	; 0x17ea <udd_ep_get_size+0x4c>
    17b4:	88 27       	eor	r24, r24
    17b6:	e2 50       	subi	r30, 0x02	; 2
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	8f 4f       	sbci	r24, 0xFF	; 255
    17bc:	0c 94 17 14 	jmp	0x282e	; 0x282e <__tablejump2__>
    17c0:	80 e1       	ldi	r24, 0x10	; 16
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	08 95       	ret
    17c6:	80 e2       	ldi	r24, 0x20	; 32
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	08 95       	ret
    17cc:	80 e4       	ldi	r24, 0x40	; 64
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	08 95       	ret
    17d2:	80 e8       	ldi	r24, 0x80	; 128
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	08 95       	ret
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	08 95       	ret
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	92 e0       	ldi	r25, 0x02	; 2
    17e2:	08 95       	ret
    17e4:	8f ef       	ldi	r24, 0xFF	; 255
    17e6:	93 e0       	ldi	r25, 0x03	; 3
    17e8:	08 95       	ret
    17ea:	88 e0       	ldi	r24, 0x08	; 8
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	08 95       	ret

000017f0 <udd_ep_get_job>:
    17f0:	28 2f       	mov	r18, r24
    17f2:	2f 70       	andi	r18, 0x0F	; 15
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	22 0f       	add	r18, r18
    17f8:	33 1f       	adc	r19, r19
    17fa:	08 2e       	mov	r0, r24
    17fc:	00 0c       	add	r0, r0
    17fe:	99 0b       	sbc	r25, r25
    1800:	88 27       	eor	r24, r24
    1802:	99 0f       	add	r25, r25
    1804:	88 1f       	adc	r24, r24
    1806:	99 27       	eor	r25, r25
    1808:	82 0f       	add	r24, r18
    180a:	93 1f       	adc	r25, r19
    180c:	02 97       	sbiw	r24, 0x02	; 2
    180e:	9c 01       	movw	r18, r24
    1810:	22 0f       	add	r18, r18
    1812:	33 1f       	adc	r19, r19
    1814:	22 0f       	add	r18, r18
    1816:	33 1f       	adc	r19, r19
    1818:	22 0f       	add	r18, r18
    181a:	33 1f       	adc	r19, r19
    181c:	82 0f       	add	r24, r18
    181e:	93 1f       	adc	r25, r19
    1820:	8b 58       	subi	r24, 0x8B	; 139
    1822:	9d 4d       	sbci	r25, 0xDD	; 221
    1824:	08 95       	ret

00001826 <udd_ctrl_interrupt_tc_setup>:
    1826:	0f 93       	push	r16
    1828:	cf 93       	push	r28
    182a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    182e:	80 ff       	sbrs	r24, 0
    1830:	64 c0       	rjmp	.+200    	; 0x18fa <udd_ctrl_interrupt_tc_setup+0xd4>
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1838:	ec ee       	ldi	r30, 0xEC	; 236
    183a:	f2 e2       	ldi	r31, 0x22	; 34
    183c:	00 e8       	ldi	r16, 0x80	; 128
    183e:	06 93       	lac	Z, r16
    1840:	e4 ef       	ldi	r30, 0xF4	; 244
    1842:	f2 e2       	ldi	r31, 0x22	; 34
    1844:	00 e8       	ldi	r16, 0x80	; 128
    1846:	06 93       	lac	Z, r16
    1848:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    184c:	ec ee       	ldi	r30, 0xEC	; 236
    184e:	f2 e2       	ldi	r31, 0x22	; 34
    1850:	00 e1       	ldi	r16, 0x10	; 16
    1852:	06 93       	lac	Z, r16
    1854:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <udd_ep_control_state>
    1858:	88 23       	and	r24, r24
    185a:	29 f0       	breq	.+10     	; 0x1866 <udd_ctrl_interrupt_tc_setup+0x40>
    185c:	83 50       	subi	r24, 0x03	; 3
    185e:	82 30       	cpi	r24, 0x02	; 2
    1860:	08 f4       	brcc	.+2      	; 0x1864 <udd_ctrl_interrupt_tc_setup+0x3e>
    1862:	29 df       	rcall	.-430    	; 0x16b6 <udd_ctrl_endofrequest>
    1864:	e7 de       	rcall	.-562    	; 0x1634 <udd_ctrl_init>
    1866:	80 91 ee 22 	lds	r24, 0x22EE	; 0x8022ee <udd_sram+0xe>
    186a:	90 91 ef 22 	lds	r25, 0x22EF	; 0x8022ef <udd_sram+0xf>
    186e:	08 97       	sbiw	r24, 0x08	; 8
    1870:	09 f0       	breq	.+2      	; 0x1874 <udd_ctrl_interrupt_tc_setup+0x4e>
    1872:	45 c0       	rjmp	.+138    	; 0x18fe <udd_ctrl_interrupt_tc_setup+0xd8>
    1874:	88 e0       	ldi	r24, 0x08	; 8
    1876:	e9 e9       	ldi	r30, 0x99	; 153
    1878:	f2 e2       	ldi	r31, 0x22	; 34
    187a:	ac e8       	ldi	r26, 0x8C	; 140
    187c:	b3 e2       	ldi	r27, 0x23	; 35
    187e:	01 90       	ld	r0, Z+
    1880:	0d 92       	st	X+, r0
    1882:	8a 95       	dec	r24
    1884:	e1 f7       	brne	.-8      	; 0x187e <udd_ctrl_interrupt_tc_setup+0x58>
    1886:	e8 ec       	ldi	r30, 0xC8	; 200
    1888:	f4 e0       	ldi	r31, 0x04	; 4
    188a:	80 81       	ld	r24, Z
    188c:	80 62       	ori	r24, 0x20	; 32
    188e:	80 83       	st	Z, r24
    1890:	80 81       	ld	r24, Z
    1892:	80 62       	ori	r24, 0x20	; 32
    1894:	80 83       	st	Z, r24
    1896:	da db       	rcall	.-2124   	; 0x104c <udc_process_setup>
    1898:	c8 2f       	mov	r28, r24
    189a:	81 11       	cpse	r24, r1
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <udd_ctrl_interrupt_tc_setup+0x7e>
    189e:	ef de       	rcall	.-546    	; 0x167e <udd_ctrl_stall_data>
    18a0:	c1 e0       	ldi	r28, 0x01	; 1
    18a2:	2e c0       	rjmp	.+92     	; 0x1900 <udd_ctrl_interrupt_tc_setup+0xda>
    18a4:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <udd_g_ctrlreq>
    18a8:	88 23       	and	r24, r24
    18aa:	6c f4       	brge	.+26     	; 0x18c6 <udd_ctrl_interrupt_tc_setup+0xa0>
    18ac:	10 92 db 22 	sts	0x22DB, r1	; 0x8022db <udd_ctrl_prev_payload_nb_trans>
    18b0:	10 92 dc 22 	sts	0x22DC, r1	; 0x8022dc <udd_ctrl_prev_payload_nb_trans+0x1>
    18b4:	10 92 d9 22 	sts	0x22D9, r1	; 0x8022d9 <udd_ctrl_payload_nb_trans>
    18b8:	10 92 da 22 	sts	0x22DA, r1	; 0x8022da <udd_ctrl_payload_nb_trans+0x1>
    18bc:	82 e0       	ldi	r24, 0x02	; 2
    18be:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <udd_ep_control_state>
    18c2:	01 df       	rcall	.-510    	; 0x16c6 <udd_ctrl_in_sent>
    18c4:	1d c0       	rjmp	.+58     	; 0x1900 <udd_ctrl_interrupt_tc_setup+0xda>
    18c6:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    18ca:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    18ce:	89 2b       	or	r24, r25
    18d0:	11 f4       	brne	.+4      	; 0x18d6 <udd_ctrl_interrupt_tc_setup+0xb0>
    18d2:	e3 de       	rcall	.-570    	; 0x169a <udd_ctrl_send_zlp_in>
    18d4:	15 c0       	rjmp	.+42     	; 0x1900 <udd_ctrl_interrupt_tc_setup+0xda>
    18d6:	10 92 db 22 	sts	0x22DB, r1	; 0x8022db <udd_ctrl_prev_payload_nb_trans>
    18da:	10 92 dc 22 	sts	0x22DC, r1	; 0x8022dc <udd_ctrl_prev_payload_nb_trans+0x1>
    18de:	10 92 d9 22 	sts	0x22D9, r1	; 0x8022d9 <udd_ctrl_payload_nb_trans>
    18e2:	10 92 da 22 	sts	0x22DA, r1	; 0x8022da <udd_ctrl_payload_nb_trans+0x1>
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <udd_ep_control_state>
    18ec:	ec ee       	ldi	r30, 0xEC	; 236
    18ee:	f2 e2       	ldi	r31, 0x22	; 34
    18f0:	02 e0       	ldi	r16, 0x02	; 2
    18f2:	06 93       	lac	Z, r16
    18f4:	00 e2       	ldi	r16, 0x20	; 32
    18f6:	06 93       	lac	Z, r16
    18f8:	03 c0       	rjmp	.+6      	; 0x1900 <udd_ctrl_interrupt_tc_setup+0xda>
    18fa:	c0 e0       	ldi	r28, 0x00	; 0
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <udd_ctrl_interrupt_tc_setup+0xda>
    18fe:	c1 e0       	ldi	r28, 0x01	; 1
    1900:	8c 2f       	mov	r24, r28
    1902:	cf 91       	pop	r28
    1904:	0f 91       	pop	r16
    1906:	08 95       	ret

00001908 <udd_ep_trans_complet>:
    1908:	8f 92       	push	r8
    190a:	9f 92       	push	r9
    190c:	af 92       	push	r10
    190e:	bf 92       	push	r11
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	d8 2e       	mov	r13, r24
    1920:	67 df       	rcall	.-306    	; 0x17f0 <udd_ep_get_job>
    1922:	8c 01       	movw	r16, r24
    1924:	bd 2c       	mov	r11, r13
    1926:	bb 1c       	adc	r11, r11
    1928:	bb 24       	eor	r11, r11
    192a:	bb 1c       	adc	r11, r11
    192c:	cd 2d       	mov	r28, r13
    192e:	cf 70       	andi	r28, 0x0F	; 15
    1930:	d0 e0       	ldi	r29, 0x00	; 0
    1932:	cc 0f       	add	r28, r28
    1934:	dd 1f       	adc	r29, r29
    1936:	cb 0d       	add	r28, r11
    1938:	d1 1d       	adc	r29, r1
    193a:	ce 01       	movw	r24, r28
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	9c 01       	movw	r18, r24
    194a:	24 51       	subi	r18, 0x14	; 20
    194c:	3d 4d       	sbci	r19, 0xDD	; 221
    194e:	79 01       	movw	r14, r18
    1950:	c9 01       	movw	r24, r18
    1952:	25 df       	rcall	.-438    	; 0x179e <udd_ep_get_size>
    1954:	4c 01       	movw	r8, r24
    1956:	bb 20       	and	r11, r11
    1958:	09 f4       	brne	.+2      	; 0x195c <udd_ep_trans_complet+0x54>
    195a:	79 c0       	rjmp	.+242    	; 0x1a4e <udd_ep_trans_complet+0x146>
    195c:	fe 01       	movw	r30, r28
    195e:	ee 0f       	add	r30, r30
    1960:	ff 1f       	adc	r31, r31
    1962:	ee 0f       	add	r30, r30
    1964:	ff 1f       	adc	r31, r31
    1966:	ee 0f       	add	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	e0 52       	subi	r30, 0x20	; 32
    196c:	fd 4d       	sbci	r31, 0xDD	; 221
    196e:	22 89       	ldd	r18, Z+18	; 0x12
    1970:	33 89       	ldd	r19, Z+19	; 0x13
    1972:	d8 01       	movw	r26, r16
    1974:	15 96       	adiw	r26, 0x05	; 5
    1976:	8d 91       	ld	r24, X+
    1978:	9c 91       	ld	r25, X
    197a:	16 97       	sbiw	r26, 0x06	; 6
    197c:	82 0f       	add	r24, r18
    197e:	93 1f       	adc	r25, r19
    1980:	15 96       	adiw	r26, 0x05	; 5
    1982:	8d 93       	st	X+, r24
    1984:	9c 93       	st	X, r25
    1986:	16 97       	sbiw	r26, 0x06	; 6
    1988:	13 96       	adiw	r26, 0x03	; 3
    198a:	2d 91       	ld	r18, X+
    198c:	3c 91       	ld	r19, X
    198e:	14 97       	sbiw	r26, 0x04	; 4
    1990:	82 17       	cp	r24, r18
    1992:	93 07       	cpc	r25, r19
    1994:	09 f4       	brne	.+2      	; 0x1998 <udd_ep_trans_complet+0x90>
    1996:	45 c0       	rjmp	.+138    	; 0x1a22 <udd_ep_trans_complet+0x11a>
    1998:	28 1b       	sub	r18, r24
    199a:	39 0b       	sbc	r19, r25
    199c:	21 15       	cp	r18, r1
    199e:	b4 e0       	ldi	r27, 0x04	; 4
    19a0:	3b 07       	cpc	r19, r27
    19a2:	38 f0       	brcs	.+14     	; 0x19b2 <udd_ep_trans_complet+0xaa>
    19a4:	2f ef       	ldi	r18, 0xFF	; 255
    19a6:	33 e0       	ldi	r19, 0x03	; 3
    19a8:	c9 01       	movw	r24, r18
    19aa:	b4 01       	movw	r22, r8
    19ac:	0a d7       	rcall	.+3604   	; 0x27c2 <__udivmodhi4>
    19ae:	28 1b       	sub	r18, r24
    19b0:	39 0b       	sbc	r19, r25
    19b2:	f8 01       	movw	r30, r16
    19b4:	80 81       	ld	r24, Z
    19b6:	81 ff       	sbrs	r24, 1
    19b8:	09 c0       	rjmp	.+18     	; 0x19cc <udd_ep_trans_complet+0xc4>
    19ba:	c9 01       	movw	r24, r18
    19bc:	b4 01       	movw	r22, r8
    19be:	01 d7       	rcall	.+3586   	; 0x27c2 <__udivmodhi4>
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	89 2b       	or	r24, r25
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <udd_ep_trans_complet+0xc0>
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	84 2f       	mov	r24, r20
    19ca:	01 c0       	rjmp	.+2      	; 0x19ce <udd_ep_trans_complet+0xc6>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	d8 01       	movw	r26, r16
    19d0:	9c 91       	ld	r25, X
    19d2:	80 fb       	bst	r24, 0
    19d4:	91 f9       	bld	r25, 1
    19d6:	9c 93       	st	X, r25
    19d8:	fe 01       	movw	r30, r28
    19da:	ee 0f       	add	r30, r30
    19dc:	ff 1f       	adc	r31, r31
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	ee 0f       	add	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	e0 52       	subi	r30, 0x20	; 32
    19e8:	fd 4d       	sbci	r31, 0xDD	; 221
    19ea:	12 8a       	std	Z+18, r1	; 0x12
    19ec:	13 8a       	std	Z+19, r1	; 0x13
    19ee:	26 87       	std	Z+14, r18	; 0x0e
    19f0:	37 87       	std	Z+15, r19	; 0x0f
    19f2:	11 96       	adiw	r26, 0x01	; 1
    19f4:	2d 91       	ld	r18, X+
    19f6:	3c 91       	ld	r19, X
    19f8:	12 97       	sbiw	r26, 0x02	; 2
    19fa:	15 96       	adiw	r26, 0x05	; 5
    19fc:	8d 91       	ld	r24, X+
    19fe:	9c 91       	ld	r25, X
    1a00:	16 97       	sbiw	r26, 0x06	; 6
    1a02:	82 0f       	add	r24, r18
    1a04:	93 1f       	adc	r25, r19
    1a06:	cc 0f       	add	r28, r28
    1a08:	dd 1f       	adc	r29, r29
    1a0a:	cc 0f       	add	r28, r28
    1a0c:	dd 1f       	adc	r29, r29
    1a0e:	cc 0f       	add	r28, r28
    1a10:	dd 1f       	adc	r29, r29
    1a12:	c0 51       	subi	r28, 0x10	; 16
    1a14:	dd 4d       	sbci	r29, 0xDD	; 221
    1a16:	88 83       	st	Y, r24
    1a18:	99 83       	std	Y+1, r25	; 0x01
    1a1a:	f7 01       	movw	r30, r14
    1a1c:	02 e0       	ldi	r16, 0x02	; 2
    1a1e:	06 93       	lac	Z, r16
    1a20:	e4 c0       	rjmp	.+456    	; 0x1bea <udd_ep_trans_complet+0x2e2>
    1a22:	d8 01       	movw	r26, r16
    1a24:	8c 91       	ld	r24, X
    1a26:	81 ff       	sbrs	r24, 1
    1a28:	cd c0       	rjmp	.+410    	; 0x1bc4 <udd_ep_trans_complet+0x2bc>
    1a2a:	8d 7f       	andi	r24, 0xFD	; 253
    1a2c:	8c 93       	st	X, r24
    1a2e:	cc 0f       	add	r28, r28
    1a30:	dd 1f       	adc	r29, r29
    1a32:	cc 0f       	add	r28, r28
    1a34:	dd 1f       	adc	r29, r29
    1a36:	cc 0f       	add	r28, r28
    1a38:	dd 1f       	adc	r29, r29
    1a3a:	c0 52       	subi	r28, 0x20	; 32
    1a3c:	dd 4d       	sbci	r29, 0xDD	; 221
    1a3e:	1a 8a       	std	Y+18, r1	; 0x12
    1a40:	1b 8a       	std	Y+19, r1	; 0x13
    1a42:	1e 86       	std	Y+14, r1	; 0x0e
    1a44:	1f 86       	std	Y+15, r1	; 0x0f
    1a46:	f7 01       	movw	r30, r14
    1a48:	02 e0       	ldi	r16, 0x02	; 2
    1a4a:	06 93       	lac	Z, r16
    1a4c:	ce c0       	rjmp	.+412    	; 0x1bea <udd_ep_trans_complet+0x2e2>
    1a4e:	fe 01       	movw	r30, r28
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	ee 0f       	add	r30, r30
    1a5a:	ff 1f       	adc	r31, r31
    1a5c:	e0 52       	subi	r30, 0x20	; 32
    1a5e:	fd 4d       	sbci	r31, 0xDD	; 221
    1a60:	a6 84       	ldd	r10, Z+14	; 0x0e
    1a62:	b7 84       	ldd	r11, Z+15	; 0x0f
    1a64:	d8 01       	movw	r26, r16
    1a66:	8c 91       	ld	r24, X
    1a68:	82 ff       	sbrs	r24, 2
    1a6a:	19 c0       	rjmp	.+50     	; 0x1a9e <udd_ep_trans_complet+0x196>
    1a6c:	11 96       	adiw	r26, 0x01	; 1
    1a6e:	ed 91       	ld	r30, X+
    1a70:	fc 91       	ld	r31, X
    1a72:	12 97       	sbiw	r26, 0x02	; 2
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	2d 91       	ld	r18, X+
    1a78:	3c 91       	ld	r19, X
    1a7a:	16 97       	sbiw	r26, 0x06	; 6
    1a7c:	13 96       	adiw	r26, 0x03	; 3
    1a7e:	8d 91       	ld	r24, X+
    1a80:	9c 91       	ld	r25, X
    1a82:	14 97       	sbiw	r26, 0x04	; 4
    1a84:	b4 01       	movw	r22, r8
    1a86:	9d d6       	rcall	.+3386   	; 0x27c2 <__udivmodhi4>
    1a88:	b0 e4       	ldi	r27, 0x40	; 64
    1a8a:	db 9e       	mul	r13, r27
    1a8c:	b0 01       	movw	r22, r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	6b 54       	subi	r22, 0x4B	; 75
    1a92:	7e 4d       	sbci	r23, 0xDE	; 222
    1a94:	ac 01       	movw	r20, r24
    1a96:	cf 01       	movw	r24, r30
    1a98:	82 0f       	add	r24, r18
    1a9a:	93 1f       	adc	r25, r19
    1a9c:	d0 d6       	rcall	.+3488   	; 0x283e <memcpy>
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	25 81       	ldd	r18, Z+5	; 0x05
    1aa2:	36 81       	ldd	r19, Z+6	; 0x06
    1aa4:	2a 0d       	add	r18, r10
    1aa6:	3b 1d       	adc	r19, r11
    1aa8:	25 83       	std	Z+5, r18	; 0x05
    1aaa:	36 83       	std	Z+6, r19	; 0x06
    1aac:	83 81       	ldd	r24, Z+3	; 0x03
    1aae:	94 81       	ldd	r25, Z+4	; 0x04
    1ab0:	82 17       	cp	r24, r18
    1ab2:	93 07       	cpc	r25, r19
    1ab4:	68 f4       	brcc	.+26     	; 0x1ad0 <udd_ep_trans_complet+0x1c8>
    1ab6:	85 83       	std	Z+5, r24	; 0x05
    1ab8:	96 83       	std	Z+6, r25	; 0x06
    1aba:	cc 0f       	add	r28, r28
    1abc:	dd 1f       	adc	r29, r29
    1abe:	cc 0f       	add	r28, r28
    1ac0:	dd 1f       	adc	r29, r29
    1ac2:	cc 0f       	add	r28, r28
    1ac4:	dd 1f       	adc	r29, r29
    1ac6:	c0 52       	subi	r28, 0x20	; 32
    1ac8:	dd 4d       	sbci	r29, 0xDD	; 221
    1aca:	8a 89       	ldd	r24, Y+18	; 0x12
    1acc:	9b 89       	ldd	r25, Y+19	; 0x13
    1ace:	7a c0       	rjmp	.+244    	; 0x1bc4 <udd_ep_trans_complet+0x2bc>
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	ee 0f       	add	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	e0 52       	subi	r30, 0x20	; 32
    1ae0:	fd 4d       	sbci	r31, 0xDD	; 221
    1ae2:	42 89       	ldd	r20, Z+18	; 0x12
    1ae4:	53 89       	ldd	r21, Z+19	; 0x13
    1ae6:	4a 15       	cp	r20, r10
    1ae8:	5b 05       	cpc	r21, r11
    1aea:	09 f0       	breq	.+2      	; 0x1aee <udd_ep_trans_complet+0x1e6>
    1aec:	6b c0       	rjmp	.+214    	; 0x1bc4 <udd_ep_trans_complet+0x2bc>
    1aee:	28 17       	cp	r18, r24
    1af0:	39 07       	cpc	r19, r25
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <udd_ep_trans_complet+0x1ee>
    1af4:	67 c0       	rjmp	.+206    	; 0x1bc4 <udd_ep_trans_complet+0x2bc>
    1af6:	ac 01       	movw	r20, r24
    1af8:	42 1b       	sub	r20, r18
    1afa:	53 0b       	sbc	r21, r19
    1afc:	9a 01       	movw	r18, r20
    1afe:	21 15       	cp	r18, r1
    1b00:	54 e0       	ldi	r21, 0x04	; 4
    1b02:	35 07       	cpc	r19, r21
    1b04:	50 f0       	brcs	.+20     	; 0x1b1a <udd_ep_trans_complet+0x212>
    1b06:	2f ef       	ldi	r18, 0xFF	; 255
    1b08:	33 e0       	ldi	r19, 0x03	; 3
    1b0a:	c9 01       	movw	r24, r18
    1b0c:	b4 01       	movw	r22, r8
    1b0e:	59 d6       	rcall	.+3250   	; 0x27c2 <__udivmodhi4>
    1b10:	d9 01       	movw	r26, r18
    1b12:	a8 1b       	sub	r26, r24
    1b14:	b9 0b       	sbc	r27, r25
    1b16:	cd 01       	movw	r24, r26
    1b18:	07 c0       	rjmp	.+14     	; 0x1b28 <udd_ep_trans_complet+0x220>
    1b1a:	c9 01       	movw	r24, r18
    1b1c:	b4 01       	movw	r22, r8
    1b1e:	51 d6       	rcall	.+3234   	; 0x27c2 <__udivmodhi4>
    1b20:	f9 01       	movw	r30, r18
    1b22:	e8 1b       	sub	r30, r24
    1b24:	f9 0b       	sbc	r31, r25
    1b26:	cf 01       	movw	r24, r30
    1b28:	fe 01       	movw	r30, r28
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	ee 0f       	add	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	e0 52       	subi	r30, 0x20	; 32
    1b38:	fd 4d       	sbci	r31, 0xDD	; 221
    1b3a:	16 86       	std	Z+14, r1	; 0x0e
    1b3c:	17 86       	std	Z+15, r1	; 0x0f
    1b3e:	88 15       	cp	r24, r8
    1b40:	99 05       	cpc	r25, r9
    1b42:	00 f5       	brcc	.+64     	; 0x1b84 <udd_ep_trans_complet+0x27c>
    1b44:	d8 01       	movw	r26, r16
    1b46:	8c 91       	ld	r24, X
    1b48:	84 60       	ori	r24, 0x04	; 4
    1b4a:	8c 93       	st	X, r24
    1b4c:	b0 e4       	ldi	r27, 0x40	; 64
    1b4e:	db 9e       	mul	r13, r27
    1b50:	c0 01       	movw	r24, r0
    1b52:	11 24       	eor	r1, r1
    1b54:	8b 54       	subi	r24, 0x4B	; 75
    1b56:	9e 4d       	sbci	r25, 0xDE	; 222
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ee 0f       	add	r30, r30
    1b5c:	ff 1f       	adc	r31, r31
    1b5e:	ee 0f       	add	r30, r30
    1b60:	ff 1f       	adc	r31, r31
    1b62:	ee 0f       	add	r30, r30
    1b64:	ff 1f       	adc	r31, r31
    1b66:	e0 51       	subi	r30, 0x10	; 16
    1b68:	fd 4d       	sbci	r31, 0xDD	; 221
    1b6a:	80 83       	st	Z, r24
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	cc 0f       	add	r28, r28
    1b70:	dd 1f       	adc	r29, r29
    1b72:	cc 0f       	add	r28, r28
    1b74:	dd 1f       	adc	r29, r29
    1b76:	cc 0f       	add	r28, r28
    1b78:	dd 1f       	adc	r29, r29
    1b7a:	c0 52       	subi	r28, 0x20	; 32
    1b7c:	dd 4d       	sbci	r29, 0xDD	; 221
    1b7e:	8a 8a       	std	Y+18, r8	; 0x12
    1b80:	9b 8a       	std	Y+19, r9	; 0x13
    1b82:	1c c0       	rjmp	.+56     	; 0x1bbc <udd_ep_trans_complet+0x2b4>
    1b84:	f8 01       	movw	r30, r16
    1b86:	41 81       	ldd	r20, Z+1	; 0x01
    1b88:	52 81       	ldd	r21, Z+2	; 0x02
    1b8a:	25 81       	ldd	r18, Z+5	; 0x05
    1b8c:	36 81       	ldd	r19, Z+6	; 0x06
    1b8e:	24 0f       	add	r18, r20
    1b90:	35 1f       	adc	r19, r21
    1b92:	fe 01       	movw	r30, r28
    1b94:	ee 0f       	add	r30, r30
    1b96:	ff 1f       	adc	r31, r31
    1b98:	ee 0f       	add	r30, r30
    1b9a:	ff 1f       	adc	r31, r31
    1b9c:	ee 0f       	add	r30, r30
    1b9e:	ff 1f       	adc	r31, r31
    1ba0:	e0 51       	subi	r30, 0x10	; 16
    1ba2:	fd 4d       	sbci	r31, 0xDD	; 221
    1ba4:	20 83       	st	Z, r18
    1ba6:	31 83       	std	Z+1, r19	; 0x01
    1ba8:	cc 0f       	add	r28, r28
    1baa:	dd 1f       	adc	r29, r29
    1bac:	cc 0f       	add	r28, r28
    1bae:	dd 1f       	adc	r29, r29
    1bb0:	cc 0f       	add	r28, r28
    1bb2:	dd 1f       	adc	r29, r29
    1bb4:	c0 52       	subi	r28, 0x20	; 32
    1bb6:	dd 4d       	sbci	r29, 0xDD	; 221
    1bb8:	8a 8b       	std	Y+18, r24	; 0x12
    1bba:	9b 8b       	std	Y+19, r25	; 0x13
    1bbc:	f7 01       	movw	r30, r14
    1bbe:	02 e0       	ldi	r16, 0x02	; 2
    1bc0:	06 93       	lac	Z, r16
    1bc2:	13 c0       	rjmp	.+38     	; 0x1bea <udd_ep_trans_complet+0x2e2>
    1bc4:	d8 01       	movw	r26, r16
    1bc6:	8c 91       	ld	r24, X
    1bc8:	80 ff       	sbrs	r24, 0
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <udd_ep_trans_complet+0x2e2>
    1bcc:	8e 7f       	andi	r24, 0xFE	; 254
    1bce:	8c 93       	st	X, r24
    1bd0:	17 96       	adiw	r26, 0x07	; 7
    1bd2:	ed 91       	ld	r30, X+
    1bd4:	fc 91       	ld	r31, X
    1bd6:	18 97       	sbiw	r26, 0x08	; 8
    1bd8:	30 97       	sbiw	r30, 0x00	; 0
    1bda:	39 f0       	breq	.+14     	; 0x1bea <udd_ep_trans_complet+0x2e2>
    1bdc:	15 96       	adiw	r26, 0x05	; 5
    1bde:	6d 91       	ld	r22, X+
    1be0:	7c 91       	ld	r23, X
    1be2:	16 97       	sbiw	r26, 0x06	; 6
    1be4:	4d 2d       	mov	r20, r13
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	19 95       	eicall
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	df 90       	pop	r13
    1bf8:	bf 90       	pop	r11
    1bfa:	af 90       	pop	r10
    1bfc:	9f 90       	pop	r9
    1bfe:	8f 90       	pop	r8
    1c00:	08 95       	ret

00001c02 <udd_attach>:
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	1f 92       	push	r1
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	8f b7       	in	r24, 0x3f	; 63
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	f8 94       	cli
    1c14:	19 81       	ldd	r17, Y+1	; 0x01
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	d5 dc       	rcall	.-1622   	; 0x15c4 <udd_sleep_mode>
    1c1a:	ea ec       	ldi	r30, 0xCA	; 202
    1c1c:	f4 e0       	ldi	r31, 0x04	; 4
    1c1e:	80 e4       	ldi	r24, 0x40	; 64
    1c20:	80 83       	st	Z, r24
    1c22:	80 e2       	ldi	r24, 0x20	; 32
    1c24:	80 83       	st	Z, r24
    1c26:	e1 ec       	ldi	r30, 0xC1	; 193
    1c28:	f4 e0       	ldi	r31, 0x04	; 4
    1c2a:	80 81       	ld	r24, Z
    1c2c:	81 60       	ori	r24, 0x01	; 1
    1c2e:	80 83       	st	Z, r24
    1c30:	a9 ec       	ldi	r26, 0xC9	; 201
    1c32:	b4 e0       	ldi	r27, 0x04	; 4
    1c34:	8c 91       	ld	r24, X
    1c36:	82 60       	ori	r24, 0x02	; 2
    1c38:	8c 93       	st	X, r24
    1c3a:	e8 ec       	ldi	r30, 0xC8	; 200
    1c3c:	f4 e0       	ldi	r31, 0x04	; 4
    1c3e:	80 81       	ld	r24, Z
    1c40:	80 64       	ori	r24, 0x40	; 64
    1c42:	80 83       	st	Z, r24
    1c44:	8c 91       	ld	r24, X
    1c46:	81 60       	ori	r24, 0x01	; 1
    1c48:	8c 93       	st	X, r24
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 68       	ori	r24, 0x80	; 128
    1c4e:	80 83       	st	Z, r24
    1c50:	1f bf       	out	0x3f, r17	; 63
    1c52:	0f 90       	pop	r0
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	1f 91       	pop	r17
    1c5a:	08 95       	ret

00001c5c <udd_enable>:
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	1f 92       	push	r1
    1c66:	1f 92       	push	r1
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	00 e6       	ldi	r16, 0x60	; 96
    1c6e:	10 e0       	ldi	r17, 0x00	; 0
    1c70:	f8 01       	movw	r30, r16
    1c72:	10 82       	st	Z, r1
    1c74:	80 e3       	ldi	r24, 0x30	; 48
    1c76:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sysclk_enable_usb>
    1c7a:	e0 ec       	ldi	r30, 0xC0	; 192
    1c7c:	f4 e0       	ldi	r31, 0x04	; 4
    1c7e:	80 81       	ld	r24, Z
    1c80:	80 64       	ori	r24, 0x40	; 64
    1c82:	80 83       	st	Z, r24
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	f8 01       	movw	r30, r16
    1c88:	80 83       	st	Z, r24
    1c8a:	8f b7       	in	r24, 0x3f	; 63
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
    1c8e:	f8 94       	cli
    1c90:	1a 81       	ldd	r17, Y+2	; 0x02
    1c92:	e0 ee       	ldi	r30, 0xE0	; 224
    1c94:	f2 e2       	ldi	r31, 0x22	; 34
    1c96:	15 86       	std	Z+13, r1	; 0x0d
    1c98:	15 8a       	std	Z+21, r1	; 0x15
    1c9a:	15 8e       	std	Z+29, r1	; 0x1d
    1c9c:	15 a2       	std	Z+37, r1	; 0x25
    1c9e:	15 a6       	std	Z+45, r1	; 0x2d
    1ca0:	15 aa       	std	Z+53, r1	; 0x35
    1ca2:	e5 e7       	ldi	r30, 0x75	; 117
    1ca4:	f2 e2       	ldi	r31, 0x22	; 34
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8e 7f       	andi	r24, 0xFE	; 254
    1caa:	80 83       	st	Z, r24
    1cac:	ee e7       	ldi	r30, 0x7E	; 126
    1cae:	f2 e2       	ldi	r31, 0x22	; 34
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8e 7f       	andi	r24, 0xFE	; 254
    1cb4:	80 83       	st	Z, r24
    1cb6:	e7 e8       	ldi	r30, 0x87	; 135
    1cb8:	f2 e2       	ldi	r31, 0x22	; 34
    1cba:	80 81       	ld	r24, Z
    1cbc:	8e 7f       	andi	r24, 0xFE	; 254
    1cbe:	80 83       	st	Z, r24
    1cc0:	e0 e9       	ldi	r30, 0x90	; 144
    1cc2:	f2 e2       	ldi	r31, 0x22	; 34
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8e 7f       	andi	r24, 0xFE	; 254
    1cc8:	80 83       	st	Z, r24
    1cca:	6a e1       	ldi	r22, 0x1A	; 26
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	6f dc       	rcall	.-1826   	; 0x15b0 <nvm_read_byte>
    1cd2:	8f 3f       	cpi	r24, 0xFF	; 255
    1cd4:	19 f0       	breq	.+6      	; 0x1cdc <udd_enable+0x80>
    1cd6:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1cda:	03 c0       	rjmp	.+6      	; 0x1ce2 <udd_enable+0x86>
    1cdc:	8f e1       	ldi	r24, 0x1F	; 31
    1cde:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1ce2:	6b e1       	ldi	r22, 0x1B	; 27
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	63 dc       	rcall	.-1850   	; 0x15b0 <nvm_read_byte>
    1cea:	8f 3f       	cpi	r24, 0xFF	; 255
    1cec:	19 f0       	breq	.+6      	; 0x1cf4 <udd_enable+0x98>
    1cee:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <udd_enable+0x9e>
    1cf4:	8f e1       	ldi	r24, 0x1F	; 31
    1cf6:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1cfa:	e0 ec       	ldi	r30, 0xC0	; 192
    1cfc:	f4 e0       	ldi	r31, 0x04	; 4
    1cfe:	80 81       	ld	r24, Z
    1d00:	82 60       	ori	r24, 0x02	; 2
    1d02:	80 83       	st	Z, r24
    1d04:	80 81       	ld	r24, Z
    1d06:	80 68       	ori	r24, 0x80	; 128
    1d08:	80 83       	st	Z, r24
    1d0a:	80 81       	ld	r24, Z
    1d0c:	80 61       	ori	r24, 0x10	; 16
    1d0e:	80 83       	st	Z, r24
    1d10:	8c ee       	ldi	r24, 0xEC	; 236
    1d12:	92 e2       	ldi	r25, 0x22	; 34
    1d14:	86 83       	std	Z+6, r24	; 0x06
    1d16:	97 83       	std	Z+7, r25	; 0x07
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 62       	ori	r24, 0x20	; 32
    1d1c:	80 83       	st	Z, r24
    1d1e:	8f ef       	ldi	r24, 0xFF	; 255
    1d20:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    1d24:	e8 ec       	ldi	r30, 0xC8	; 200
    1d26:	f4 e0       	ldi	r31, 0x04	; 4
    1d28:	80 81       	ld	r24, Z
    1d2a:	81 60       	ori	r24, 0x01	; 1
    1d2c:	80 83       	st	Z, r24
    1d2e:	10 92 20 23 	sts	0x2320, r1	; 0x802320 <udd_b_idle>
    1d32:	80 91 8b 23 	lds	r24, 0x238B	; 0x80238b <sleepmgr_locks+0x5>
    1d36:	8f 3f       	cpi	r24, 0xFF	; 255
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <udd_enable+0xe0>
    1d3a:	ff cf       	rjmp	.-2      	; 0x1d3a <udd_enable+0xde>
    1d3c:	8f b7       	in	r24, 0x3f	; 63
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	f8 94       	cli
    1d42:	99 81       	ldd	r25, Y+1	; 0x01
    1d44:	e6 e8       	ldi	r30, 0x86	; 134
    1d46:	f3 e2       	ldi	r31, 0x23	; 35
    1d48:	85 81       	ldd	r24, Z+5	; 0x05
    1d4a:	8f 5f       	subi	r24, 0xFF	; 255
    1d4c:	85 83       	std	Z+5, r24	; 0x05
    1d4e:	9f bf       	out	0x3f, r25	; 63
    1d50:	58 df       	rcall	.-336    	; 0x1c02 <udd_attach>
    1d52:	1f bf       	out	0x3f, r17	; 63
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	08 95       	ret

00001d62 <udd_is_high_speed>:
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	08 95       	ret

00001d66 <udd_set_address>:
    1d66:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1d6a:	08 95       	ret

00001d6c <udd_getaddress>:
    1d6c:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1d70:	08 95       	ret

00001d72 <udd_get_frame_number>:
    1d72:	80 91 1c 23 	lds	r24, 0x231C	; 0x80231c <udd_sram+0x3c>
    1d76:	90 91 1d 23 	lds	r25, 0x231D	; 0x80231d <udd_sram+0x3d>
    1d7a:	08 95       	ret

00001d7c <udd_get_micro_frame_number>:
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	08 95       	ret

00001d82 <udd_set_setup_payload>:
    1d82:	ec e8       	ldi	r30, 0x8C	; 140
    1d84:	f3 e2       	ldi	r31, 0x23	; 35
    1d86:	80 87       	std	Z+8, r24	; 0x08
    1d88:	91 87       	std	Z+9, r25	; 0x09
    1d8a:	62 87       	std	Z+10, r22	; 0x0a
    1d8c:	73 87       	std	Z+11, r23	; 0x0b
    1d8e:	08 95       	ret

00001d90 <udd_ep_alloc>:
    1d90:	28 2f       	mov	r18, r24
    1d92:	2f 70       	andi	r18, 0x0F	; 15
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	22 0f       	add	r18, r18
    1d98:	33 1f       	adc	r19, r19
    1d9a:	08 2e       	mov	r0, r24
    1d9c:	00 0c       	add	r0, r0
    1d9e:	99 0b       	sbc	r25, r25
    1da0:	88 27       	eor	r24, r24
    1da2:	99 0f       	add	r25, r25
    1da4:	88 1f       	adc	r24, r24
    1da6:	99 27       	eor	r25, r25
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	fc 01       	movw	r30, r24
    1dae:	ee 0f       	add	r30, r30
    1db0:	ff 1f       	adc	r31, r31
    1db2:	ee 0f       	add	r30, r30
    1db4:	ff 1f       	adc	r31, r31
    1db6:	ee 0f       	add	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	e0 52       	subi	r30, 0x20	; 32
    1dbc:	fd 4d       	sbci	r31, 0xDD	; 221
    1dbe:	25 85       	ldd	r18, Z+13	; 0x0d
    1dc0:	20 7c       	andi	r18, 0xC0	; 192
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <udd_ep_alloc+0x36>
    1dc4:	69 c0       	rjmp	.+210    	; 0x1e98 <udd_ep_alloc+0x108>
    1dc6:	63 70       	andi	r22, 0x03	; 3
    1dc8:	61 30       	cpi	r22, 0x01	; 1
    1dca:	11 f0       	breq	.+4      	; 0x1dd0 <udd_ep_alloc+0x40>
    1dcc:	18 f4       	brcc	.+6      	; 0x1dd4 <udd_ep_alloc+0x44>
    1dce:	04 c0       	rjmp	.+8      	; 0x1dd8 <udd_ep_alloc+0x48>
    1dd0:	20 ec       	ldi	r18, 0xC0	; 192
    1dd2:	03 c0       	rjmp	.+6      	; 0x1dda <udd_ep_alloc+0x4a>
    1dd4:	20 e8       	ldi	r18, 0x80	; 128
    1dd6:	01 c0       	rjmp	.+2      	; 0x1dda <udd_ep_alloc+0x4a>
    1dd8:	20 e4       	ldi	r18, 0x40	; 64
    1dda:	40 38       	cpi	r20, 0x80	; 128
    1ddc:	51 05       	cpc	r21, r1
    1dde:	e9 f0       	breq	.+58     	; 0x1e1a <udd_ep_alloc+0x8a>
    1de0:	50 f4       	brcc	.+20     	; 0x1df6 <udd_ep_alloc+0x66>
    1de2:	40 32       	cpi	r20, 0x20	; 32
    1de4:	51 05       	cpc	r21, r1
    1de6:	a9 f0       	breq	.+42     	; 0x1e12 <udd_ep_alloc+0x82>
    1de8:	40 34       	cpi	r20, 0x40	; 64
    1dea:	51 05       	cpc	r21, r1
    1dec:	a1 f0       	breq	.+40     	; 0x1e16 <udd_ep_alloc+0x86>
    1dee:	40 31       	cpi	r20, 0x10	; 16
    1df0:	51 05       	cpc	r21, r1
    1df2:	d9 f4       	brne	.+54     	; 0x1e2a <udd_ep_alloc+0x9a>
    1df4:	0c c0       	rjmp	.+24     	; 0x1e0e <udd_ep_alloc+0x7e>
    1df6:	41 15       	cp	r20, r1
    1df8:	32 e0       	ldi	r19, 0x02	; 2
    1dfa:	53 07       	cpc	r21, r19
    1dfc:	91 f0       	breq	.+36     	; 0x1e22 <udd_ep_alloc+0x92>
    1dfe:	4f 3f       	cpi	r20, 0xFF	; 255
    1e00:	33 e0       	ldi	r19, 0x03	; 3
    1e02:	53 07       	cpc	r21, r19
    1e04:	81 f0       	breq	.+32     	; 0x1e26 <udd_ep_alloc+0x96>
    1e06:	41 15       	cp	r20, r1
    1e08:	51 40       	sbci	r21, 0x01	; 1
    1e0a:	79 f4       	brne	.+30     	; 0x1e2a <udd_ep_alloc+0x9a>
    1e0c:	08 c0       	rjmp	.+16     	; 0x1e1e <udd_ep_alloc+0x8e>
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0d c0       	rjmp	.+26     	; 0x1e2c <udd_ep_alloc+0x9c>
    1e12:	42 e0       	ldi	r20, 0x02	; 2
    1e14:	0b c0       	rjmp	.+22     	; 0x1e2c <udd_ep_alloc+0x9c>
    1e16:	43 e0       	ldi	r20, 0x03	; 3
    1e18:	09 c0       	rjmp	.+18     	; 0x1e2c <udd_ep_alloc+0x9c>
    1e1a:	44 e0       	ldi	r20, 0x04	; 4
    1e1c:	07 c0       	rjmp	.+14     	; 0x1e2c <udd_ep_alloc+0x9c>
    1e1e:	45 e0       	ldi	r20, 0x05	; 5
    1e20:	05 c0       	rjmp	.+10     	; 0x1e2c <udd_ep_alloc+0x9c>
    1e22:	46 e0       	ldi	r20, 0x06	; 6
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <udd_ep_alloc+0x9c>
    1e26:	47 e0       	ldi	r20, 0x07	; 7
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <udd_ep_alloc+0x9c>
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	ee 0f       	add	r30, r30
    1e38:	ff 1f       	adc	r31, r31
    1e3a:	e0 52       	subi	r30, 0x20	; 32
    1e3c:	fd 4d       	sbci	r31, 0xDD	; 221
    1e3e:	15 86       	std	Z+13, r1	; 0x0d
    1e40:	36 e0       	ldi	r19, 0x06	; 6
    1e42:	34 87       	std	Z+12, r19	; 0x0c
    1e44:	24 2b       	or	r18, r20
    1e46:	25 87       	std	Z+13, r18	; 0x0d
    1e48:	fc 01       	movw	r30, r24
    1e4a:	ee 0f       	add	r30, r30
    1e4c:	ff 1f       	adc	r31, r31
    1e4e:	ee 0f       	add	r30, r30
    1e50:	ff 1f       	adc	r31, r31
    1e52:	ee 0f       	add	r30, r30
    1e54:	ff 1f       	adc	r31, r31
    1e56:	e0 52       	subi	r30, 0x20	; 32
    1e58:	fd 4d       	sbci	r31, 0xDD	; 221
    1e5a:	25 85       	ldd	r18, Z+13	; 0x0d
    1e5c:	20 7c       	andi	r18, 0xC0	; 192
    1e5e:	20 3c       	cpi	r18, 0xC0	; 192
    1e60:	69 f4       	brne	.+26     	; 0x1e7c <udd_ep_alloc+0xec>
    1e62:	fc 01       	movw	r30, r24
    1e64:	ee 0f       	add	r30, r30
    1e66:	ff 1f       	adc	r31, r31
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	ee 0f       	add	r30, r30
    1e6e:	ff 1f       	adc	r31, r31
    1e70:	e0 52       	subi	r30, 0x20	; 32
    1e72:	fd 4d       	sbci	r31, 0xDD	; 221
    1e74:	25 85       	ldd	r18, Z+13	; 0x0d
    1e76:	27 70       	andi	r18, 0x07	; 7
    1e78:	27 30       	cpi	r18, 0x07	; 7
    1e7a:	81 f0       	breq	.+32     	; 0x1e9c <udd_ep_alloc+0x10c>
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	fc 01       	movw	r30, r24
    1e8a:	e0 52       	subi	r30, 0x20	; 32
    1e8c:	fd 4d       	sbci	r31, 0xDD	; 221
    1e8e:	85 85       	ldd	r24, Z+13	; 0x0d
    1e90:	80 62       	ori	r24, 0x20	; 32
    1e92:	85 87       	std	Z+13, r24	; 0x0d
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	08 95       	ret
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	08 95       	ret
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	08 95       	ret

00001ea0 <udd_ep_is_halted>:
    1ea0:	e8 2f       	mov	r30, r24
    1ea2:	ef 70       	andi	r30, 0x0F	; 15
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	08 2e       	mov	r0, r24
    1eac:	00 0c       	add	r0, r0
    1eae:	99 0b       	sbc	r25, r25
    1eb0:	88 27       	eor	r24, r24
    1eb2:	99 0f       	add	r25, r25
    1eb4:	88 1f       	adc	r24, r24
    1eb6:	99 27       	eor	r25, r25
    1eb8:	e8 0f       	add	r30, r24
    1eba:	f9 1f       	adc	r31, r25
    1ebc:	ee 0f       	add	r30, r30
    1ebe:	ff 1f       	adc	r31, r31
    1ec0:	ee 0f       	add	r30, r30
    1ec2:	ff 1f       	adc	r31, r31
    1ec4:	ee 0f       	add	r30, r30
    1ec6:	ff 1f       	adc	r31, r31
    1ec8:	e0 52       	subi	r30, 0x20	; 32
    1eca:	fd 4d       	sbci	r31, 0xDD	; 221
    1ecc:	85 85       	ldd	r24, Z+13	; 0x0d
    1ece:	82 fb       	bst	r24, 2
    1ed0:	88 27       	eor	r24, r24
    1ed2:	80 f9       	bld	r24, 0
    1ed4:	08 95       	ret

00001ed6 <udd_ep_clear_halt>:
    1ed6:	0f 93       	push	r16
    1ed8:	28 2f       	mov	r18, r24
    1eda:	2f 70       	andi	r18, 0x0F	; 15
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	a9 01       	movw	r20, r18
    1ee0:	44 0f       	add	r20, r20
    1ee2:	55 1f       	adc	r21, r21
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	08 2e       	mov	r0, r24
    1ee8:	00 0c       	add	r0, r0
    1eea:	33 0b       	sbc	r19, r19
    1eec:	22 27       	eor	r18, r18
    1eee:	33 0f       	add	r19, r19
    1ef0:	22 1f       	adc	r18, r18
    1ef2:	33 27       	eor	r19, r19
    1ef4:	24 0f       	add	r18, r20
    1ef6:	35 1f       	adc	r19, r21
    1ef8:	a9 01       	movw	r20, r18
    1efa:	44 0f       	add	r20, r20
    1efc:	55 1f       	adc	r21, r21
    1efe:	44 0f       	add	r20, r20
    1f00:	55 1f       	adc	r21, r21
    1f02:	44 0f       	add	r20, r20
    1f04:	55 1f       	adc	r21, r21
    1f06:	fa 01       	movw	r30, r20
    1f08:	e4 51       	subi	r30, 0x14	; 20
    1f0a:	fd 4d       	sbci	r31, 0xDD	; 221
    1f0c:	01 e0       	ldi	r16, 0x01	; 1
    1f0e:	06 93       	lac	Z, r16
    1f10:	fa 01       	movw	r30, r20
    1f12:	e0 52       	subi	r30, 0x20	; 32
    1f14:	fd 4d       	sbci	r31, 0xDD	; 221
    1f16:	95 85       	ldd	r25, Z+13	; 0x0d
    1f18:	92 ff       	sbrs	r25, 2
    1f1a:	11 c0       	rjmp	.+34     	; 0x1f3e <udd_ep_clear_halt+0x68>
    1f1c:	fa 01       	movw	r30, r20
    1f1e:	e0 52       	subi	r30, 0x20	; 32
    1f20:	fd 4d       	sbci	r31, 0xDD	; 221
    1f22:	95 85       	ldd	r25, Z+13	; 0x0d
    1f24:	9b 7f       	andi	r25, 0xFB	; 251
    1f26:	95 87       	std	Z+13, r25	; 0x0d
    1f28:	63 dc       	rcall	.-1850   	; 0x17f0 <udd_ep_get_job>
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	80 81       	ld	r24, Z
    1f2e:	80 ff       	sbrs	r24, 0
    1f30:	06 c0       	rjmp	.+12     	; 0x1f3e <udd_ep_clear_halt+0x68>
    1f32:	8e 7f       	andi	r24, 0xFE	; 254
    1f34:	80 83       	st	Z, r24
    1f36:	07 80       	ldd	r0, Z+7	; 0x07
    1f38:	f0 85       	ldd	r31, Z+8	; 0x08
    1f3a:	e0 2d       	mov	r30, r0
    1f3c:	19 95       	eicall
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	0f 91       	pop	r16
    1f42:	08 95       	ret

00001f44 <udd_ep_run>:
    1f44:	5f 92       	push	r5
    1f46:	6f 92       	push	r6
    1f48:	7f 92       	push	r7
    1f4a:	8f 92       	push	r8
    1f4c:	9f 92       	push	r9
    1f4e:	af 92       	push	r10
    1f50:	bf 92       	push	r11
    1f52:	cf 92       	push	r12
    1f54:	df 92       	push	r13
    1f56:	ef 92       	push	r14
    1f58:	ff 92       	push	r15
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	1f 92       	push	r1
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	78 2e       	mov	r7, r24
    1f6a:	66 2e       	mov	r6, r22
    1f6c:	4a 01       	movw	r8, r20
    1f6e:	59 01       	movw	r10, r18
    1f70:	3f dc       	rcall	.-1922   	; 0x17f0 <udd_ep_get_job>
    1f72:	6c 01       	movw	r12, r24
    1f74:	57 2c       	mov	r5, r7
    1f76:	55 1c       	adc	r5, r5
    1f78:	55 24       	eor	r5, r5
    1f7a:	55 1c       	adc	r5, r5
    1f7c:	87 2d       	mov	r24, r7
    1f7e:	8f 70       	andi	r24, 0x0F	; 15
    1f80:	e8 2e       	mov	r14, r24
    1f82:	f1 2c       	mov	r15, r1
    1f84:	ee 0c       	add	r14, r14
    1f86:	ff 1c       	adc	r15, r15
    1f88:	e5 0c       	add	r14, r5
    1f8a:	f1 1c       	adc	r15, r1
    1f8c:	f7 01       	movw	r30, r14
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	ee 0f       	add	r30, r30
    1f94:	ff 1f       	adc	r31, r31
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	e0 52       	subi	r30, 0x20	; 32
    1f9c:	fd 4d       	sbci	r31, 0xDD	; 221
    1f9e:	85 85       	ldd	r24, Z+13	; 0x0d
    1fa0:	80 7c       	andi	r24, 0xC0	; 192
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <udd_ep_run+0x62>
    1fa4:	81 c0       	rjmp	.+258    	; 0x20a8 <udd_ep_run+0x164>
    1fa6:	f7 01       	movw	r30, r14
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	ee 0f       	add	r30, r30
    1fae:	ff 1f       	adc	r31, r31
    1fb0:	ee 0f       	add	r30, r30
    1fb2:	ff 1f       	adc	r31, r31
    1fb4:	e0 52       	subi	r30, 0x20	; 32
    1fb6:	fd 4d       	sbci	r31, 0xDD	; 221
    1fb8:	85 85       	ldd	r24, Z+13	; 0x0d
    1fba:	80 7c       	andi	r24, 0xC0	; 192
    1fbc:	80 3c       	cpi	r24, 0xC0	; 192
    1fbe:	61 f0       	breq	.+24     	; 0x1fd8 <udd_ep_run+0x94>
    1fc0:	f7 01       	movw	r30, r14
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	ee 0f       	add	r30, r30
    1fc8:	ff 1f       	adc	r31, r31
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	e0 52       	subi	r30, 0x20	; 32
    1fd0:	fd 4d       	sbci	r31, 0xDD	; 221
    1fd2:	85 85       	ldd	r24, Z+13	; 0x0d
    1fd4:	82 fd       	sbrc	r24, 2
    1fd6:	6a c0       	rjmp	.+212    	; 0x20ac <udd_ep_run+0x168>
    1fd8:	8f b7       	in	r24, 0x3f	; 63
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	f8 94       	cli
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	f6 01       	movw	r30, r12
    1fe2:	90 81       	ld	r25, Z
    1fe4:	90 ff       	sbrs	r25, 0
    1fe6:	03 c0       	rjmp	.+6      	; 0x1fee <udd_ep_run+0xaa>
    1fe8:	8f bf       	out	0x3f, r24	; 63
    1fea:	51 2c       	mov	r5, r1
    1fec:	60 c0       	rjmp	.+192    	; 0x20ae <udd_ep_run+0x16a>
    1fee:	f6 01       	movw	r30, r12
    1ff0:	90 81       	ld	r25, Z
    1ff2:	91 60       	ori	r25, 0x01	; 1
    1ff4:	90 83       	st	Z, r25
    1ff6:	8f bf       	out	0x3f, r24	; 63
    1ff8:	81 82       	std	Z+1, r8	; 0x01
    1ffa:	92 82       	std	Z+2, r9	; 0x02
    1ffc:	a3 82       	std	Z+3, r10	; 0x03
    1ffe:	b4 82       	std	Z+4, r11	; 0x04
    2000:	15 82       	std	Z+5, r1	; 0x05
    2002:	16 82       	std	Z+6, r1	; 0x06
    2004:	07 83       	std	Z+7, r16	; 0x07
    2006:	10 87       	std	Z+8, r17	; 0x08
    2008:	61 10       	cpse	r6, r1
    200a:	06 c0       	rjmp	.+12     	; 0x2018 <udd_ep_run+0xd4>
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	a1 14       	cp	r10, r1
    2010:	b1 04       	cpc	r11, r1
    2012:	19 f0       	breq	.+6      	; 0x201a <udd_ep_run+0xd6>
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	01 c0       	rjmp	.+2      	; 0x201a <udd_ep_run+0xd6>
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	f6 01       	movw	r30, r12
    201c:	80 81       	ld	r24, Z
    201e:	90 fb       	bst	r25, 0
    2020:	81 f9       	bld	r24, 1
    2022:	8b 7f       	andi	r24, 0xFB	; 251
    2024:	80 83       	st	Z, r24
    2026:	55 20       	and	r5, r5
    2028:	61 f0       	breq	.+24     	; 0x2042 <udd_ep_run+0xfe>
    202a:	f7 01       	movw	r30, r14
    202c:	ee 0f       	add	r30, r30
    202e:	ff 1f       	adc	r31, r31
    2030:	ee 0f       	add	r30, r30
    2032:	ff 1f       	adc	r31, r31
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	e0 52       	subi	r30, 0x20	; 32
    203a:	fd 4d       	sbci	r31, 0xDD	; 221
    203c:	12 8a       	std	Z+18, r1	; 0x12
    203e:	13 8a       	std	Z+19, r1	; 0x13
    2040:	2e c0       	rjmp	.+92     	; 0x209e <udd_ep_run+0x15a>
    2042:	f7 01       	movw	r30, r14
    2044:	ee 0f       	add	r30, r30
    2046:	ff 1f       	adc	r31, r31
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	e0 52       	subi	r30, 0x20	; 32
    2052:	fd 4d       	sbci	r31, 0xDD	; 221
    2054:	85 85       	ldd	r24, Z+13	; 0x0d
    2056:	80 7c       	andi	r24, 0xC0	; 192
    2058:	80 3c       	cpi	r24, 0xC0	; 192
    205a:	a1 f4       	brne	.+40     	; 0x2084 <udd_ep_run+0x140>
    205c:	c7 01       	movw	r24, r14
    205e:	88 0f       	add	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	84 51       	subi	r24, 0x14	; 20
    206c:	9d 4d       	sbci	r25, 0xDD	; 221
    206e:	97 db       	rcall	.-2258   	; 0x179e <udd_ep_get_size>
    2070:	bc 01       	movw	r22, r24
    2072:	c5 01       	movw	r24, r10
    2074:	a6 d3       	rcall	.+1868   	; 0x27c2 <__udivmodhi4>
    2076:	89 2b       	or	r24, r25
    2078:	29 f0       	breq	.+10     	; 0x2084 <udd_ep_run+0x140>
    207a:	f6 01       	movw	r30, r12
    207c:	80 81       	ld	r24, Z
    207e:	8e 7f       	andi	r24, 0xFE	; 254
    2080:	80 83       	st	Z, r24
    2082:	15 c0       	rjmp	.+42     	; 0x20ae <udd_ep_run+0x16a>
    2084:	f7 01       	movw	r30, r14
    2086:	ee 0f       	add	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	ee 0f       	add	r30, r30
    208c:	ff 1f       	adc	r31, r31
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	e0 52       	subi	r30, 0x20	; 32
    2094:	fd 4d       	sbci	r31, 0xDD	; 221
    2096:	16 86       	std	Z+14, r1	; 0x0e
    2098:	17 86       	std	Z+15, r1	; 0x0f
    209a:	12 8a       	std	Z+18, r1	; 0x12
    209c:	13 8a       	std	Z+19, r1	; 0x13
    209e:	87 2d       	mov	r24, r7
    20a0:	33 dc       	rcall	.-1946   	; 0x1908 <udd_ep_trans_complet>
    20a2:	55 24       	eor	r5, r5
    20a4:	53 94       	inc	r5
    20a6:	03 c0       	rjmp	.+6      	; 0x20ae <udd_ep_run+0x16a>
    20a8:	51 2c       	mov	r5, r1
    20aa:	01 c0       	rjmp	.+2      	; 0x20ae <udd_ep_run+0x16a>
    20ac:	51 2c       	mov	r5, r1
    20ae:	85 2d       	mov	r24, r5
    20b0:	0f 90       	pop	r0
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	ff 90       	pop	r15
    20bc:	ef 90       	pop	r14
    20be:	df 90       	pop	r13
    20c0:	cf 90       	pop	r12
    20c2:	bf 90       	pop	r11
    20c4:	af 90       	pop	r10
    20c6:	9f 90       	pop	r9
    20c8:	8f 90       	pop	r8
    20ca:	7f 90       	pop	r7
    20cc:	6f 90       	pop	r6
    20ce:	5f 90       	pop	r5
    20d0:	08 95       	ret

000020d2 <udd_ep_abort>:
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	18 2f       	mov	r17, r24
    20de:	f8 2e       	mov	r15, r24
    20e0:	ff 1c       	adc	r15, r15
    20e2:	ff 24       	eor	r15, r15
    20e4:	ff 1c       	adc	r15, r15
    20e6:	c8 2f       	mov	r28, r24
    20e8:	cf 70       	andi	r28, 0x0F	; 15
    20ea:	d0 e0       	ldi	r29, 0x00	; 0
    20ec:	cc 0f       	add	r28, r28
    20ee:	dd 1f       	adc	r29, r29
    20f0:	cf 0d       	add	r28, r15
    20f2:	d1 1d       	adc	r29, r1
    20f4:	7d db       	rcall	.-2310   	; 0x17f0 <udd_ep_get_job>
    20f6:	dc 01       	movw	r26, r24
    20f8:	fe 01       	movw	r30, r28
    20fa:	ee 0f       	add	r30, r30
    20fc:	ff 1f       	adc	r31, r31
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	e4 51       	subi	r30, 0x14	; 20
    2108:	fd 4d       	sbci	r31, 0xDD	; 221
    210a:	02 e0       	ldi	r16, 0x02	; 2
    210c:	05 93       	las	Z, r16
    210e:	8c 91       	ld	r24, X
    2110:	80 ff       	sbrs	r24, 0
    2112:	22 c0       	rjmp	.+68     	; 0x2158 <udd_ep_abort+0x86>
    2114:	8e 7f       	andi	r24, 0xFE	; 254
    2116:	8c 93       	st	X, r24
    2118:	17 96       	adiw	r26, 0x07	; 7
    211a:	ed 91       	ld	r30, X+
    211c:	fc 91       	ld	r31, X
    211e:	18 97       	sbiw	r26, 0x08	; 8
    2120:	30 97       	sbiw	r30, 0x00	; 0
    2122:	d1 f0       	breq	.+52     	; 0x2158 <udd_ep_abort+0x86>
    2124:	ff 20       	and	r15, r15
    2126:	59 f0       	breq	.+22     	; 0x213e <udd_ep_abort+0x6c>
    2128:	cc 0f       	add	r28, r28
    212a:	dd 1f       	adc	r29, r29
    212c:	cc 0f       	add	r28, r28
    212e:	dd 1f       	adc	r29, r29
    2130:	cc 0f       	add	r28, r28
    2132:	dd 1f       	adc	r29, r29
    2134:	c0 52       	subi	r28, 0x20	; 32
    2136:	dd 4d       	sbci	r29, 0xDD	; 221
    2138:	6a 89       	ldd	r22, Y+18	; 0x12
    213a:	7b 89       	ldd	r23, Y+19	; 0x13
    213c:	0a c0       	rjmp	.+20     	; 0x2152 <udd_ep_abort+0x80>
    213e:	cc 0f       	add	r28, r28
    2140:	dd 1f       	adc	r29, r29
    2142:	cc 0f       	add	r28, r28
    2144:	dd 1f       	adc	r29, r29
    2146:	cc 0f       	add	r28, r28
    2148:	dd 1f       	adc	r29, r29
    214a:	c0 52       	subi	r28, 0x20	; 32
    214c:	dd 4d       	sbci	r29, 0xDD	; 221
    214e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2150:	7f 85       	ldd	r23, Y+15	; 0x0f
    2152:	41 2f       	mov	r20, r17
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	19 95       	eicall
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	ff 90       	pop	r15
    2162:	08 95       	ret

00002164 <udd_ep_free>:
    2164:	cf 93       	push	r28
    2166:	c8 2f       	mov	r28, r24
    2168:	b4 df       	rcall	.-152    	; 0x20d2 <udd_ep_abort>
    216a:	ec 2f       	mov	r30, r28
    216c:	ef 70       	andi	r30, 0x0F	; 15
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	8c 2f       	mov	r24, r28
    2176:	cc 0f       	add	r28, r28
    2178:	99 0b       	sbc	r25, r25
    217a:	88 27       	eor	r24, r24
    217c:	99 0f       	add	r25, r25
    217e:	88 1f       	adc	r24, r24
    2180:	99 27       	eor	r25, r25
    2182:	e8 0f       	add	r30, r24
    2184:	f9 1f       	adc	r31, r25
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	ee 0f       	add	r30, r30
    218c:	ff 1f       	adc	r31, r31
    218e:	ee 0f       	add	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	e0 52       	subi	r30, 0x20	; 32
    2194:	fd 4d       	sbci	r31, 0xDD	; 221
    2196:	15 86       	std	Z+13, r1	; 0x0d
    2198:	cf 91       	pop	r28
    219a:	08 95       	ret

0000219c <udd_ep_set_halt>:
    219c:	e8 2f       	mov	r30, r24
    219e:	ef 70       	andi	r30, 0x0F	; 15
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	ee 0f       	add	r30, r30
    21a4:	ff 1f       	adc	r31, r31
    21a6:	28 2f       	mov	r18, r24
    21a8:	08 2e       	mov	r0, r24
    21aa:	00 0c       	add	r0, r0
    21ac:	33 0b       	sbc	r19, r19
    21ae:	22 27       	eor	r18, r18
    21b0:	33 0f       	add	r19, r19
    21b2:	22 1f       	adc	r18, r18
    21b4:	33 27       	eor	r19, r19
    21b6:	e2 0f       	add	r30, r18
    21b8:	f3 1f       	adc	r31, r19
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	ee 0f       	add	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	ee 0f       	add	r30, r30
    21c4:	ff 1f       	adc	r31, r31
    21c6:	e0 52       	subi	r30, 0x20	; 32
    21c8:	fd 4d       	sbci	r31, 0xDD	; 221
    21ca:	95 85       	ldd	r25, Z+13	; 0x0d
    21cc:	94 60       	ori	r25, 0x04	; 4
    21ce:	95 87       	std	Z+13, r25	; 0x0d
    21d0:	80 df       	rcall	.-256    	; 0x20d2 <udd_ep_abort>
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	08 95       	ret

000021d6 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    21d6:	1f 92       	push	r1
    21d8:	0f 92       	push	r0
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	0f 92       	push	r0
    21de:	11 24       	eor	r1, r1
    21e0:	0b b6       	in	r0, 0x3b	; 59
    21e2:	0f 92       	push	r0
    21e4:	0f 93       	push	r16
    21e6:	2f 93       	push	r18
    21e8:	3f 93       	push	r19
    21ea:	4f 93       	push	r20
    21ec:	5f 93       	push	r21
    21ee:	6f 93       	push	r22
    21f0:	7f 93       	push	r23
    21f2:	8f 93       	push	r24
    21f4:	9f 93       	push	r25
    21f6:	af 93       	push	r26
    21f8:	bf 93       	push	r27
    21fa:	ef 93       	push	r30
    21fc:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    21fe:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2202:	88 23       	and	r24, r24
    2204:	3c f4       	brge	.+14     	; 0x2214 <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    2206:	80 e8       	ldi	r24, 0x80	; 128
    2208:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    220c:	0e 94 f6 07 	call	0xfec	; 0xfec <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2210:	b8 d1       	rcall	.+880    	; 0x2582 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2212:	88 c0       	rjmp	.+272    	; 0x2324 <__vector_125+0x14e>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2214:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2218:	82 ff       	sbrs	r24, 2
    221a:	20 c0       	rjmp	.+64     	; 0x225c <__vector_125+0x86>
		udd_ack_underflow_event();
    221c:	84 e0       	ldi	r24, 0x04	; 4
    221e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2222:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <udd_sram+0x14>
    2226:	86 ff       	sbrs	r24, 6
    2228:	7d c0       	rjmp	.+250    	; 0x2324 <__vector_125+0x14e>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    222a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    222e:	81 fd       	sbrc	r24, 1
    2230:	79 c0       	rjmp	.+242    	; 0x2324 <__vector_125+0x14e>
    2232:	f9 da       	rcall	.-2574   	; 0x1826 <udd_ctrl_interrupt_tc_setup>
    2234:	81 11       	cpse	r24, r1
    2236:	76 c0       	rjmp	.+236    	; 0x2324 <__vector_125+0x14e>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2238:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <udd_ep_control_state>
    223c:	81 30       	cpi	r24, 0x01	; 1
    223e:	11 f4       	brne	.+4      	; 0x2244 <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2240:	2c da       	rcall	.-2984   	; 0x169a <udd_ctrl_send_zlp_in>
    2242:	70 c0       	rjmp	.+224    	; 0x2324 <__vector_125+0x14e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2244:	84 30       	cpi	r24, 0x04	; 4
    2246:	09 f0       	breq	.+2      	; 0x224a <__vector_125+0x74>
    2248:	6d c0       	rjmp	.+218    	; 0x2324 <__vector_125+0x14e>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    224a:	e5 ef       	ldi	r30, 0xF5	; 245
    224c:	f2 e2       	ldi	r31, 0x22	; 34
    224e:	04 e0       	ldi	r16, 0x04	; 4
    2250:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2252:	ed ee       	ldi	r30, 0xED	; 237
    2254:	f2 e2       	ldi	r31, 0x22	; 34
    2256:	04 e0       	ldi	r16, 0x04	; 4
    2258:	05 93       	las	Z, r16
    225a:	64 c0       	rjmp	.+200    	; 0x2324 <__vector_125+0x14e>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    225c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2260:	81 ff       	sbrs	r24, 1
    2262:	5b c0       	rjmp	.+182    	; 0x231a <__vector_125+0x144>
		udd_ack_overflow_event();
    2264:	82 e0       	ldi	r24, 0x02	; 2
    2266:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    226a:	80 91 ec 22 	lds	r24, 0x22EC	; 0x8022ec <udd_sram+0xc>
    226e:	86 ff       	sbrs	r24, 6
    2270:	59 c0       	rjmp	.+178    	; 0x2324 <__vector_125+0x14e>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2272:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2276:	81 fd       	sbrc	r24, 1
    2278:	55 c0       	rjmp	.+170    	; 0x2324 <__vector_125+0x14e>
    227a:	d5 da       	rcall	.-2646   	; 0x1826 <udd_ctrl_interrupt_tc_setup>
    227c:	81 11       	cpse	r24, r1
    227e:	52 c0       	rjmp	.+164    	; 0x2324 <__vector_125+0x14e>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2280:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <udd_ep_control_state>
    2284:	82 30       	cpi	r24, 0x02	; 2
    2286:	41 f4       	brne	.+16     	; 0x2298 <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2288:	84 e0       	ldi	r24, 0x04	; 4
    228a:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    228e:	ec ee       	ldi	r30, 0xEC	; 236
    2290:	f2 e2       	ldi	r31, 0x22	; 34
    2292:	02 e0       	ldi	r16, 0x02	; 2
    2294:	06 93       	lac	Z, r16
    2296:	46 c0       	rjmp	.+140    	; 0x2324 <__vector_125+0x14e>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2298:	83 30       	cpi	r24, 0x03	; 3
    229a:	09 f0       	breq	.+2      	; 0x229e <__vector_125+0xc8>
    229c:	43 c0       	rjmp	.+134    	; 0x2324 <__vector_125+0x14e>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    229e:	e5 ef       	ldi	r30, 0xF5	; 245
    22a0:	f2 e2       	ldi	r31, 0x22	; 34
    22a2:	04 e0       	ldi	r16, 0x04	; 4
    22a4:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    22a6:	ed ee       	ldi	r30, 0xED	; 237
    22a8:	f2 e2       	ldi	r31, 0x22	; 34
    22aa:	04 e0       	ldi	r16, 0x04	; 4
    22ac:	05 93       	las	Z, r16
    22ae:	3a c0       	rjmp	.+116    	; 0x2324 <__vector_125+0x14e>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    22b0:	80 e1       	ldi	r24, 0x10	; 16
    22b2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	0c df       	rcall	.-488    	; 0x20d2 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    22ba:	81 e8       	ldi	r24, 0x81	; 129
    22bc:	0a df       	rcall	.-492    	; 0x20d2 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	08 df       	rcall	.-496    	; 0x20d2 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    22c2:	82 e8       	ldi	r24, 0x82	; 130
    22c4:	06 df       	rcall	.-500    	; 0x20d2 <udd_ep_abort>
		}
#endif
		udc_reset();
    22c6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    22ca:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    22ce:	e0 ee       	ldi	r30, 0xE0	; 224
    22d0:	f2 e2       	ldi	r31, 0x22	; 34
    22d2:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    22d4:	96 e0       	ldi	r25, 0x06	; 6
    22d6:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    22d8:	83 e4       	ldi	r24, 0x43	; 67
    22da:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    22dc:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    22de:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    22e0:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    22e2:	89 e9       	ldi	r24, 0x99	; 153
    22e4:	92 e2       	ldi	r25, 0x22	; 34
    22e6:	80 8b       	std	Z+16, r24	; 0x10
    22e8:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    22ea:	a4 d9       	rcall	.-3256   	; 0x1634 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    22ec:	1b c0       	rjmp	.+54     	; 0x2324 <__vector_125+0x14e>
	}

	if (udd_is_suspend_event()) {
    22ee:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    22f2:	86 ff       	sbrs	r24, 6
    22f4:	07 c0       	rjmp	.+14     	; 0x2304 <__vector_125+0x12e>
		udd_ack_suspend_event();
    22f6:	80 e4       	ldi	r24, 0x40	; 64
    22f8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	62 d9       	rcall	.-3388   	; 0x15c4 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2300:	3e d1       	rcall	.+636    	; 0x257e <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2302:	10 c0       	rjmp	.+32     	; 0x2324 <__vector_125+0x14e>
	}

	if (udd_is_resume_event()) {
    2304:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2308:	85 ff       	sbrs	r24, 5
    230a:	0c c0       	rjmp	.+24     	; 0x2324 <__vector_125+0x14e>
		udd_ack_resume_event();
    230c:	80 e2       	ldi	r24, 0x20	; 32
    230e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	57 d9       	rcall	.-3410   	; 0x15c4 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2316:	34 d1       	rcall	.+616    	; 0x2580 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2318:	05 c0       	rjmp	.+10     	; 0x2324 <__vector_125+0x14e>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    231a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    231e:	84 fd       	sbrc	r24, 4
    2320:	c7 cf       	rjmp	.-114    	; 0x22b0 <__vector_125+0xda>
    2322:	e5 cf       	rjmp	.-54     	; 0x22ee <__vector_125+0x118>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2324:	ff 91       	pop	r31
    2326:	ef 91       	pop	r30
    2328:	bf 91       	pop	r27
    232a:	af 91       	pop	r26
    232c:	9f 91       	pop	r25
    232e:	8f 91       	pop	r24
    2330:	7f 91       	pop	r23
    2332:	6f 91       	pop	r22
    2334:	5f 91       	pop	r21
    2336:	4f 91       	pop	r20
    2338:	3f 91       	pop	r19
    233a:	2f 91       	pop	r18
    233c:	0f 91       	pop	r16
    233e:	0f 90       	pop	r0
    2340:	0b be       	out	0x3b, r0	; 59
    2342:	0f 90       	pop	r0
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	0f 90       	pop	r0
    2348:	1f 90       	pop	r1
    234a:	18 95       	reti

0000234c <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    234c:	1f 92       	push	r1
    234e:	0f 92       	push	r0
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	0f 92       	push	r0
    2354:	11 24       	eor	r1, r1
    2356:	0b b6       	in	r0, 0x3b	; 59
    2358:	0f 92       	push	r0
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	2f 93       	push	r18
    2360:	3f 93       	push	r19
    2362:	4f 93       	push	r20
    2364:	5f 93       	push	r21
    2366:	6f 93       	push	r22
    2368:	7f 93       	push	r23
    236a:	8f 93       	push	r24
    236c:	9f 93       	push	r25
    236e:	af 93       	push	r26
    2370:	bf 93       	push	r27
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	ef 93       	push	r30
    2378:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    237a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    237e:	81 fd       	sbrc	r24, 1
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2382:	51 da       	rcall	.-2910   	; 0x1826 <udd_ctrl_interrupt_tc_setup>
    2384:	81 11       	cpse	r24, r1
    2386:	c3 c0       	rjmp	.+390    	; 0x250e <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2388:	82 e0       	ldi	r24, 0x02	; 2
    238a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    238e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2392:	81 95       	neg	r24
    2394:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2396:	ec ee       	ldi	r30, 0xEC	; 236
    2398:	f2 e2       	ldi	r31, 0x22	; 34
    239a:	e8 1b       	sub	r30, r24
    239c:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    239e:	20 81       	ld	r18, Z
    23a0:	31 81       	ldd	r19, Z+1	; 0x01
    23a2:	2c 5e       	subi	r18, 0xEC	; 236
    23a4:	32 42       	sbci	r19, 0x22	; 34
    23a6:	36 95       	lsr	r19
    23a8:	27 95       	ror	r18
    23aa:	36 95       	lsr	r19
    23ac:	27 95       	ror	r18
    23ae:	36 95       	lsr	r19
    23b0:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    23b2:	82 2f       	mov	r24, r18
    23b4:	86 95       	lsr	r24
    23b6:	20 fd       	sbrc	r18, 0
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <__vector_126+0x72>
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <__vector_126+0x74>
    23be:	90 e8       	ldi	r25, 0x80	; 128
    23c0:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    23c2:	e8 2f       	mov	r30, r24
    23c4:	ef 70       	andi	r30, 0x0F	; 15
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	ee 0f       	add	r30, r30
    23ca:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    23cc:	28 2f       	mov	r18, r24
    23ce:	08 2e       	mov	r0, r24
    23d0:	00 0c       	add	r0, r0
    23d2:	33 0b       	sbc	r19, r19
    23d4:	22 27       	eor	r18, r18
    23d6:	33 0f       	add	r19, r19
    23d8:	22 1f       	adc	r18, r18
    23da:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    23dc:	e2 0f       	add	r30, r18
    23de:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    23e0:	df 01       	movw	r26, r30
    23e2:	aa 0f       	add	r26, r26
    23e4:	bb 1f       	adc	r27, r27
    23e6:	aa 0f       	add	r26, r26
    23e8:	bb 1f       	adc	r27, r27
    23ea:	aa 0f       	add	r26, r26
    23ec:	bb 1f       	adc	r27, r27
    23ee:	a0 52       	subi	r26, 0x20	; 32
    23f0:	bd 4d       	sbci	r27, 0xDD	; 221
    23f2:	1c 96       	adiw	r26, 0x0c	; 12
    23f4:	9c 91       	ld	r25, X
    23f6:	95 ff       	sbrs	r25, 5
    23f8:	8a c0       	rjmp	.+276    	; 0x250e <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    23fa:	ee 0f       	add	r30, r30
    23fc:	ff 1f       	adc	r31, r31
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	ee 0f       	add	r30, r30
    2404:	ff 1f       	adc	r31, r31
    2406:	e4 51       	subi	r30, 0x14	; 20
    2408:	fd 4d       	sbci	r31, 0xDD	; 221
    240a:	00 e2       	ldi	r16, 0x20	; 32
    240c:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    240e:	81 11       	cpse	r24, r1
    2410:	79 c0       	rjmp	.+242    	; 0x2504 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2412:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <udd_ep_control_state>
    2416:	84 30       	cpi	r24, 0x04	; 4
    2418:	19 f4       	brne	.+6      	; 0x2420 <__vector_126+0xd4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    241a:	4d d9       	rcall	.-3430   	; 0x16b6 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    241c:	0b d9       	rcall	.-3562   	; 0x1634 <udd_ctrl_init>
    241e:	77 c0       	rjmp	.+238    	; 0x250e <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2420:	00 91 ee 22 	lds	r16, 0x22EE	; 0x8022ee <udd_sram+0xe>
    2424:	10 91 ef 22 	lds	r17, 0x22EF	; 0x8022ef <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2428:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0xa>
    242c:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0xb>
    2430:	c0 91 d9 22 	lds	r28, 0x22D9	; 0x8022d9 <udd_ctrl_payload_nb_trans>
    2434:	d0 91 da 22 	lds	r29, 0x22DA	; 0x8022da <udd_ctrl_payload_nb_trans+0x1>
    2438:	9e 01       	movw	r18, r28
    243a:	20 0f       	add	r18, r16
    243c:	31 1f       	adc	r19, r17
    243e:	82 17       	cp	r24, r18
    2440:	93 07       	cpc	r25, r19
    2442:	18 f4       	brcc	.+6      	; 0x244a <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2444:	8c 01       	movw	r16, r24
    2446:	0c 1b       	sub	r16, r28
    2448:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    244a:	80 91 94 23 	lds	r24, 0x2394	; 0x802394 <udd_g_ctrlreq+0x8>
    244e:	90 91 95 23 	lds	r25, 0x2395	; 0x802395 <udd_g_ctrlreq+0x9>
    2452:	a8 01       	movw	r20, r16
    2454:	69 e9       	ldi	r22, 0x99	; 153
    2456:	72 e2       	ldi	r23, 0x22	; 34
    2458:	8c 0f       	add	r24, r28
    245a:	9d 1f       	adc	r25, r29
    245c:	f0 d1       	rcall	.+992    	; 0x283e <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    245e:	c0 0f       	add	r28, r16
    2460:	d1 1f       	adc	r29, r17
    2462:	c0 93 d9 22 	sts	0x22D9, r28	; 0x8022d9 <udd_ctrl_payload_nb_trans>
    2466:	d0 93 da 22 	sts	0x22DA, r29	; 0x8022da <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    246a:	00 34       	cpi	r16, 0x40	; 64
    246c:	11 05       	cpc	r17, r1
    246e:	69 f4       	brne	.+26     	; 0x248a <__vector_126+0x13e>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2470:	80 91 db 22 	lds	r24, 0x22DB	; 0x8022db <udd_ctrl_prev_payload_nb_trans>
    2474:	90 91 dc 22 	lds	r25, 0x22DC	; 0x8022dc <udd_ctrl_prev_payload_nb_trans+0x1>
    2478:	8c 0f       	add	r24, r28
    247a:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    247c:	20 91 92 23 	lds	r18, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    2480:	30 91 93 23 	lds	r19, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    2484:	82 17       	cp	r24, r18
    2486:	93 07       	cpc	r25, r19
    2488:	80 f0       	brcs	.+32     	; 0x24aa <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    248a:	ec e8       	ldi	r30, 0x8C	; 140
    248c:	f3 e2       	ldi	r31, 0x23	; 35
    248e:	c2 87       	std	Z+10, r28	; 0x0a
    2490:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2492:	06 84       	ldd	r0, Z+14	; 0x0e
    2494:	f7 85       	ldd	r31, Z+15	; 0x0f
    2496:	e0 2d       	mov	r30, r0
    2498:	30 97       	sbiw	r30, 0x00	; 0
    249a:	29 f0       	breq	.+10     	; 0x24a6 <__vector_126+0x15a>
			if (!udd_g_ctrlreq.over_under_run()) {
    249c:	19 95       	eicall
    249e:	81 11       	cpse	r24, r1
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <__vector_126+0x15a>
				// Stall ZLP
				udd_ctrl_stall_data();
    24a2:	ed d8       	rcall	.-3622   	; 0x167e <udd_ctrl_stall_data>
    24a4:	34 c0       	rjmp	.+104    	; 0x250e <__vector_126+0x1c2>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    24a6:	f9 d8       	rcall	.-3598   	; 0x169a <udd_ctrl_send_zlp_in>
    24a8:	32 c0       	rjmp	.+100    	; 0x250e <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    24aa:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0xa>
    24ae:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0xb>
    24b2:	c8 17       	cp	r28, r24
    24b4:	d9 07       	cpc	r29, r25
    24b6:	f9 f4       	brne	.+62     	; 0x24f6 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    24b8:	e0 91 9a 23 	lds	r30, 0x239A	; 0x80239a <udd_g_ctrlreq+0xe>
    24bc:	f0 91 9b 23 	lds	r31, 0x239B	; 0x80239b <udd_g_ctrlreq+0xf>
    24c0:	30 97       	sbiw	r30, 0x00	; 0
    24c2:	11 f4       	brne	.+4      	; 0x24c8 <__vector_126+0x17c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    24c4:	dc d8       	rcall	.-3656   	; 0x167e <udd_ctrl_stall_data>
    24c6:	23 c0       	rjmp	.+70     	; 0x250e <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    24c8:	19 95       	eicall
    24ca:	81 11       	cpse	r24, r1
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    24ce:	d7 d8       	rcall	.-3666   	; 0x167e <udd_ctrl_stall_data>
    24d0:	1e c0       	rjmp	.+60     	; 0x250e <__vector_126+0x1c2>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    24d2:	20 91 db 22 	lds	r18, 0x22DB	; 0x8022db <udd_ctrl_prev_payload_nb_trans>
    24d6:	30 91 dc 22 	lds	r19, 0x22DC	; 0x8022dc <udd_ctrl_prev_payload_nb_trans+0x1>
    24da:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <udd_ctrl_payload_nb_trans>
    24de:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <udd_ctrl_payload_nb_trans+0x1>
    24e2:	82 0f       	add	r24, r18
    24e4:	93 1f       	adc	r25, r19
    24e6:	80 93 db 22 	sts	0x22DB, r24	; 0x8022db <udd_ctrl_prev_payload_nb_trans>
    24ea:	90 93 dc 22 	sts	0x22DC, r25	; 0x8022dc <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    24ee:	10 92 d9 22 	sts	0x22D9, r1	; 0x8022d9 <udd_ctrl_payload_nb_trans>
    24f2:	10 92 da 22 	sts	0x22DA, r1	; 0x8022da <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    24f6:	ec ee       	ldi	r30, 0xEC	; 236
    24f8:	f2 e2       	ldi	r31, 0x22	; 34
    24fa:	02 e0       	ldi	r16, 0x02	; 2
    24fc:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    24fe:	00 e2       	ldi	r16, 0x20	; 32
    2500:	06 93       	lac	Z, r16
    2502:	05 c0       	rjmp	.+10     	; 0x250e <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2504:	80 38       	cpi	r24, 0x80	; 128
    2506:	11 f4       	brne	.+4      	; 0x250c <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    2508:	de d8       	rcall	.-3652   	; 0x16c6 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    250a:	01 c0       	rjmp	.+2      	; 0x250e <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    250c:	fd d9       	rcall	.-3078   	; 0x1908 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    250e:	ff 91       	pop	r31
    2510:	ef 91       	pop	r30
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	bf 91       	pop	r27
    2518:	af 91       	pop	r26
    251a:	9f 91       	pop	r25
    251c:	8f 91       	pop	r24
    251e:	7f 91       	pop	r23
    2520:	6f 91       	pop	r22
    2522:	5f 91       	pop	r21
    2524:	4f 91       	pop	r20
    2526:	3f 91       	pop	r19
    2528:	2f 91       	pop	r18
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	0f 90       	pop	r0
    2530:	0b be       	out	0x3b, r0	; 59
    2532:	0f 90       	pop	r0
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	0f 90       	pop	r0
    2538:	1f 90       	pop	r1
    253a:	18 95       	reti

0000253c <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
	sysclk_init();
    253c:	0e 94 4e 01 	call	0x29c	; 0x29c <sysclk_init>
	irq_initialize_vectors();
    2540:	87 e0       	ldi	r24, 0x07	; 7
    2542:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    2546:	78 94       	sei
	board_init();
    2548:	0e 94 a0 0a 	call	0x1540	; 0x1540 <board_init>
	udc_start();
    254c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <udc_start>
	
	while (true)
	{	
		while(!udi_cdc_is_rx_ready()){}	
    2550:	0e 94 1a 05 	call	0xa34	; 0xa34 <udi_cdc_is_rx_ready>
    2554:	88 23       	and	r24, r24
    2556:	e1 f3       	breq	.-8      	; 0x2550 <main+0x14>
		udi_cdc_read_buf(message, sizeof(message));
    2558:	64 e6       	ldi	r22, 0x64	; 100
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	81 e2       	ldi	r24, 0x21	; 33
    255e:	93 e2       	ldi	r25, 0x23	; 35
    2560:	0e 94 dd 05 	call	0xbba	; 0xbba <udi_cdc_read_buf>
		
		//while(!udi_cdc_is_tx_ready()){}
		//udi_cdc_write_buf(temp, sizeof(temp));
		
		while(!udi_cdc_is_tx_ready()){}
    2564:	0e 94 19 06 	call	0xc32	; 0xc32 <udi_cdc_is_tx_ready>
    2568:	88 23       	and	r24, r24
    256a:	e1 f3       	breq	.-8      	; 0x2564 <main+0x28>
		udi_cdc_write_buf(temp, sizeof(temp));
    256c:	62 e0       	ldi	r22, 0x02	; 2
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <temp>
    2574:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <temp+0x1>
    2578:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <udi_cdc_write_buf>
		
	}
    257c:	e9 cf       	rjmp	.-46     	; 0x2550 <main+0x14>

0000257e <main_suspend_action>:
}

void main_suspend_action(void)
{
    257e:	08 95       	ret

00002580 <main_resume_action>:
	//ui_powerdown();
}

void main_resume_action(void)
{
    2580:	08 95       	ret

00002582 <main_sof_action>:
	//ui_wakeup();
}

void main_sof_action(void)
{
	if (!main_b_cdc_enable)
    2582:	80 91 85 23 	lds	r24, 0x2385	; 0x802385 <main_b_cdc_enable>
    2586:	88 23       	and	r24, r24
    2588:	19 f0       	breq	.+6      	; 0x2590 <main_sof_action+0xe>
		return;
	ui_process(udd_get_frame_number());
    258a:	f3 db       	rcall	.-2074   	; 0x1d72 <udd_get_frame_number>
    258c:	0c 94 41 01 	jmp	0x282	; 0x282 <ui_process>
    2590:	08 95       	ret

00002592 <main_cdc_enable>:
}
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    2592:	91 e0       	ldi	r25, 0x01	; 1
    2594:	90 93 85 23 	sts	0x2385, r25	; 0x802385 <main_b_cdc_enable>
	// Open communication
	uart_open(port);
    2598:	79 d0       	rcall	.+242    	; 0x268c <uart_open>
	return true;
}
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	08 95       	ret

0000259e <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    259e:	10 92 85 23 	sts	0x2385, r1	; 0x802385 <main_b_cdc_enable>
	// Close communication
	uart_close(port);
    25a2:	85 c0       	rjmp	.+266    	; 0x26ae <uart_close>
    25a4:	08 95       	ret

000025a6 <main_cdc_set_dtr>:
}

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) {
    25a6:	66 23       	and	r22, r22
    25a8:	19 f0       	breq	.+6      	; 0x25b0 <main_cdc_set_dtr+0xa>
		// Host terminal has open COM
		ui_com_open(port);
    25aa:	0c 94 27 01 	jmp	0x24e	; 0x24e <ui_com_open>
    25ae:	08 95       	ret
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    25b0:	0c 94 2b 01 	jmp	0x256	; 0x256 <ui_com_close>
    25b4:	08 95       	ret

000025b6 <uart_config>:
#include "uart.h"
#include "main.h"
#include "ui.h"

void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    25b6:	ff 92       	push	r15
    25b8:	0f 93       	push	r16
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	8b 01       	movw	r16, r22
	uint8_t reg_ctrlc;
	uint16_t bsel;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;

	switch (cfg->bCharFormat) {
    25c2:	fb 01       	movw	r30, r22
    25c4:	84 81       	ldd	r24, Z+4	; 0x04
    25c6:	82 30       	cpi	r24, 0x02	; 2
    25c8:	21 f4       	brne	.+8      	; 0x25d2 <uart_config+0x1c>
	case CDC_STOP_BITS_2:
		reg_ctrlc |= USART_SBMODE_bm;
    25ca:	68 94       	set
    25cc:	ff 24       	eor	r15, r15
    25ce:	f3 f8       	bld	r15, 3
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <uart_config+0x1e>
void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
	uint8_t reg_ctrlc;
	uint16_t bsel;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;
    25d2:	f1 2c       	mov	r15, r1
	default:
		// Default stop bit = 1 stop bit
		break;
	}

	switch (cfg->bParityType) {
    25d4:	f8 01       	movw	r30, r16
    25d6:	85 81       	ldd	r24, Z+5	; 0x05
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	31 f0       	breq	.+12     	; 0x25e8 <uart_config+0x32>
    25dc:	82 30       	cpi	r24, 0x02	; 2
    25de:	39 f4       	brne	.+14     	; 0x25ee <uart_config+0x38>
	case CDC_PAR_EVEN:
		reg_ctrlc |= USART_PMODE_EVEN_gc;
    25e0:	ff 2d       	mov	r31, r15
    25e2:	f0 62       	ori	r31, 0x20	; 32
    25e4:	ff 2e       	mov	r15, r31
		break;
    25e6:	03 c0       	rjmp	.+6      	; 0x25ee <uart_config+0x38>
	case CDC_PAR_ODD:
		reg_ctrlc |= USART_PMODE_ODD_gc;
    25e8:	8f 2d       	mov	r24, r15
    25ea:	80 63       	ori	r24, 0x30	; 48
    25ec:	f8 2e       	mov	r15, r24
	case CDC_PAR_NONE:
		reg_ctrlc |= USART_PMODE_DISABLED_gc;
		break;
	}

	switch (cfg->bDataBits) {
    25ee:	f8 01       	movw	r30, r16
    25f0:	86 81       	ldd	r24, Z+6	; 0x06
    25f2:	86 30       	cpi	r24, 0x06	; 6
    25f4:	49 f0       	breq	.+18     	; 0x2608 <uart_config+0x52>
    25f6:	18 f4       	brcc	.+6      	; 0x25fe <uart_config+0x48>
    25f8:	85 30       	cpi	r24, 0x05	; 5
    25fa:	a9 f0       	breq	.+42     	; 0x2626 <uart_config+0x70>
    25fc:	0d c0       	rjmp	.+26     	; 0x2618 <uart_config+0x62>
    25fe:	87 30       	cpi	r24, 0x07	; 7
    2600:	39 f0       	breq	.+14     	; 0x2610 <uart_config+0x5a>
    2602:	89 30       	cpi	r24, 0x09	; 9
    2604:	69 f0       	breq	.+26     	; 0x2620 <uart_config+0x6a>
    2606:	08 c0       	rjmp	.+16     	; 0x2618 <uart_config+0x62>
	case 5:
		reg_ctrlc |= USART_CHSIZE_5BIT_gc;
		break;
	case 6:
		reg_ctrlc |= USART_CHSIZE_6BIT_gc;
    2608:	ff 2d       	mov	r31, r15
    260a:	f1 60       	ori	r31, 0x01	; 1
    260c:	ff 2e       	mov	r15, r31
		break;
    260e:	0b c0       	rjmp	.+22     	; 0x2626 <uart_config+0x70>
	case 7:
		reg_ctrlc |= USART_CHSIZE_7BIT_gc;
    2610:	8f 2d       	mov	r24, r15
    2612:	82 60       	ori	r24, 0x02	; 2
    2614:	f8 2e       	mov	r15, r24
		break;
    2616:	07 c0       	rjmp	.+14     	; 0x2626 <uart_config+0x70>
	default:
	case 8:
		reg_ctrlc |= USART_CHSIZE_8BIT_gc;
    2618:	ef 2d       	mov	r30, r15
    261a:	e3 60       	ori	r30, 0x03	; 3
    261c:	fe 2e       	mov	r15, r30
		break;
    261e:	03 c0       	rjmp	.+6      	; 0x2626 <uart_config+0x70>
	case 9:
		reg_ctrlc |= USART_CHSIZE_9BIT_gc;
    2620:	ff 2d       	mov	r31, r15
    2622:	f7 60       	ori	r31, 0x07	; 7
    2624:	ff 2e       	mov	r15, r31
		break;
	}

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    2626:	60 e1       	ldi	r22, 0x10	; 16
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
	// Set configuration
	USART.CTRLC = reg_ctrlc;
    262e:	c0 ea       	ldi	r28, 0xA0	; 160
    2630:	d8 e0       	ldi	r29, 0x08	; 8
    2632:	fd 82       	std	Y+5, r15	; 0x05
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
    2634:	f8 01       	movw	r30, r16
    2636:	80 81       	ld	r24, Z
    2638:	91 81       	ldd	r25, Z+1	; 0x01
    263a:	a2 81       	ldd	r26, Z+2	; 0x02
    263c:	b3 81       	ldd	r27, Z+3	; 0x03
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	aa 1f       	adc	r26, r26
    2644:	bb 1f       	adc	r27, r27
    2646:	88 0f       	add	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	aa 1f       	adc	r26, r26
    264c:	bb 1f       	adc	r27, r27
    264e:	9c 01       	movw	r18, r24
    2650:	ad 01       	movw	r20, r26
    2652:	22 0f       	add	r18, r18
    2654:	33 1f       	adc	r19, r19
    2656:	44 1f       	adc	r20, r20
    2658:	55 1f       	adc	r21, r21

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
	// Set configuration
	USART.CTRLC = reg_ctrlc;
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	7c e6       	ldi	r23, 0x6C	; 108
    265e:	8c ed       	ldi	r24, 0xDC	; 220
    2660:	92 e0       	ldi	r25, 0x02	; 2
    2662:	c3 d0       	rcall	.+390    	; 0x27ea <__udivmodsi4>
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
    2664:	da 01       	movw	r26, r20
    2666:	c9 01       	movw	r24, r18
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	a1 1d       	adc	r26, r1
    266c:	b1 1d       	adc	r27, r1
    266e:	b6 95       	lsr	r27
    2670:	a7 95       	ror	r26
    2672:	97 95       	ror	r25
    2674:	87 95       	ror	r24

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
	// Set configuration
	USART.CTRLC = reg_ctrlc;
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
    2676:	9c 01       	movw	r18, r24
    2678:	21 50       	subi	r18, 0x01	; 1
    267a:	31 09       	sbc	r19, r1
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
	USART.BAUDCTRLA = bsel & 0xFF;
    267c:	2e 83       	std	Y+6, r18	; 0x06
	USART.BAUDCTRLB = bsel >> 8;
    267e:	3f 83       	std	Y+7, r19	; 0x07
}
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	ff 90       	pop	r15
    268a:	08 95       	ret

0000268c <uart_open>:

void uart_open(uint8_t port)
{
	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    268c:	60 e1       	ldi	r22, 0x10	; 16
    268e:	83 e0       	ldi	r24, 0x03	; 3
    2690:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
	// Open UART communication
	USART_PORT.DIRSET = USART_PORT_PIN_TX; // TX as output.
    2694:	e0 e4       	ldi	r30, 0x40	; 64
    2696:	f6 e0       	ldi	r31, 0x06	; 6
    2698:	88 e0       	ldi	r24, 0x08	; 8
    269a:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR = USART_PORT_PIN_RX; // RX as input.
    269c:	84 e0       	ldi	r24, 0x04	; 4
    269e:	82 83       	std	Z+2, r24	; 0x02

	// Enable both RX and TX
	USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm;
    26a0:	e0 ea       	ldi	r30, 0xA0	; 160
    26a2:	f8 e0       	ldi	r31, 0x08	; 8
    26a4:	8c e1       	ldi	r24, 0x1C	; 28
    26a6:	84 83       	std	Z+4, r24	; 0x04
	// Enable interrupt with priority higher than USB
	USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    26a8:	80 e3       	ldi	r24, 0x30	; 48
    26aa:	83 83       	std	Z+3, r24	; 0x03
    26ac:	08 95       	ret

000026ae <uart_close>:
			USART_DREINTLVL_OFF_gc;
}

void uart_close(uint8_t port)
{
	sysclk_disable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    26ae:	60 e1       	ldi	r22, 0x10	; 16
    26b0:	83 e0       	ldi	r24, 0x03	; 3
    26b2:	0e 94 df 01 	call	0x3be	; 0x3be <sysclk_disable_module>
	// Disable interrupts
	USART.CTRLA = 0;
    26b6:	e0 ea       	ldi	r30, 0xA0	; 160
    26b8:	f8 e0       	ldi	r31, 0x08	; 8
    26ba:	13 82       	std	Z+3, r1	; 0x03
	// Close RS232 communication
	USART.CTRLB = 0;
    26bc:	14 82       	std	Z+4, r1	; 0x04
    26be:	08 95       	ret

000026c0 <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	// If UART is open
	if (USART.CTRLA!=0) {
    26c0:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    26c4:	88 23       	and	r24, r24
    26c6:	19 f0       	breq	.+6      	; 0x26ce <uart_rx_notify+0xe>
		// Enable UART TX interrupt to send values
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    26c8:	83 e3       	ldi	r24, 0x33	; 51
    26ca:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    26ce:	08 95       	ret

000026d0 <__vector_25>:
	}
}


ISR(USART_RX_Vect)
{
    26d0:	1f 92       	push	r1
    26d2:	0f 92       	push	r0
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	0f 92       	push	r0
    26d8:	11 24       	eor	r1, r1
    26da:	0b b6       	in	r0, 0x3b	; 59
    26dc:	0f 92       	push	r0
    26de:	2f 93       	push	r18
    26e0:	3f 93       	push	r19
    26e2:	4f 93       	push	r20
    26e4:	5f 93       	push	r21
    26e6:	6f 93       	push	r22
    26e8:	7f 93       	push	r23
    26ea:	8f 93       	push	r24
    26ec:	9f 93       	push	r25
    26ee:	af 93       	push	r26
    26f0:	bf 93       	push	r27
    26f2:	cf 93       	push	r28
    26f4:	ef 93       	push	r30
    26f6:	ff 93       	push	r31
	uint8_t value;

	// Data received
	ui_com_tx_start();
    26f8:	0e 94 37 01 	call	0x26e	; 0x26e <ui_com_tx_start>

	if (0 != (USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))) {
    26fc:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
    2700:	88 71       	andi	r24, 0x18	; 24
    2702:	21 f0       	breq	.+8      	; 0x270c <__vector_25+0x3c>
		udi_cdc_signal_framing_error();
    2704:	0e 94 36 04 	call	0x86c	; 0x86c <udi_cdc_signal_framing_error>
		ui_com_error();
    2708:	0e 94 3f 01 	call	0x27e	; 0x27e <ui_com_error>
	}

	// Transfer UART RX fifo to CDC TX
	value = USART.DATA;
    270c:	c0 91 a0 08 	lds	r28, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	if (!udi_cdc_is_tx_ready()) {
    2710:	0e 94 19 06 	call	0xc32	; 0xc32 <udi_cdc_is_tx_ready>
    2714:	81 11       	cpse	r24, r1
    2716:	05 c0       	rjmp	.+10     	; 0x2722 <__vector_25+0x52>
		// Fifo full
		udi_cdc_signal_overrun();
    2718:	0e 94 3c 04 	call	0x878	; 0x878 <udi_cdc_signal_overrun>
		ui_com_overflow();
    271c:	0e 94 40 01 	call	0x280	; 0x280 <ui_com_overflow>
    2720:	04 c0       	rjmp	.+8      	; 0x272a <__vector_25+0x5a>
	}else{
		udi_cdc_putc(value);
    2722:	8c 2f       	mov	r24, r28
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <udi_cdc_putc>
	}
	ui_com_tx_stop();
    272a:	0e 94 3b 01 	call	0x276	; 0x276 <ui_com_tx_stop>
}
    272e:	ff 91       	pop	r31
    2730:	ef 91       	pop	r30
    2732:	cf 91       	pop	r28
    2734:	bf 91       	pop	r27
    2736:	af 91       	pop	r26
    2738:	9f 91       	pop	r25
    273a:	8f 91       	pop	r24
    273c:	7f 91       	pop	r23
    273e:	6f 91       	pop	r22
    2740:	5f 91       	pop	r21
    2742:	4f 91       	pop	r20
    2744:	3f 91       	pop	r19
    2746:	2f 91       	pop	r18
    2748:	0f 90       	pop	r0
    274a:	0b be       	out	0x3b, r0	; 59
    274c:	0f 90       	pop	r0
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	0f 90       	pop	r0
    2752:	1f 90       	pop	r1
    2754:	18 95       	reti

00002756 <__vector_26>:

ISR(USART_DRE_Vect)
{
    2756:	1f 92       	push	r1
    2758:	0f 92       	push	r0
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	0f 92       	push	r0
    275e:	11 24       	eor	r1, r1
    2760:	0b b6       	in	r0, 0x3b	; 59
    2762:	0f 92       	push	r0
    2764:	2f 93       	push	r18
    2766:	3f 93       	push	r19
    2768:	4f 93       	push	r20
    276a:	5f 93       	push	r21
    276c:	6f 93       	push	r22
    276e:	7f 93       	push	r23
    2770:	8f 93       	push	r24
    2772:	9f 93       	push	r25
    2774:	af 93       	push	r26
    2776:	bf 93       	push	r27
    2778:	ef 93       	push	r30
    277a:	ff 93       	push	r31
	// Data send
	if (udi_cdc_is_rx_ready()) {
    277c:	0e 94 1a 05 	call	0xa34	; 0xa34 <udi_cdc_is_rx_ready>
    2780:	88 23       	and	r24, r24
    2782:	39 f0       	breq	.+14     	; 0x2792 <__vector_26+0x3c>
		// Transmit next data
		ui_com_rx_start();
    2784:	0e 94 2f 01 	call	0x25e	; 0x25e <ui_com_rx_start>
		USART.DATA = udi_cdc_getc();
    2788:	0e 94 71 05 	call	0xae2	; 0xae2 <udi_cdc_getc>
    278c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    2790:	05 c0       	rjmp	.+10     	; 0x279c <__vector_26+0x46>
	} else {
		// Fifo empty then Stop UART transmission
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc |
    2792:	80 e3       	ldi	r24, 0x30	; 48
    2794:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
				(register8_t) USART_DREINTLVL_OFF_gc;
		ui_com_rx_stop();
    2798:	0e 94 33 01 	call	0x266	; 0x266 <ui_com_rx_stop>
	}
}
    279c:	ff 91       	pop	r31
    279e:	ef 91       	pop	r30
    27a0:	bf 91       	pop	r27
    27a2:	af 91       	pop	r26
    27a4:	9f 91       	pop	r25
    27a6:	8f 91       	pop	r24
    27a8:	7f 91       	pop	r23
    27aa:	6f 91       	pop	r22
    27ac:	5f 91       	pop	r21
    27ae:	4f 91       	pop	r20
    27b0:	3f 91       	pop	r19
    27b2:	2f 91       	pop	r18
    27b4:	0f 90       	pop	r0
    27b6:	0b be       	out	0x3b, r0	; 59
    27b8:	0f 90       	pop	r0
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	0f 90       	pop	r0
    27be:	1f 90       	pop	r1
    27c0:	18 95       	reti

000027c2 <__udivmodhi4>:
    27c2:	aa 1b       	sub	r26, r26
    27c4:	bb 1b       	sub	r27, r27
    27c6:	51 e1       	ldi	r21, 0x11	; 17
    27c8:	07 c0       	rjmp	.+14     	; 0x27d8 <__udivmodhi4_ep>

000027ca <__udivmodhi4_loop>:
    27ca:	aa 1f       	adc	r26, r26
    27cc:	bb 1f       	adc	r27, r27
    27ce:	a6 17       	cp	r26, r22
    27d0:	b7 07       	cpc	r27, r23
    27d2:	10 f0       	brcs	.+4      	; 0x27d8 <__udivmodhi4_ep>
    27d4:	a6 1b       	sub	r26, r22
    27d6:	b7 0b       	sbc	r27, r23

000027d8 <__udivmodhi4_ep>:
    27d8:	88 1f       	adc	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	5a 95       	dec	r21
    27de:	a9 f7       	brne	.-22     	; 0x27ca <__udivmodhi4_loop>
    27e0:	80 95       	com	r24
    27e2:	90 95       	com	r25
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	08 95       	ret

000027ea <__udivmodsi4>:
    27ea:	a1 e2       	ldi	r26, 0x21	; 33
    27ec:	1a 2e       	mov	r1, r26
    27ee:	aa 1b       	sub	r26, r26
    27f0:	bb 1b       	sub	r27, r27
    27f2:	fd 01       	movw	r30, r26
    27f4:	0d c0       	rjmp	.+26     	; 0x2810 <__udivmodsi4_ep>

000027f6 <__udivmodsi4_loop>:
    27f6:	aa 1f       	adc	r26, r26
    27f8:	bb 1f       	adc	r27, r27
    27fa:	ee 1f       	adc	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	a2 17       	cp	r26, r18
    2800:	b3 07       	cpc	r27, r19
    2802:	e4 07       	cpc	r30, r20
    2804:	f5 07       	cpc	r31, r21
    2806:	20 f0       	brcs	.+8      	; 0x2810 <__udivmodsi4_ep>
    2808:	a2 1b       	sub	r26, r18
    280a:	b3 0b       	sbc	r27, r19
    280c:	e4 0b       	sbc	r30, r20
    280e:	f5 0b       	sbc	r31, r21

00002810 <__udivmodsi4_ep>:
    2810:	66 1f       	adc	r22, r22
    2812:	77 1f       	adc	r23, r23
    2814:	88 1f       	adc	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	1a 94       	dec	r1
    281a:	69 f7       	brne	.-38     	; 0x27f6 <__udivmodsi4_loop>
    281c:	60 95       	com	r22
    281e:	70 95       	com	r23
    2820:	80 95       	com	r24
    2822:	90 95       	com	r25
    2824:	9b 01       	movw	r18, r22
    2826:	ac 01       	movw	r20, r24
    2828:	bd 01       	movw	r22, r26
    282a:	cf 01       	movw	r24, r30
    282c:	08 95       	ret

0000282e <__tablejump2__>:
    282e:	ee 0f       	add	r30, r30
    2830:	ff 1f       	adc	r31, r31
    2832:	88 1f       	adc	r24, r24
    2834:	8b bf       	out	0x3b, r24	; 59
    2836:	07 90       	elpm	r0, Z+
    2838:	f6 91       	elpm	r31, Z
    283a:	e0 2d       	mov	r30, r0
    283c:	19 94       	eijmp

0000283e <memcpy>:
    283e:	fb 01       	movw	r30, r22
    2840:	dc 01       	movw	r26, r24
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <memcpy+0xa>
    2844:	01 90       	ld	r0, Z+
    2846:	0d 92       	st	X+, r0
    2848:	41 50       	subi	r20, 0x01	; 1
    284a:	50 40       	sbci	r21, 0x00	; 0
    284c:	d8 f7       	brcc	.-10     	; 0x2844 <memcpy+0x6>
    284e:	08 95       	ret

00002850 <_exit>:
    2850:	f8 94       	cli

00002852 <__stop_program>:
    2852:	ff cf       	rjmp	.-2      	; 0x2852 <__stop_program>


DEVICE_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00802000  000028a4  00002938  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027c  008020cc  008020cc  00002a04  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000508  00000000  00000000  00002a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b401  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004ad5  00000000  00000000  0000e381  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000076ee  00000000  00000000  00012e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cec  00000000  00000000  0001a544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00039dd5  00000000  00000000  0001b230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000320f  00000000  00000000  00055005  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000468  00000000  00000000  00058218  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000031ae  00000000  00000000  00058680  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c1       	rjmp	.+550    	; 0x24c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c1       	rjmp	.+530    	; 0x24c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c1       	rjmp	.+526    	; 0x24c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c1       	rjmp	.+522    	; 0x24c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c1       	rjmp	.+518    	; 0x24c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c1       	rjmp	.+514    	; 0x24c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c0       	rjmp	.+510    	; 0x24c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c0       	rjmp	.+506    	; 0x24c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c0       	rjmp	.+502    	; 0x24c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c0       	rjmp	.+498    	; 0x24c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c0       	rjmp	.+494    	; 0x24c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__vector_25>
      68:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__vector_26>
      6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c0       	rjmp	.+450    	; 0x24c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
      96:	00 00       	nop
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c7 c0       	rjmp	.+398    	; 0x24c <__bad_interrupt>
      be:	00 00       	nop
      c0:	c5 c0       	rjmp	.+394    	; 0x24c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c3 c0       	rjmp	.+390    	; 0x24c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c1 c0       	rjmp	.+386    	; 0x24c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bf c0       	rjmp	.+382    	; 0x24c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bd c0       	rjmp	.+378    	; 0x24c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bb c0       	rjmp	.+374    	; 0x24c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b9 c0       	rjmp	.+370    	; 0x24c <__bad_interrupt>
      da:	00 00       	nop
      dc:	b7 c0       	rjmp	.+366    	; 0x24c <__bad_interrupt>
      de:	00 00       	nop
      e0:	b5 c0       	rjmp	.+362    	; 0x24c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b1 c0       	rjmp	.+354    	; 0x24c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	af c0       	rjmp	.+350    	; 0x24c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ad c0       	rjmp	.+346    	; 0x24c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ab c0       	rjmp	.+342    	; 0x24c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a9 c0       	rjmp	.+338    	; 0x24c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a7 c0       	rjmp	.+334    	; 0x24c <__bad_interrupt>
      fe:	00 00       	nop
     100:	a5 c0       	rjmp	.+330    	; 0x24c <__bad_interrupt>
     102:	00 00       	nop
     104:	a3 c0       	rjmp	.+326    	; 0x24c <__bad_interrupt>
     106:	00 00       	nop
     108:	a1 c0       	rjmp	.+322    	; 0x24c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9f c0       	rjmp	.+318    	; 0x24c <__bad_interrupt>
     10e:	00 00       	nop
     110:	9d c0       	rjmp	.+314    	; 0x24c <__bad_interrupt>
     112:	00 00       	nop
     114:	9b c0       	rjmp	.+310    	; 0x24c <__bad_interrupt>
     116:	00 00       	nop
     118:	99 c0       	rjmp	.+306    	; 0x24c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	97 c0       	rjmp	.+302    	; 0x24c <__bad_interrupt>
     11e:	00 00       	nop
     120:	95 c0       	rjmp	.+298    	; 0x24c <__bad_interrupt>
     122:	00 00       	nop
     124:	93 c0       	rjmp	.+294    	; 0x24c <__bad_interrupt>
     126:	00 00       	nop
     128:	91 c0       	rjmp	.+290    	; 0x24c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8f c0       	rjmp	.+286    	; 0x24c <__bad_interrupt>
     12e:	00 00       	nop
     130:	8d c0       	rjmp	.+282    	; 0x24c <__bad_interrupt>
     132:	00 00       	nop
     134:	8b c0       	rjmp	.+278    	; 0x24c <__bad_interrupt>
     136:	00 00       	nop
     138:	89 c0       	rjmp	.+274    	; 0x24c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	87 c0       	rjmp	.+270    	; 0x24c <__bad_interrupt>
     13e:	00 00       	nop
     140:	85 c0       	rjmp	.+266    	; 0x24c <__bad_interrupt>
     142:	00 00       	nop
     144:	83 c0       	rjmp	.+262    	; 0x24c <__bad_interrupt>
     146:	00 00       	nop
     148:	81 c0       	rjmp	.+258    	; 0x24c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7f c0       	rjmp	.+254    	; 0x24c <__bad_interrupt>
     14e:	00 00       	nop
     150:	7d c0       	rjmp	.+250    	; 0x24c <__bad_interrupt>
     152:	00 00       	nop
     154:	7b c0       	rjmp	.+246    	; 0x24c <__bad_interrupt>
     156:	00 00       	nop
     158:	79 c0       	rjmp	.+242    	; 0x24c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	77 c0       	rjmp	.+238    	; 0x24c <__bad_interrupt>
     15e:	00 00       	nop
     160:	75 c0       	rjmp	.+234    	; 0x24c <__bad_interrupt>
     162:	00 00       	nop
     164:	73 c0       	rjmp	.+230    	; 0x24c <__bad_interrupt>
     166:	00 00       	nop
     168:	71 c0       	rjmp	.+226    	; 0x24c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6f c0       	rjmp	.+222    	; 0x24c <__bad_interrupt>
     16e:	00 00       	nop
     170:	6d c0       	rjmp	.+218    	; 0x24c <__bad_interrupt>
     172:	00 00       	nop
     174:	6b c0       	rjmp	.+214    	; 0x24c <__bad_interrupt>
     176:	00 00       	nop
     178:	69 c0       	rjmp	.+210    	; 0x24c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	67 c0       	rjmp	.+206    	; 0x24c <__bad_interrupt>
     17e:	00 00       	nop
     180:	65 c0       	rjmp	.+202    	; 0x24c <__bad_interrupt>
     182:	00 00       	nop
     184:	63 c0       	rjmp	.+198    	; 0x24c <__bad_interrupt>
     186:	00 00       	nop
     188:	61 c0       	rjmp	.+194    	; 0x24c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5f c0       	rjmp	.+190    	; 0x24c <__bad_interrupt>
     18e:	00 00       	nop
     190:	5d c0       	rjmp	.+186    	; 0x24c <__bad_interrupt>
     192:	00 00       	nop
     194:	5b c0       	rjmp	.+182    	; 0x24c <__bad_interrupt>
     196:	00 00       	nop
     198:	59 c0       	rjmp	.+178    	; 0x24c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	57 c0       	rjmp	.+174    	; 0x24c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	55 c0       	rjmp	.+170    	; 0x24c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	53 c0       	rjmp	.+166    	; 0x24c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	51 c0       	rjmp	.+162    	; 0x24c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4f c0       	rjmp	.+158    	; 0x24c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4d c0       	rjmp	.+154    	; 0x24c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4b c0       	rjmp	.+150    	; 0x24c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	49 c0       	rjmp	.+146    	; 0x24c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	47 c0       	rjmp	.+142    	; 0x24c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	45 c0       	rjmp	.+138    	; 0x24c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	43 c0       	rjmp	.+134    	; 0x24c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	41 c0       	rjmp	.+130    	; 0x24c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3f c0       	rjmp	.+126    	; 0x24c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3d c0       	rjmp	.+122    	; 0x24c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3b c0       	rjmp	.+118    	; 0x24c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	39 c0       	rjmp	.+114    	; 0x24c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	37 c0       	rjmp	.+110    	; 0x24c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	35 c0       	rjmp	.+106    	; 0x24c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	33 c0       	rjmp	.+102    	; 0x24c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	31 c0       	rjmp	.+98     	; 0x24c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2f c0       	rjmp	.+94     	; 0x24c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2d c0       	rjmp	.+90     	; 0x24c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__vector_125>
     1f8:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__vector_126>
     1fc:	fe 0b       	sbc	r31, r30
     1fe:	01 0c       	add	r0, r1
     200:	04 0c       	add	r0, r4
     202:	07 0c       	add	r0, r7
     204:	0a 0c       	add	r0, r10
     206:	0d 0c       	add	r0, r13
     208:	10 0c       	add	r1, r0

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e5       	ldi	r29, 0x5F	; 95
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
     21a:	10 e2       	ldi	r17, 0x20	; 32
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	e4 ea       	ldi	r30, 0xA4	; 164
     222:	f8 e2       	ldi	r31, 0x28	; 40
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	ac 3c       	cpi	r26, 0xCC	; 204
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	23 e2       	ldi	r18, 0x23	; 35
     236:	ac ec       	ldi	r26, 0xCC	; 204
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	a8 34       	cpi	r26, 0x48	; 72
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 bc 12 	call	0x2578	; 0x2578 <main>
     248:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <_exit>

0000024c <__bad_interrupt>:
     24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <ui_init>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     24e:	e0 ee       	ldi	r30, 0xE0	; 224
     250:	f7 e0       	ldi	r31, 0x07	; 7
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	85 83       	std	Z+5, r24	; 0x05
     25a:	e0 e6       	ldi	r30, 0x60	; 96
     25c:	f6 e0       	ldi	r31, 0x06	; 6
     25e:	80 e1       	ldi	r24, 0x10	; 16
     260:	85 83       	std	Z+5, r24	; 0x05
     262:	80 e2       	ldi	r24, 0x20	; 32
     264:	85 83       	std	Z+5, r24	; 0x05
     266:	08 95       	ret

00000268 <ui_powerdown>:
     268:	e0 ee       	ldi	r30, 0xE0	; 224
     26a:	f7 e0       	ldi	r31, 0x07	; 7
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	85 83       	std	Z+5, r24	; 0x05
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	85 83       	std	Z+5, r24	; 0x05
     274:	e0 e6       	ldi	r30, 0x60	; 96
     276:	f6 e0       	ldi	r31, 0x06	; 6
     278:	80 e1       	ldi	r24, 0x10	; 16
     27a:	85 83       	std	Z+5, r24	; 0x05
     27c:	80 e2       	ldi	r24, 0x20	; 32
     27e:	85 83       	std	Z+5, r24	; 0x05
     280:	08 95       	ret

00000282 <ui_wakeup>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
     288:	08 95       	ret

0000028a <ui_com_open>:
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
     290:	08 95       	ret

00000292 <ui_com_close>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
     298:	08 95       	ret

0000029a <ui_com_rx_start>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     29a:	80 e2       	ldi	r24, 0x20	; 32
     29c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     2a0:	08 95       	ret

000002a2 <ui_com_rx_stop>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     2a2:	80 e2       	ldi	r24, 0x20	; 32
     2a4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     2a8:	08 95       	ret

000002aa <ui_com_tx_start>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2aa:	80 e1       	ldi	r24, 0x10	; 16
     2ac:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     2b0:	08 95       	ret

000002b2 <ui_com_tx_stop>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     2b2:	80 e1       	ldi	r24, 0x10	; 16
     2b4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     2b8:	08 95       	ret

000002ba <ui_com_error>:
{
	LED_Off(LED2_GPIO);
}

void ui_com_error(void)
{
     2ba:	08 95       	ret

000002bc <ui_com_overflow>:

}

void ui_com_overflow(void)
{
     2bc:	08 95       	ret

000002be <ui_process>:

}

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	21 f4       	brne	.+8      	; 0x2ca <ui_process+0xc>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
     2c8:	08 95       	ret
		LED_On(LED0_GPIO);
	}
	if (1000 == framenumber) {
     2ca:	88 3e       	cpi	r24, 0xE8	; 232
     2cc:	93 40       	sbci	r25, 0x03	; 3
     2ce:	19 f4       	brne	.+6      	; 0x2d6 <ui_process+0x18>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
     2d6:	08 95       	ret

000002d8 <sysclk_init>:
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	27 97       	sbiw	r28, 0x07	; 7
     2e6:	cd bf       	out	0x3d, r28	; 61
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	8f ef       	ldi	r24, 0xFF	; 255
     2ec:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     2f0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     2f4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     2f8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     2fc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     300:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     304:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     308:	64 e0       	ldi	r22, 0x04	; 4
     30a:	81 e4       	ldi	r24, 0x41	; 65
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <ccp_write_io>
     312:	6c e1       	ldi	r22, 0x1C	; 28
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <nvm_read_byte>
     31c:	8a 83       	std	Y+2, r24	; 0x02
     31e:	6d e1       	ldi	r22, 0x1D	; 29
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	82 e0       	ldi	r24, 0x02	; 2
     324:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <nvm_read_byte>
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	21 f4       	brne	.+8      	; 0x33a <sysclk_init+0x62>
     332:	80 e4       	ldi	r24, 0x40	; 64
     334:	93 e2       	ldi	r25, 0x23	; 35
     336:	89 83       	std	Y+1, r24	; 0x01
     338:	9a 83       	std	Y+2, r25	; 0x02
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	8b 83       	std	Y+3, r24	; 0x03
     340:	9c 83       	std	Y+4, r25	; 0x04
     342:	e0 e6       	ldi	r30, 0x60	; 96
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	82 83       	std	Z+2, r24	; 0x02
     348:	8c 81       	ldd	r24, Y+4	; 0x04
     34a:	83 83       	std	Z+3, r24	; 0x03
     34c:	8f b7       	in	r24, 0x3f	; 63
     34e:	8e 83       	std	Y+6, r24	; 0x06
     350:	f8 94       	cli
     352:	9e 81       	ldd	r25, Y+6	; 0x06
     354:	e0 e5       	ldi	r30, 0x50	; 80
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	82 60       	ori	r24, 0x02	; 2
     35c:	80 83       	st	Z, r24
     35e:	9f bf       	out	0x3f, r25	; 63
     360:	81 81       	ldd	r24, Z+1	; 0x01
     362:	81 ff       	sbrs	r24, 1
     364:	fd cf       	rjmp	.-6      	; 0x360 <sysclk_init+0x88>
     366:	8f b7       	in	r24, 0x3f	; 63
     368:	8d 83       	std	Y+5, r24	; 0x05
     36a:	f8 94       	cli
     36c:	9d 81       	ldd	r25, Y+5	; 0x05
     36e:	00 e5       	ldi	r16, 0x50	; 80
     370:	10 e0       	ldi	r17, 0x00	; 0
     372:	d8 01       	movw	r26, r16
     374:	16 96       	adiw	r26, 0x06	; 6
     376:	8c 91       	ld	r24, X
     378:	16 97       	sbiw	r26, 0x06	; 6
     37a:	89 7f       	andi	r24, 0xF9	; 249
     37c:	16 96       	adiw	r26, 0x06	; 6
     37e:	8c 93       	st	X, r24
     380:	16 97       	sbiw	r26, 0x06	; 6
     382:	e0 e6       	ldi	r30, 0x60	; 96
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 e8       	ldi	r24, 0x80	; 128
     388:	85 83       	std	Z+5, r24	; 0x05
     38a:	8b eb       	ldi	r24, 0xBB	; 187
     38c:	86 83       	std	Z+6, r24	; 0x06
     38e:	16 96       	adiw	r26, 0x06	; 6
     390:	8c 91       	ld	r24, X
     392:	16 97       	sbiw	r26, 0x06	; 6
     394:	84 60       	ori	r24, 0x04	; 4
     396:	16 96       	adiw	r26, 0x06	; 6
     398:	8c 93       	st	X, r24
     39a:	80 81       	ld	r24, Z
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	80 83       	st	Z, r24
     3a0:	9f bf       	out	0x3f, r25	; 63
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	80 e4       	ldi	r24, 0x40	; 64
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <ccp_write_io>
     3ac:	8f b7       	in	r24, 0x3f	; 63
     3ae:	8f 83       	std	Y+7, r24	; 0x07
     3b0:	f8 94       	cli
     3b2:	9f 81       	ldd	r25, Y+7	; 0x07
     3b4:	f8 01       	movw	r30, r16
     3b6:	80 81       	ld	r24, Z
     3b8:	8e 7f       	andi	r24, 0xFE	; 254
     3ba:	80 83       	st	Z, r24
     3bc:	9f bf       	out	0x3f, r25	; 63
     3be:	27 96       	adiw	r28, 0x07	; 7
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	08 95       	ret

000003ce <sysclk_enable_module>:
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	1f 92       	push	r1
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	9f b7       	in	r25, 0x3f	; 63
     3da:	99 83       	std	Y+1, r25	; 0x01
     3dc:	f8 94       	cli
     3de:	99 81       	ldd	r25, Y+1	; 0x01
     3e0:	e8 2f       	mov	r30, r24
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	e0 59       	subi	r30, 0x90	; 144
     3e6:	ff 4f       	sbci	r31, 0xFF	; 255
     3e8:	60 95       	com	r22
     3ea:	80 81       	ld	r24, Z
     3ec:	68 23       	and	r22, r24
     3ee:	60 83       	st	Z, r22
     3f0:	9f bf       	out	0x3f, r25	; 63
     3f2:	0f 90       	pop	r0
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <sysclk_disable_module>:
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	1f 92       	push	r1
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	9f b7       	in	r25, 0x3f	; 63
     406:	99 83       	std	Y+1, r25	; 0x01
     408:	f8 94       	cli
     40a:	99 81       	ldd	r25, Y+1	; 0x01
     40c:	e8 2f       	mov	r30, r24
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	e0 59       	subi	r30, 0x90	; 144
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	80 81       	ld	r24, Z
     416:	68 2b       	or	r22, r24
     418:	60 83       	st	Z, r22
     41a:	9f bf       	out	0x3f, r25	; 63
     41c:	0f 90       	pop	r0
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <sysclk_enable_usb>:
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	1f 92       	push	r1
     42a:	1f 92       	push	r1
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	86 30       	cpi	r24, 0x06	; 6
     432:	11 f0       	breq	.+4      	; 0x438 <sysclk_enable_usb+0x14>
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	01 c0       	rjmp	.+2      	; 0x43a <sysclk_enable_usb+0x16>
     438:	68 e1       	ldi	r22, 0x18	; 24
     43a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     43e:	81 fd       	sbrc	r24, 1
     440:	2a c0       	rjmp	.+84     	; 0x496 <sysclk_enable_usb+0x72>
     442:	8f b7       	in	r24, 0x3f	; 63
     444:	8a 83       	std	Y+2, r24	; 0x02
     446:	f8 94       	cli
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	e0 e5       	ldi	r30, 0x50	; 80
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	82 60       	ori	r24, 0x02	; 2
     452:	80 83       	st	Z, r24
     454:	9f bf       	out	0x3f, r25	; 63
     456:	81 81       	ldd	r24, Z+1	; 0x01
     458:	81 ff       	sbrs	r24, 1
     45a:	fd cf       	rjmp	.-6      	; 0x456 <sysclk_enable_usb+0x32>
     45c:	8f b7       	in	r24, 0x3f	; 63
     45e:	89 83       	std	Y+1, r24	; 0x01
     460:	f8 94       	cli
     462:	99 81       	ldd	r25, Y+1	; 0x01
     464:	a0 e5       	ldi	r26, 0x50	; 80
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	16 96       	adiw	r26, 0x06	; 6
     46a:	8c 91       	ld	r24, X
     46c:	16 97       	sbiw	r26, 0x06	; 6
     46e:	89 7f       	andi	r24, 0xF9	; 249
     470:	16 96       	adiw	r26, 0x06	; 6
     472:	8c 93       	st	X, r24
     474:	16 97       	sbiw	r26, 0x06	; 6
     476:	e0 e6       	ldi	r30, 0x60	; 96
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 e8       	ldi	r24, 0x80	; 128
     47c:	85 83       	std	Z+5, r24	; 0x05
     47e:	8b eb       	ldi	r24, 0xBB	; 187
     480:	86 83       	std	Z+6, r24	; 0x06
     482:	16 96       	adiw	r26, 0x06	; 6
     484:	8c 91       	ld	r24, X
     486:	16 97       	sbiw	r26, 0x06	; 6
     488:	84 60       	ori	r24, 0x04	; 4
     48a:	16 96       	adiw	r26, 0x06	; 6
     48c:	8c 93       	st	X, r24
     48e:	80 81       	ld	r24, Z
     490:	81 60       	ori	r24, 0x01	; 1
     492:	80 83       	st	Z, r24
     494:	9f bf       	out	0x3f, r25	; 63
     496:	63 60       	ori	r22, 0x03	; 3
     498:	84 e4       	ldi	r24, 0x44	; 68
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <ccp_write_io>
     4a0:	60 e4       	ldi	r22, 0x40	; 64
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	94 df       	rcall	.-216    	; 0x3ce <sysclk_enable_module>
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <ioport_configure_port_pin>:
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	fc 01       	movw	r30, r24
     4b6:	70 96       	adiw	r30, 0x10	; 16
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	c6 2f       	mov	r28, r22
     4be:	d0 e0       	ldi	r29, 0x00	; 0
     4c0:	de 01       	movw	r26, r28
     4c2:	02 2e       	mov	r0, r18
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <ioport_configure_port_pin+0x1a>
     4c6:	b5 95       	asr	r27
     4c8:	a7 95       	ror	r26
     4ca:	0a 94       	dec	r0
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <ioport_configure_port_pin+0x16>
     4ce:	a0 fd       	sbrc	r26, 0
     4d0:	50 83       	st	Z, r21
     4d2:	2f 5f       	subi	r18, 0xFF	; 255
     4d4:	3f 4f       	sbci	r19, 0xFF	; 255
     4d6:	31 96       	adiw	r30, 0x01	; 1
     4d8:	28 30       	cpi	r18, 0x08	; 8
     4da:	31 05       	cpc	r19, r1
     4dc:	89 f7       	brne	.-30     	; 0x4c0 <ioport_configure_port_pin+0x10>
     4de:	40 ff       	sbrs	r20, 0
     4e0:	0a c0       	rjmp	.+20     	; 0x4f6 <ioport_configure_port_pin+0x46>
     4e2:	41 ff       	sbrs	r20, 1
     4e4:	03 c0       	rjmp	.+6      	; 0x4ec <ioport_configure_port_pin+0x3c>
     4e6:	fc 01       	movw	r30, r24
     4e8:	65 83       	std	Z+5, r22	; 0x05
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <ioport_configure_port_pin+0x40>
     4ec:	fc 01       	movw	r30, r24
     4ee:	66 83       	std	Z+6, r22	; 0x06
     4f0:	fc 01       	movw	r30, r24
     4f2:	61 83       	std	Z+1, r22	; 0x01
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <ioport_configure_port_pin+0x4a>
     4f6:	fc 01       	movw	r30, r24
     4f8:	62 83       	std	Z+2, r22	; 0x02
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
     500:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <udi_cdc_nb_comm_enabled>
     504:	81 50       	subi	r24, 0x01	; 1
     506:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <udi_cdc_nb_comm_enabled>
     50a:	08 95       	ret

0000050c <udi_cdc_data_setup>:
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	08 95       	ret

00000510 <udi_cdc_getsetting>:
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	08 95       	ret

00000514 <udi_cdc_line_coding_received>:
     514:	62 ef       	ldi	r22, 0xF2	; 242
     516:	71 e2       	ldi	r23, 0x21	; 33
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0c 94 03 13 	jmp	0x2606	; 0x2606 <uart_config>
     51e:	08 95       	ret

00000520 <udi_cdc_comm_enable>:
     520:	10 92 e2 21 	sts	0x21E2, r1	; 0x8021e2 <udi_cdc_nb_comm_enabled>
     524:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <udi_cdc_state>
     528:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <udi_cdc_state+0x1>
     52c:	e4 ee       	ldi	r30, 0xE4	; 228
     52e:	f1 e2       	ldi	r31, 0x21	; 33
     530:	81 ea       	ldi	r24, 0xA1	; 161
     532:	80 83       	st	Z, r24
     534:	80 e2       	ldi	r24, 0x20	; 32
     536:	81 83       	std	Z+1, r24	; 0x01
     538:	12 82       	std	Z+2, r1	; 0x02
     53a:	13 82       	std	Z+3, r1	; 0x03
     53c:	14 82       	std	Z+4, r1	; 0x04
     53e:	15 82       	std	Z+5, r1	; 0x05
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	86 83       	std	Z+6, r24	; 0x06
     546:	97 83       	std	Z+7, r25	; 0x07
     548:	10 86       	std	Z+8, r1	; 0x08
     54a:	11 86       	std	Z+9, r1	; 0x09
     54c:	e2 ef       	ldi	r30, 0xF2	; 242
     54e:	f1 e2       	ldi	r31, 0x21	; 33
     550:	80 e8       	ldi	r24, 0x80	; 128
     552:	95 e2       	ldi	r25, 0x25	; 37
     554:	a0 e0       	ldi	r26, 0x00	; 0
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	80 83       	st	Z, r24
     55a:	91 83       	std	Z+1, r25	; 0x01
     55c:	a2 83       	std	Z+2, r26	; 0x02
     55e:	b3 83       	std	Z+3, r27	; 0x03
     560:	14 82       	std	Z+4, r1	; 0x04
     562:	15 82       	std	Z+5, r1	; 0x05
     564:	88 e0       	ldi	r24, 0x08	; 8
     566:	86 83       	std	Z+6, r24	; 0x06
     568:	bf 01       	movw	r22, r30
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0e 94 03 13 	call	0x2606	; 0x2606 <uart_config>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <main_cdc_enable>
     576:	88 23       	and	r24, r24
     578:	29 f0       	breq	.+10     	; 0x584 <udi_cdc_comm_enable+0x64>
     57a:	90 91 e2 21 	lds	r25, 0x21E2	; 0x8021e2 <udi_cdc_nb_comm_enabled>
     57e:	9f 5f       	subi	r25, 0xFF	; 255
     580:	90 93 e2 21 	sts	0x21E2, r25	; 0x8021e2 <udi_cdc_nb_comm_enabled>
     584:	08 95       	ret

00000586 <udi_cdc_tx_send>:
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	1f 92       	push	r1
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	80 91 cf 20 	lds	r24, 0x20CF	; 0x8020cf <udi_cdc_tx_trans_ongoing>
     59a:	81 11       	cpse	r24, r1
     59c:	9e c0       	rjmp	.+316    	; 0x6da <udi_cdc_tx_send+0x154>
     59e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <udd_is_high_speed>
     5a2:	88 23       	and	r24, r24
     5a4:	51 f0       	breq	.+20     	; 0x5ba <udi_cdc_tx_send+0x34>
     5a6:	00 91 d0 20 	lds	r16, 0x20D0	; 0x8020d0 <udi_cdc_tx_sof_num>
     5aa:	10 91 d1 20 	lds	r17, 0x20D1	; 0x8020d1 <udi_cdc_tx_sof_num+0x1>
     5ae:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <udd_get_micro_frame_number>
     5b2:	08 17       	cp	r16, r24
     5b4:	19 07       	cpc	r17, r25
     5b6:	59 f4       	brne	.+22     	; 0x5ce <udi_cdc_tx_send+0x48>
     5b8:	90 c0       	rjmp	.+288    	; 0x6da <udi_cdc_tx_send+0x154>
     5ba:	00 91 d0 20 	lds	r16, 0x20D0	; 0x8020d0 <udi_cdc_tx_sof_num>
     5be:	10 91 d1 20 	lds	r17, 0x20D1	; 0x8020d1 <udi_cdc_tx_sof_num+0x1>
     5c2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <udd_get_frame_number>
     5c6:	08 17       	cp	r16, r24
     5c8:	19 07       	cpc	r17, r25
     5ca:	09 f4       	brne	.+2      	; 0x5ce <udi_cdc_tx_send+0x48>
     5cc:	86 c0       	rjmp	.+268    	; 0x6da <udi_cdc_tx_send+0x154>
     5ce:	8f b7       	in	r24, 0x3f	; 63
     5d0:	89 83       	std	Y+1, r24	; 0x01
     5d2:	f8 94       	cli
     5d4:	19 81       	ldd	r17, Y+1	; 0x01
     5d6:	00 91 d2 20 	lds	r16, 0x20D2	; 0x8020d2 <udi_cdc_tx_buf_sel>
     5da:	e0 2f       	mov	r30, r16
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	ed 52       	subi	r30, 0x2D	; 45
     5e4:	ff 4d       	sbci	r31, 0xDF	; 223
     5e6:	80 81       	ld	r24, Z
     5e8:	91 81       	ldd	r25, Z+1	; 0x01
     5ea:	89 2b       	or	r24, r25
     5ec:	09 f5       	brne	.+66     	; 0x630 <udi_cdc_tx_send+0xaa>
     5ee:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <__data_end>
     5f2:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <__data_end+0x1>
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <__data_end>
     5fc:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <__data_end+0x1>
     600:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <udd_is_high_speed>
     604:	81 11       	cpse	r24, r1
     606:	07 c0       	rjmp	.+14     	; 0x616 <udi_cdc_tx_send+0x90>
     608:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <__data_end>
     60c:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <__data_end+0x1>
     610:	84 36       	cpi	r24, 0x64	; 100
     612:	91 05       	cpc	r25, r1
     614:	58 f0       	brcs	.+22     	; 0x62c <udi_cdc_tx_send+0xa6>
     616:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <udd_is_high_speed>
     61a:	88 23       	and	r24, r24
     61c:	49 f0       	breq	.+18     	; 0x630 <udi_cdc_tx_send+0xaa>
     61e:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <__data_end>
     622:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <__data_end+0x1>
     626:	80 32       	cpi	r24, 0x20	; 32
     628:	93 40       	sbci	r25, 0x03	; 3
     62a:	10 f4       	brcc	.+4      	; 0x630 <udi_cdc_tx_send+0xaa>
     62c:	1f bf       	out	0x3f, r17	; 63
     62e:	55 c0       	rjmp	.+170    	; 0x6da <udi_cdc_tx_send+0x154>
     630:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <__data_end>
     634:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <__data_end+0x1>
     638:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <udi_cdc_tx_both_buf_to_send>
     63c:	81 11       	cpse	r24, r1
     63e:	06 c0       	rjmp	.+12     	; 0x64c <udi_cdc_tx_send+0xc6>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	01 11       	cpse	r16, r1
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <udi_cdc_tx_buf_sel>
     64a:	04 c0       	rjmp	.+8      	; 0x654 <udi_cdc_tx_send+0xce>
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	01 11       	cpse	r16, r1
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	08 2f       	mov	r16, r24
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 cf 20 	sts	0x20CF, r24	; 0x8020cf <udi_cdc_tx_trans_ongoing>
     65a:	1f bf       	out	0x3f, r17	; 63
     65c:	10 e0       	ldi	r17, 0x00	; 0
     65e:	f8 01       	movw	r30, r16
     660:	ee 0f       	add	r30, r30
     662:	ff 1f       	adc	r31, r31
     664:	ed 52       	subi	r30, 0x2D	; 45
     666:	ff 4d       	sbci	r31, 0xDF	; 223
     668:	ff 24       	eor	r15, r15
     66a:	f3 94       	inc	r15
     66c:	80 81       	ld	r24, Z
     66e:	91 81       	ldd	r25, Z+1	; 0x01
     670:	80 34       	cpi	r24, 0x40	; 64
     672:	91 05       	cpc	r25, r1
     674:	09 f4       	brne	.+2      	; 0x678 <udi_cdc_tx_send+0xf2>
     676:	f1 2c       	mov	r15, r1
     678:	ff 20       	and	r15, r15
     67a:	91 f0       	breq	.+36     	; 0x6a0 <udi_cdc_tx_send+0x11a>
     67c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <udd_is_high_speed>
     680:	88 23       	and	r24, r24
     682:	39 f0       	breq	.+14     	; 0x692 <udi_cdc_tx_send+0x10c>
     684:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <udd_get_micro_frame_number>
     688:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <udi_cdc_tx_sof_num>
     68c:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <udi_cdc_tx_sof_num+0x1>
     690:	0b c0       	rjmp	.+22     	; 0x6a8 <udi_cdc_tx_send+0x122>
     692:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <udd_get_frame_number>
     696:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <udi_cdc_tx_sof_num>
     69a:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <udi_cdc_tx_sof_num+0x1>
     69e:	04 c0       	rjmp	.+8      	; 0x6a8 <udi_cdc_tx_send+0x122>
     6a0:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <udi_cdc_tx_sof_num>
     6a4:	10 92 d1 20 	sts	0x20D1, r1	; 0x8020d1 <udi_cdc_tx_sof_num+0x1>
     6a8:	f8 01       	movw	r30, r16
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	ed 52       	subi	r30, 0x2D	; 45
     6b0:	ff 4d       	sbci	r31, 0xDF	; 223
     6b2:	20 81       	ld	r18, Z
     6b4:	31 81       	ldd	r19, Z+1	; 0x01
     6b6:	a8 01       	movw	r20, r16
     6b8:	00 24       	eor	r0, r0
     6ba:	56 95       	lsr	r21
     6bc:	47 95       	ror	r20
     6be:	07 94       	ror	r0
     6c0:	56 95       	lsr	r21
     6c2:	47 95       	ror	r20
     6c4:	07 94       	ror	r0
     6c6:	54 2f       	mov	r21, r20
     6c8:	40 2d       	mov	r20, r0
     6ca:	48 52       	subi	r20, 0x28	; 40
     6cc:	5f 4d       	sbci	r21, 0xDF	; 223
     6ce:	04 e7       	ldi	r16, 0x74	; 116
     6d0:	13 e0       	ldi	r17, 0x03	; 3
     6d2:	6f 2d       	mov	r22, r15
     6d4:	81 e8       	ldi	r24, 0x81	; 129
     6d6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <udd_ep_run>
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	08 95       	ret

000006e8 <udi_cdc_data_sent>:
     6e8:	81 11       	cpse	r24, r1
     6ea:	15 c0       	rjmp	.+42     	; 0x716 <udi_cdc_data_sent+0x2e>
     6ec:	20 91 d2 20 	lds	r18, 0x20D2	; 0x8020d2 <udi_cdc_tx_buf_sel>
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	22 23       	and	r18, r18
     6f6:	11 f0       	breq	.+4      	; 0x6fc <udi_cdc_data_sent+0x14>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	fc 01       	movw	r30, r24
     702:	ed 52       	subi	r30, 0x2D	; 45
     704:	ff 4d       	sbci	r31, 0xDF	; 223
     706:	10 82       	st	Z, r1
     708:	11 82       	std	Z+1, r1	; 0x01
     70a:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <udi_cdc_tx_both_buf_to_send>
     70e:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <udi_cdc_tx_trans_ongoing>
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	38 cf       	rjmp	.-400    	; 0x586 <udi_cdc_tx_send>
     716:	08 95       	ret

00000718 <udi_cdc_data_sof_notify>:
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	35 cf       	rjmp	.-406    	; 0x586 <udi_cdc_tx_send>
     71c:	08 95       	ret

0000071e <udi_cdc_ctrl_state_notify>:
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <udi_cdc_serial_state_msg_ongoing>
     726:	81 11       	cpse	r24, r1
     728:	1f c0       	rjmp	.+62     	; 0x768 <udi_cdc_ctrl_state_notify+0x4a>
     72a:	20 91 ee 21 	lds	r18, 0x21EE	; 0x8021ee <udi_cdc_state>
     72e:	30 91 ef 21 	lds	r19, 0x21EF	; 0x8021ef <udi_cdc_state+0x1>
     732:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <uid_cdc_state_msg+0x8>
     736:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <uid_cdc_state_msg+0x9>
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	a1 f0       	breq	.+40     	; 0x768 <udi_cdc_ctrl_state_notify+0x4a>
     740:	86 2f       	mov	r24, r22
     742:	20 91 ee 21 	lds	r18, 0x21EE	; 0x8021ee <udi_cdc_state>
     746:	30 91 ef 21 	lds	r19, 0x21EF	; 0x8021ef <udi_cdc_state+0x1>
     74a:	20 93 ec 21 	sts	0x21EC, r18	; 0x8021ec <uid_cdc_state_msg+0x8>
     74e:	30 93 ed 21 	sts	0x21ED, r19	; 0x8021ed <uid_cdc_state_msg+0x9>
     752:	01 ee       	ldi	r16, 0xE1	; 225
     754:	13 e0       	ldi	r17, 0x03	; 3
     756:	2a e0       	ldi	r18, 0x0A	; 10
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	44 ee       	ldi	r20, 0xE4	; 228
     75c:	51 e2       	ldi	r21, 0x21	; 33
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <udd_ep_run>
     764:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <udi_cdc_serial_state_msg_ongoing>
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	08 95       	ret

0000076e <udi_cdc_ctrl_state_change>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	1f 92       	push	r1
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	8f b7       	in	r24, 0x3f	; 63
     77a:	89 83       	std	Y+1, r24	; 0x01
     77c:	f8 94       	cli
     77e:	29 81       	ldd	r18, Y+1	; 0x01
     780:	66 23       	and	r22, r22
     782:	59 f0       	breq	.+22     	; 0x79a <udi_cdc_ctrl_state_change+0x2c>
     784:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udi_cdc_state>
     788:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <udi_cdc_state+0x1>
     78c:	48 2b       	or	r20, r24
     78e:	59 2b       	or	r21, r25
     790:	40 93 ee 21 	sts	0x21EE, r20	; 0x8021ee <udi_cdc_state>
     794:	50 93 ef 21 	sts	0x21EF, r21	; 0x8021ef <udi_cdc_state+0x1>
     798:	0c c0       	rjmp	.+24     	; 0x7b2 <udi_cdc_ctrl_state_change+0x44>
     79a:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udi_cdc_state>
     79e:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <udi_cdc_state+0x1>
     7a2:	40 95       	com	r20
     7a4:	50 95       	com	r21
     7a6:	48 23       	and	r20, r24
     7a8:	59 23       	and	r21, r25
     7aa:	40 93 ee 21 	sts	0x21EE, r20	; 0x8021ee <udi_cdc_state>
     7ae:	50 93 ef 21 	sts	0x21EF, r21	; 0x8021ef <udi_cdc_state+0x1>
     7b2:	2f bf       	out	0x3f, r18	; 63
     7b4:	62 e8       	ldi	r22, 0x82	; 130
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	b2 df       	rcall	.-156    	; 0x71e <udi_cdc_ctrl_state_notify>
     7ba:	0f 90       	pop	r0
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <udi_cdc_serial_state_msg_sent>:
     7c2:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <udi_cdc_serial_state_msg_ongoing>
     7c6:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udi_cdc_state>
     7ca:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <udi_cdc_state+0x1>
     7ce:	83 78       	andi	r24, 0x83	; 131
     7d0:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <udi_cdc_state>
     7d4:	90 93 ef 21 	sts	0x21EF, r25	; 0x8021ef <udi_cdc_state+0x1>
     7d8:	e4 ee       	ldi	r30, 0xE4	; 228
     7da:	f1 e2       	ldi	r31, 0x21	; 33
     7dc:	80 85       	ldd	r24, Z+8	; 0x08
     7de:	91 85       	ldd	r25, Z+9	; 0x09
     7e0:	83 78       	andi	r24, 0x83	; 131
     7e2:	80 87       	std	Z+8, r24	; 0x08
     7e4:	91 87       	std	Z+9, r25	; 0x09
     7e6:	64 2f       	mov	r22, r20
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	99 cf       	rjmp	.-206    	; 0x71e <udi_cdc_ctrl_state_notify>
     7ec:	08 95       	ret

000007ee <udi_cdc_data_disable>:
     7ee:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <udi_cdc_nb_data_enabled>
     7f2:	81 50       	subi	r24, 0x01	; 1
     7f4:	80 93 e1 21 	sts	0x21E1, r24	; 0x8021e1 <udi_cdc_nb_data_enabled>
     7f8:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <udi_cdc_nb_data_enabled>
     7fc:	0e 94 f7 12 	call	0x25ee	; 0x25ee <main_cdc_disable>
     800:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <udi_cdc_data_running>
     804:	08 95       	ret

00000806 <udi_cdc_comm_setup>:
     806:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq>
     80a:	88 23       	and	r24, r24
     80c:	cc f4       	brge	.+50     	; 0x840 <udi_cdc_comm_setup+0x3a>
     80e:	80 76       	andi	r24, 0x60	; 96
     810:	80 32       	cpi	r24, 0x20	; 32
     812:	f1 f5       	brne	.+124    	; 0x890 <udi_cdc_comm_setup+0x8a>
     814:	80 91 39 23 	lds	r24, 0x2339	; 0x802339 <udd_g_ctrlreq+0x1>
     818:	81 32       	cpi	r24, 0x21	; 33
     81a:	e1 f5       	brne	.+120    	; 0x894 <udi_cdc_comm_setup+0x8e>
     81c:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
     820:	90 91 3f 23 	lds	r25, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
     824:	07 97       	sbiw	r24, 0x07	; 7
     826:	c1 f5       	brne	.+112    	; 0x898 <udi_cdc_comm_setup+0x92>
     828:	e8 e3       	ldi	r30, 0x38	; 56
     82a:	f3 e2       	ldi	r31, 0x23	; 35
     82c:	82 ef       	ldi	r24, 0xF2	; 242
     82e:	91 e2       	ldi	r25, 0x21	; 33
     830:	80 87       	std	Z+8, r24	; 0x08
     832:	91 87       	std	Z+9, r25	; 0x09
     834:	87 e0       	ldi	r24, 0x07	; 7
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	82 87       	std	Z+10, r24	; 0x0a
     83a:	93 87       	std	Z+11, r25	; 0x0b
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	08 95       	ret
     840:	80 76       	andi	r24, 0x60	; 96
     842:	80 32       	cpi	r24, 0x20	; 32
     844:	59 f5       	brne	.+86     	; 0x89c <udi_cdc_comm_setup+0x96>
     846:	80 91 39 23 	lds	r24, 0x2339	; 0x802339 <udd_g_ctrlreq+0x1>
     84a:	80 32       	cpi	r24, 0x20	; 32
     84c:	19 f0       	breq	.+6      	; 0x854 <udi_cdc_comm_setup+0x4e>
     84e:	82 32       	cpi	r24, 0x22	; 34
     850:	b9 f0       	breq	.+46     	; 0x880 <udi_cdc_comm_setup+0x7a>
     852:	26 c0       	rjmp	.+76     	; 0x8a0 <udi_cdc_comm_setup+0x9a>
     854:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
     858:	90 91 3f 23 	lds	r25, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
     85c:	07 97       	sbiw	r24, 0x07	; 7
     85e:	11 f5       	brne	.+68     	; 0x8a4 <udi_cdc_comm_setup+0x9e>
     860:	e8 e3       	ldi	r30, 0x38	; 56
     862:	f3 e2       	ldi	r31, 0x23	; 35
     864:	8a e8       	ldi	r24, 0x8A	; 138
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	84 87       	std	Z+12, r24	; 0x0c
     86a:	95 87       	std	Z+13, r25	; 0x0d
     86c:	82 ef       	ldi	r24, 0xF2	; 242
     86e:	91 e2       	ldi	r25, 0x21	; 33
     870:	80 87       	std	Z+8, r24	; 0x08
     872:	91 87       	std	Z+9, r25	; 0x09
     874:	87 e0       	ldi	r24, 0x07	; 7
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	82 87       	std	Z+10, r24	; 0x0a
     87a:	93 87       	std	Z+11, r25	; 0x0b
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	08 95       	ret
     880:	60 91 3a 23 	lds	r22, 0x233A	; 0x80233a <udd_g_ctrlreq+0x2>
     884:	61 70       	andi	r22, 0x01	; 1
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <main_cdc_set_dtr>
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	08 95       	ret
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	08 95       	ret
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	08 95       	ret
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	08 95       	ret
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	08 95       	ret
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	08 95       	ret
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	08 95       	ret

000008a8 <udi_cdc_signal_framing_error>:
     8a8:	40 e1       	ldi	r20, 0x10	; 16
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	5e cf       	rjmp	.-324    	; 0x76e <udi_cdc_ctrl_state_change>
     8b2:	08 95       	ret

000008b4 <udi_cdc_signal_overrun>:
     8b4:	40 e4       	ldi	r20, 0x40	; 64
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	58 cf       	rjmp	.-336    	; 0x76e <udi_cdc_ctrl_state_change>
     8be:	08 95       	ret

000008c0 <udi_cdc_multi_get_nb_received_data>:
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	1f 92       	push	r1
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	8f b7       	in	r24, 0x3f	; 63
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	f8 94       	cli
     8d0:	49 81       	ldd	r20, Y+1	; 0x01
     8d2:	20 91 59 21 	lds	r18, 0x2159	; 0x802159 <udi_cdc_rx_pos>
     8d6:	30 91 5a 21 	lds	r19, 0x215A	; 0x80215a <udi_cdc_rx_pos+0x1>
     8da:	e0 91 5b 21 	lds	r30, 0x215B	; 0x80215b <udi_cdc_rx_buf_sel>
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	e4 5a       	subi	r30, 0xA4	; 164
     8e6:	fe 4d       	sbci	r31, 0xDE	; 222
     8e8:	80 81       	ld	r24, Z
     8ea:	91 81       	ldd	r25, Z+1	; 0x01
     8ec:	4f bf       	out	0x3f, r20	; 63
     8ee:	82 1b       	sub	r24, r18
     8f0:	93 0b       	sbc	r25, r19
     8f2:	0f 90       	pop	r0
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <udi_cdc_multi_is_rx_ready>:
     8fa:	e2 df       	rcall	.-60     	; 0x8c0 <udi_cdc_multi_get_nb_received_data>
     8fc:	21 e0       	ldi	r18, 0x01	; 1
     8fe:	89 2b       	or	r24, r25
     900:	09 f4       	brne	.+2      	; 0x904 <udi_cdc_multi_is_rx_ready+0xa>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	82 2f       	mov	r24, r18
     906:	08 95       	ret

00000908 <udi_cdc_rx_start>:
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	1f 92       	push	r1
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	8f b7       	in	r24, 0x3f	; 63
     918:	89 83       	std	Y+1, r24	; 0x01
     91a:	f8 94       	cli
     91c:	99 81       	ldd	r25, Y+1	; 0x01
     91e:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <udi_cdc_rx_buf_sel>
     922:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <udi_cdc_rx_trans_ongoing>
     926:	81 11       	cpse	r24, r1
     928:	10 c0       	rjmp	.+32     	; 0x94a <udi_cdc_rx_start+0x42>
     92a:	60 91 59 21 	lds	r22, 0x2159	; 0x802159 <udi_cdc_rx_pos>
     92e:	70 91 5a 21 	lds	r23, 0x215A	; 0x80215a <udi_cdc_rx_pos+0x1>
     932:	02 2f       	mov	r16, r18
     934:	10 e0       	ldi	r17, 0x00	; 0
     936:	f8 01       	movw	r30, r16
     938:	ee 0f       	add	r30, r30
     93a:	ff 1f       	adc	r31, r31
     93c:	e4 5a       	subi	r30, 0xA4	; 164
     93e:	fe 4d       	sbci	r31, 0xDE	; 222
     940:	40 81       	ld	r20, Z
     942:	51 81       	ldd	r21, Z+1	; 0x01
     944:	64 17       	cp	r22, r20
     946:	75 07       	cpc	r23, r21
     948:	18 f4       	brcc	.+6      	; 0x950 <udi_cdc_rx_start+0x48>
     94a:	9f bf       	out	0x3f, r25	; 63
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	28 c0       	rjmp	.+80     	; 0x9a0 <udi_cdc_rx_start+0x98>
     950:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <udi_cdc_rx_pos>
     954:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <udi_cdc_rx_pos+0x1>
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	21 11       	cpse	r18, r1
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <udi_cdc_rx_buf_sel>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <udi_cdc_rx_trans_ongoing>
     968:	9f bf       	out	0x3f, r25	; 63
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	c6 df       	rcall	.-116    	; 0x8fa <udi_cdc_multi_is_rx_ready>
     96e:	88 23       	and	r24, r24
     970:	19 f0       	breq	.+6      	; 0x978 <udi_cdc_rx_start+0x70>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	0e 94 88 13 	call	0x2710	; 0x2710 <uart_rx_notify>
     978:	a8 01       	movw	r20, r16
     97a:	00 24       	eor	r0, r0
     97c:	56 95       	lsr	r21
     97e:	47 95       	ror	r20
     980:	07 94       	ror	r0
     982:	56 95       	lsr	r21
     984:	47 95       	ror	r20
     986:	07 94       	ror	r0
     988:	54 2f       	mov	r21, r20
     98a:	40 2d       	mov	r20, r0
     98c:	40 5a       	subi	r20, 0xA0	; 160
     98e:	5e 4d       	sbci	r21, 0xDE	; 222
     990:	08 e0       	ldi	r16, 0x08	; 8
     992:	15 e0       	ldi	r17, 0x05	; 5
     994:	20 e4       	ldi	r18, 0x40	; 64
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <udd_ep_run>
     9a0:	0f 90       	pop	r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	08 95       	ret

000009ac <udi_cdc_data_enable>:
     9ac:	10 92 e1 21 	sts	0x21E1, r1	; 0x8021e1 <udi_cdc_nb_data_enabled>
     9b0:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <udi_cdc_tx_trans_ongoing>
     9b4:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <udi_cdc_tx_both_buf_to_send>
     9b8:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <udi_cdc_tx_buf_sel>
     9bc:	e3 ed       	ldi	r30, 0xD3	; 211
     9be:	f0 e2       	ldi	r31, 0x20	; 32
     9c0:	10 82       	st	Z, r1
     9c2:	11 82       	std	Z+1, r1	; 0x01
     9c4:	12 82       	std	Z+2, r1	; 0x02
     9c6:	13 82       	std	Z+3, r1	; 0x03
     9c8:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <udi_cdc_tx_sof_num>
     9cc:	10 92 d1 20 	sts	0x20D1, r1	; 0x8020d1 <udi_cdc_tx_sof_num+0x1>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	d9 dd       	rcall	.-1102   	; 0x586 <udi_cdc_tx_send>
     9d4:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <udi_cdc_rx_trans_ongoing>
     9d8:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <udi_cdc_rx_buf_sel>
     9dc:	ec e5       	ldi	r30, 0x5C	; 92
     9de:	f1 e2       	ldi	r31, 0x21	; 33
     9e0:	10 82       	st	Z, r1
     9e2:	11 82       	std	Z+1, r1	; 0x01
     9e4:	12 82       	std	Z+2, r1	; 0x02
     9e6:	13 82       	std	Z+3, r1	; 0x03
     9e8:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <udi_cdc_rx_pos>
     9ec:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <udi_cdc_rx_pos+0x1>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	8a df       	rcall	.-236    	; 0x908 <udi_cdc_rx_start>
     9f4:	88 23       	and	r24, r24
     9f6:	59 f0       	breq	.+22     	; 0xa0e <udi_cdc_data_enable+0x62>
     9f8:	90 91 e1 21 	lds	r25, 0x21E1	; 0x8021e1 <udi_cdc_nb_data_enabled>
     9fc:	9f 5f       	subi	r25, 0xFF	; 255
     9fe:	90 93 e1 21 	sts	0x21E1, r25	; 0x8021e1 <udi_cdc_nb_data_enabled>
     a02:	90 91 e1 21 	lds	r25, 0x21E1	; 0x8021e1 <udi_cdc_nb_data_enabled>
     a06:	91 30       	cpi	r25, 0x01	; 1
     a08:	11 f4       	brne	.+4      	; 0xa0e <udi_cdc_data_enable+0x62>
     a0a:	90 93 e0 21 	sts	0x21E0, r25	; 0x8021e0 <udi_cdc_data_running>
     a0e:	08 95       	ret

00000a10 <udi_cdc_data_received>:
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	81 11       	cpse	r24, r1
     a16:	29 c0       	rjmp	.+82     	; 0xa6a <udi_cdc_data_received+0x5a>
     a18:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <udi_cdc_rx_buf_sel>
     a1c:	e1 e0       	ldi	r30, 0x01	; 1
     a1e:	81 11       	cpse	r24, r1
     a20:	e0 e0       	ldi	r30, 0x00	; 0
     a22:	84 2f       	mov	r24, r20
     a24:	61 15       	cp	r22, r1
     a26:	71 05       	cpc	r23, r1
     a28:	a9 f4       	brne	.+42     	; 0xa54 <udi_cdc_data_received+0x44>
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	00 24       	eor	r0, r0
     a2e:	f6 95       	lsr	r31
     a30:	e7 95       	ror	r30
     a32:	07 94       	ror	r0
     a34:	f6 95       	lsr	r31
     a36:	e7 95       	ror	r30
     a38:	07 94       	ror	r0
     a3a:	fe 2f       	mov	r31, r30
     a3c:	e0 2d       	mov	r30, r0
     a3e:	af 01       	movw	r20, r30
     a40:	40 5a       	subi	r20, 0xA0	; 160
     a42:	5e 4d       	sbci	r21, 0xDE	; 222
     a44:	08 e0       	ldi	r16, 0x08	; 8
     a46:	15 e0       	ldi	r17, 0x05	; 5
     a48:	20 e4       	ldi	r18, 0x40	; 64
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <udd_ep_run>
     a52:	0b c0       	rjmp	.+22     	; 0xa6a <udi_cdc_data_received+0x5a>
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	e4 5a       	subi	r30, 0xA4	; 164
     a5c:	fe 4d       	sbci	r31, 0xDE	; 222
     a5e:	60 83       	st	Z, r22
     a60:	71 83       	std	Z+1, r23	; 0x01
     a62:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <udi_cdc_rx_trans_ongoing>
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	4f df       	rcall	.-354    	; 0x908 <udi_cdc_rx_start>
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <udi_cdc_is_rx_ready>:
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	43 cf       	rjmp	.-378    	; 0x8fa <udi_cdc_multi_is_rx_ready>
     a74:	08 95       	ret

00000a76 <udi_cdc_multi_getc>:
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	1f 92       	push	r1
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	11 e0       	ldi	r17, 0x01	; 1
     a88:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udi_cdc_line_coding+0x6>
     a8c:	89 30       	cpi	r24, 0x09	; 9
     a8e:	09 f0       	breq	.+2      	; 0xa92 <udi_cdc_multi_getc+0x1c>
     a90:	10 e0       	ldi	r17, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	8f b7       	in	r24, 0x3f	; 63
     a98:	89 83       	std	Y+1, r24	; 0x01
     a9a:	f8 94       	cli
     a9c:	a9 81       	ldd	r26, Y+1	; 0x01
     a9e:	20 91 59 21 	lds	r18, 0x2159	; 0x802159 <udi_cdc_rx_pos>
     aa2:	30 91 5a 21 	lds	r19, 0x215A	; 0x80215a <udi_cdc_rx_pos+0x1>
     aa6:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <udi_cdc_rx_buf_sel>
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	fc 01       	movw	r30, r24
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	e4 5a       	subi	r30, 0xA4	; 164
     ab4:	fe 4d       	sbci	r31, 0xDE	; 222
     ab6:	60 81       	ld	r22, Z
     ab8:	71 81       	ldd	r23, Z+1	; 0x01
     aba:	af bf       	out	0x3f, r26	; 63
     abc:	26 17       	cp	r18, r22
     abe:	37 07       	cpc	r19, r23
     ac0:	30 f0       	brcs	.+12     	; 0xace <udi_cdc_multi_getc+0x58>
     ac2:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udi_cdc_data_running>
     ac6:	81 11       	cpse	r24, r1
     ac8:	e6 cf       	rjmp	.-52     	; 0xa96 <udi_cdc_multi_getc+0x20>
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	21 c0       	rjmp	.+66     	; 0xb10 <udi_cdc_multi_getc+0x9a>
     ace:	fc 01       	movw	r30, r24
     ad0:	00 24       	eor	r0, r0
     ad2:	f6 95       	lsr	r31
     ad4:	e7 95       	ror	r30
     ad6:	07 94       	ror	r0
     ad8:	f6 95       	lsr	r31
     ada:	e7 95       	ror	r30
     adc:	07 94       	ror	r0
     ade:	fe 2f       	mov	r31, r30
     ae0:	e0 2d       	mov	r30, r0
     ae2:	e2 0f       	add	r30, r18
     ae4:	f3 1f       	adc	r31, r19
     ae6:	e0 5a       	subi	r30, 0xA0	; 160
     ae8:	fe 4d       	sbci	r31, 0xDE	; 222
     aea:	80 81       	ld	r24, Z
     aec:	7a 01       	movw	r14, r20
     aee:	e8 2a       	or	r14, r24
     af0:	2f 5f       	subi	r18, 0xFF	; 255
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
     af4:	20 93 59 21 	sts	0x2159, r18	; 0x802159 <udi_cdc_rx_pos>
     af8:	30 93 5a 21 	sts	0x215A, r19	; 0x80215a <udi_cdc_rx_pos+0x1>
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	04 df       	rcall	.-504    	; 0x908 <udi_cdc_rx_start>
     b00:	11 23       	and	r17, r17
     b02:	21 f0       	breq	.+8      	; 0xb0c <udi_cdc_multi_getc+0x96>
     b04:	5e 2d       	mov	r21, r14
     b06:	44 27       	eor	r20, r20
     b08:	10 e0       	ldi	r17, 0x00	; 0
     b0a:	c5 cf       	rjmp	.-118    	; 0xa96 <udi_cdc_multi_getc+0x20>
     b0c:	8e 2d       	mov	r24, r14
     b0e:	9f 2d       	mov	r25, r15
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	08 95       	ret

00000b1e <udi_cdc_getc>:
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	aa cf       	rjmp	.-172    	; 0xa76 <udi_cdc_multi_getc>
     b22:	08 95       	ret

00000b24 <udi_cdc_multi_read_buf>:
     b24:	cf 92       	push	r12
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	1f 92       	push	r1
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	6b 01       	movw	r12, r22
     b3c:	7a 01       	movw	r14, r20
     b3e:	8f b7       	in	r24, 0x3f	; 63
     b40:	89 83       	std	Y+1, r24	; 0x01
     b42:	f8 94       	cli
     b44:	49 81       	ldd	r20, Y+1	; 0x01
     b46:	60 91 59 21 	lds	r22, 0x2159	; 0x802159 <udi_cdc_rx_pos>
     b4a:	70 91 5a 21 	lds	r23, 0x215A	; 0x80215a <udi_cdc_rx_pos+0x1>
     b4e:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <udi_cdc_rx_buf_sel>
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	f9 01       	movw	r30, r18
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	e4 5a       	subi	r30, 0xA4	; 164
     b5c:	fe 4d       	sbci	r31, 0xDE	; 222
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	4f bf       	out	0x3f, r20	; 63
     b64:	68 17       	cp	r22, r24
     b66:	79 07       	cpc	r23, r25
     b68:	38 f0       	brcs	.+14     	; 0xb78 <udi_cdc_multi_read_buf+0x54>
     b6a:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udi_cdc_data_running>
     b6e:	81 11       	cpse	r24, r1
     b70:	e6 cf       	rjmp	.-52     	; 0xb3e <udi_cdc_multi_read_buf+0x1a>
     b72:	8e 2d       	mov	r24, r14
     b74:	9f 2d       	mov	r25, r15
     b76:	35 c0       	rjmp	.+106    	; 0xbe2 <udi_cdc_multi_read_buf+0xbe>
     b78:	f9 01       	movw	r30, r18
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	e4 5a       	subi	r30, 0xA4	; 164
     b80:	fe 4d       	sbci	r31, 0xDE	; 222
     b82:	80 81       	ld	r24, Z
     b84:	91 81       	ldd	r25, Z+1	; 0x01
     b86:	86 1b       	sub	r24, r22
     b88:	97 0b       	sbc	r25, r23
     b8a:	87 01       	movw	r16, r14
     b8c:	8e 15       	cp	r24, r14
     b8e:	9f 05       	cpc	r25, r15
     b90:	08 f4       	brcc	.+2      	; 0xb94 <udi_cdc_multi_read_buf+0x70>
     b92:	8c 01       	movw	r16, r24
     b94:	00 24       	eor	r0, r0
     b96:	36 95       	lsr	r19
     b98:	27 95       	ror	r18
     b9a:	07 94       	ror	r0
     b9c:	36 95       	lsr	r19
     b9e:	27 95       	ror	r18
     ba0:	07 94       	ror	r0
     ba2:	32 2f       	mov	r19, r18
     ba4:	20 2d       	mov	r18, r0
     ba6:	62 0f       	add	r22, r18
     ba8:	73 1f       	adc	r23, r19
     baa:	60 5a       	subi	r22, 0xA0	; 160
     bac:	7e 4d       	sbci	r23, 0xDE	; 222
     bae:	a8 01       	movw	r20, r16
     bb0:	c6 01       	movw	r24, r12
     bb2:	0e 94 47 14 	call	0x288e	; 0x288e <memcpy>
     bb6:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <udi_cdc_rx_pos>
     bba:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <udi_cdc_rx_pos+0x1>
     bbe:	80 0f       	add	r24, r16
     bc0:	91 1f       	adc	r25, r17
     bc2:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <udi_cdc_rx_pos>
     bc6:	90 93 5a 21 	sts	0x215A, r25	; 0x80215a <udi_cdc_rx_pos+0x1>
     bca:	c0 0e       	add	r12, r16
     bcc:	d1 1e       	adc	r13, r17
     bce:	e0 1a       	sub	r14, r16
     bd0:	f1 0a       	sbc	r15, r17
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	99 de       	rcall	.-718    	; 0x908 <udi_cdc_rx_start>
     bd6:	e1 14       	cp	r14, r1
     bd8:	f1 04       	cpc	r15, r1
     bda:	09 f0       	breq	.+2      	; 0xbde <udi_cdc_multi_read_buf+0xba>
     bdc:	b0 cf       	rjmp	.-160    	; 0xb3e <udi_cdc_multi_read_buf+0x1a>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0f 90       	pop	r0
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	08 95       	ret

00000bf6 <udi_cdc_read_buf>:
     bf6:	ab 01       	movw	r20, r22
     bf8:	bc 01       	movw	r22, r24
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	93 cf       	rjmp	.-218    	; 0xb24 <udi_cdc_multi_read_buf>
     bfe:	08 95       	ret

00000c00 <udi_cdc_multi_get_free_tx_buffer>:
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	1f 92       	push	r1
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	8f b7       	in	r24, 0x3f	; 63
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	f8 94       	cli
     c10:	99 81       	ldd	r25, Y+1	; 0x01
     c12:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <udi_cdc_tx_buf_sel>
     c16:	e8 2f       	mov	r30, r24
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	ed 52       	subi	r30, 0x2D	; 45
     c20:	ff 4d       	sbci	r31, 0xDF	; 223
     c22:	20 81       	ld	r18, Z
     c24:	31 81       	ldd	r19, Z+1	; 0x01
     c26:	20 34       	cpi	r18, 0x40	; 64
     c28:	31 05       	cpc	r19, r1
     c2a:	89 f4       	brne	.+34     	; 0xc4e <udi_cdc_multi_get_free_tx_buffer+0x4e>
     c2c:	40 91 cf 20 	lds	r20, 0x20CF	; 0x8020cf <udi_cdc_tx_trans_ongoing>
     c30:	41 11       	cpse	r20, r1
     c32:	0d c0       	rjmp	.+26     	; 0xc4e <udi_cdc_multi_get_free_tx_buffer+0x4e>
     c34:	40 91 ce 20 	lds	r20, 0x20CE	; 0x8020ce <udi_cdc_tx_both_buf_to_send>
     c38:	41 11       	cpse	r20, r1
     c3a:	09 c0       	rjmp	.+18     	; 0xc4e <udi_cdc_multi_get_free_tx_buffer+0x4e>
     c3c:	21 e0       	ldi	r18, 0x01	; 1
     c3e:	20 93 ce 20 	sts	0x20CE, r18	; 0x8020ce <udi_cdc_tx_both_buf_to_send>
     c42:	81 11       	cpse	r24, r1
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	20 93 d2 20 	sts	0x20D2, r18	; 0x8020d2 <udi_cdc_tx_buf_sel>
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	9f bf       	out	0x3f, r25	; 63
     c50:	80 e4       	ldi	r24, 0x40	; 64
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	82 1b       	sub	r24, r18
     c56:	93 0b       	sbc	r25, r19
     c58:	0f 90       	pop	r0
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     c60:	cf df       	rcall	.-98     	; 0xc00 <udi_cdc_multi_get_free_tx_buffer>
     c62:	21 e0       	ldi	r18, 0x01	; 1
     c64:	89 2b       	or	r24, r25
     c66:	09 f4       	brne	.+2      	; 0xc6a <udi_cdc_multi_is_tx_ready+0xa>
     c68:	20 e0       	ldi	r18, 0x00	; 0
}
     c6a:	82 2f       	mov	r24, r18
     c6c:	08 95       	ret

00000c6e <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	f7 cf       	rjmp	.-18     	; 0xc60 <udi_cdc_multi_is_tx_ready>
}
     c72:	08 95       	ret

00000c74 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	1f 92       	push	r1
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	f6 2e       	mov	r15, r22
     c86:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     c88:	01 e0       	ldi	r16, 0x01	; 1
     c8a:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udi_cdc_line_coding+0x6>
     c8e:	89 30       	cpi	r24, 0x09	; 9
     c90:	09 f0       	breq	.+2      	; 0xc94 <udi_cdc_multi_putc+0x20>
     c92:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	e4 df       	rcall	.-56     	; 0xc60 <udi_cdc_multi_is_tx_ready>
     c98:	81 11       	cpse	r24, r1
     c9a:	07 c0       	rjmp	.+14     	; 0xcaa <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
     c9c:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udi_cdc_data_running>
     ca0:	81 11       	cpse	r24, r1
     ca2:	f8 cf       	rjmp	.-16     	; 0xc94 <udi_cdc_multi_putc+0x20>
			return false;
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	2d c0       	rjmp	.+90     	; 0xd04 <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     caa:	8f b7       	in	r24, 0x3f	; 63
     cac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     cae:	f8 94       	cli
	return flags;
     cb0:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     cb2:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	df 01       	movw	r26, r30
     cba:	aa 0f       	add	r26, r26
     cbc:	bb 1f       	adc	r27, r27
     cbe:	ad 52       	subi	r26, 0x2D	; 45
     cc0:	bf 4d       	sbci	r27, 0xDF	; 223
     cc2:	8d 91       	ld	r24, X+
     cc4:	9c 91       	ld	r25, X
     cc6:	11 97       	sbiw	r26, 0x01	; 1
     cc8:	ac 01       	movw	r20, r24
     cca:	4f 5f       	subi	r20, 0xFF	; 255
     ccc:	5f 4f       	sbci	r21, 0xFF	; 255
     cce:	4d 93       	st	X+, r20
     cd0:	5c 93       	st	X, r21
     cd2:	00 24       	eor	r0, r0
     cd4:	f6 95       	lsr	r31
     cd6:	e7 95       	ror	r30
     cd8:	07 94       	ror	r0
     cda:	f6 95       	lsr	r31
     cdc:	e7 95       	ror	r30
     cde:	07 94       	ror	r0
     ce0:	fe 2f       	mov	r31, r30
     ce2:	e0 2d       	mov	r30, r0
     ce4:	8e 0f       	add	r24, r30
     ce6:	9f 1f       	adc	r25, r31
     ce8:	fc 01       	movw	r30, r24
     cea:	e8 52       	subi	r30, 0x28	; 40
     cec:	ff 4d       	sbci	r31, 0xDF	; 223
     cee:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cf0:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     cf2:	00 23       	and	r16, r16
     cf4:	29 f0       	breq	.+10     	; 0xd00 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     cf6:	f1 2e       	mov	r15, r17
     cf8:	11 0f       	add	r17, r17
     cfa:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     cfc:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     cfe:	ca cf       	rjmp	.-108    	; 0xc94 <udi_cdc_multi_putc+0x20>
	}
	return true;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
}
     d04:	0f 90       	pop	r0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	08 95       	ret

00000d12 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     d12:	bc 01       	movw	r22, r24
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	ae cf       	rjmp	.-164    	; 0xc74 <udi_cdc_multi_putc>
}
     d18:	08 95       	ret

00000d1a <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
     d1a:	5f 92       	push	r5
     d1c:	6f 92       	push	r6
     d1e:	7f 92       	push	r7
     d20:	8f 92       	push	r8
     d22:	9f 92       	push	r9
     d24:	af 92       	push	r10
     d26:	bf 92       	push	r11
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	1f 92       	push	r1
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	4b 01       	movw	r8, r22
     d40:	5a 01       	movw	r10, r20

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
     d42:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udi_cdc_line_coding+0x6>
     d46:	89 30       	cpi	r24, 0x09	; 9
     d48:	11 f4       	brne	.+4      	; 0xd4e <udi_cdc_multi_write_buf+0x34>
		size *=2;
     d4a:	aa 0c       	add	r10, r10
     d4c:	bb 1c       	adc	r11, r11

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
     d4e:	68 94       	set
     d50:	66 24       	eor	r6, r6
     d52:	66 f8       	bld	r6, 6
     d54:	71 2c       	mov	r7, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	83 df       	rcall	.-250    	; 0xc60 <udi_cdc_multi_is_tx_ready>
     d5a:	81 11       	cpse	r24, r1
     d5c:	07 c0       	rjmp	.+14     	; 0xd6c <udi_cdc_multi_write_buf+0x52>
		if (!udi_cdc_data_running) {
     d5e:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udi_cdc_data_running>
     d62:	81 11       	cpse	r24, r1
     d64:	f8 cf       	rjmp	.-16     	; 0xd56 <udi_cdc_multi_write_buf+0x3c>
     d66:	8a 2d       	mov	r24, r10
     d68:	9b 2d       	mov	r25, r11
     d6a:	3a c0       	rjmp	.+116    	; 0xde0 <udi_cdc_multi_write_buf+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d6c:	8f b7       	in	r24, 0x3f	; 63
     d6e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d70:	f8 94       	cli
	return flags;
     d72:	59 80       	ldd	r5, Y+1	; 0x01
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     d74:	00 91 d2 20 	lds	r16, 0x20D2	; 0x8020d2 <udi_cdc_tx_buf_sel>
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     d78:	10 e0       	ldi	r17, 0x00	; 0
     d7a:	f8 01       	movw	r30, r16
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	ed 52       	subi	r30, 0x2D	; 45
     d82:	ff 4d       	sbci	r31, 0xDF	; 223
     d84:	e0 80       	ld	r14, Z
     d86:	f1 80       	ldd	r15, Z+1	; 0x01
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
     d88:	c3 01       	movw	r24, r6
     d8a:	8e 19       	sub	r24, r14
     d8c:	9f 09       	sbc	r25, r15
     d8e:	65 01       	movw	r12, r10
     d90:	8a 15       	cp	r24, r10
     d92:	9b 05       	cpc	r25, r11
     d94:	08 f4       	brcc	.+2      	; 0xd98 <udi_cdc_multi_write_buf+0x7e>
     d96:	6c 01       	movw	r12, r24
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
     d98:	c8 01       	movw	r24, r16
     d9a:	00 24       	eor	r0, r0
     d9c:	96 95       	lsr	r25
     d9e:	87 95       	ror	r24
     da0:	07 94       	ror	r0
     da2:	96 95       	lsr	r25
     da4:	87 95       	ror	r24
     da6:	07 94       	ror	r0
     da8:	98 2f       	mov	r25, r24
     daa:	80 2d       	mov	r24, r0
     dac:	8e 0d       	add	r24, r14
     dae:	9f 1d       	adc	r25, r15
     db0:	a6 01       	movw	r20, r12
     db2:	b4 01       	movw	r22, r8
     db4:	88 52       	subi	r24, 0x28	; 40
     db6:	9f 4d       	sbci	r25, 0xDF	; 223
     db8:	0e 94 47 14 	call	0x288e	; 0x288e <memcpy>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
     dbc:	00 0f       	add	r16, r16
     dbe:	11 1f       	adc	r17, r17
     dc0:	f8 01       	movw	r30, r16
     dc2:	ed 52       	subi	r30, 0x2D	; 45
     dc4:	ff 4d       	sbci	r31, 0xDF	; 223
     dc6:	ec 0c       	add	r14, r12
     dc8:	fd 1c       	adc	r15, r13
     dca:	e0 82       	st	Z, r14
     dcc:	f1 82       	std	Z+1, r15	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     dce:	5f be       	out	0x3f, r5	; 63
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
     dd0:	8c 0c       	add	r8, r12
     dd2:	9d 1c       	adc	r9, r13
	size -= copy_nb;
     dd4:	ac 18       	sub	r10, r12
     dd6:	bd 08       	sbc	r11, r13

	if (size) {
     dd8:	09 f0       	breq	.+2      	; 0xddc <udi_cdc_multi_write_buf+0xc2>
     dda:	bd cf       	rjmp	.-134    	; 0xd56 <udi_cdc_multi_write_buf+0x3c>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
}
     de0:	0f 90       	pop	r0
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	bf 90       	pop	r11
     df4:	af 90       	pop	r10
     df6:	9f 90       	pop	r9
     df8:	8f 90       	pop	r8
     dfa:	7f 90       	pop	r7
     dfc:	6f 90       	pop	r6
     dfe:	5f 90       	pop	r5
     e00:	08 95       	ret

00000e02 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
     e02:	ab 01       	movw	r20, r22
	return udi_cdc_multi_write_buf(0, buf, size);
     e04:	bc 01       	movw	r22, r24
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	88 cf       	rjmp	.-240    	; 0xd1a <udi_cdc_multi_write_buf>
}
     e0a:	08 95       	ret

00000e0c <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     e0c:	e0 91 fe 21 	lds	r30, 0x21FE	; 0x8021fe <udc_ptr_conf>
     e10:	f0 91 ff 21 	lds	r31, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
     e14:	01 90       	ld	r0, Z+
     e16:	f0 81       	ld	r31, Z
     e18:	e0 2d       	mov	r30, r0
     e1a:	22 81       	ldd	r18, Z+2	; 0x02
     e1c:	33 81       	ldd	r19, Z+3	; 0x03
     e1e:	2e 0f       	add	r18, r30
     e20:	3f 1f       	adc	r19, r31
     e22:	fc 01       	movw	r30, r24
     e24:	40 81       	ld	r20, Z
     e26:	e4 0f       	add	r30, r20
     e28:	f1 1d       	adc	r31, r1
     e2a:	e2 17       	cp	r30, r18
     e2c:	f3 07       	cpc	r31, r19
     e2e:	b8 f4       	brcc	.+46     	; 0xe5e <udc_next_desc_in_iface+0x52>
     e30:	81 81       	ldd	r24, Z+1	; 0x01
     e32:	84 30       	cpi	r24, 0x04	; 4
     e34:	b9 f0       	breq	.+46     	; 0xe64 <udc_next_desc_in_iface+0x58>
     e36:	86 13       	cpse	r24, r22
     e38:	09 c0       	rjmp	.+18     	; 0xe4c <udc_next_desc_in_iface+0x40>
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <udc_next_desc_in_iface+0x3a>
     e3c:	81 81       	ldd	r24, Z+1	; 0x01
     e3e:	84 30       	cpi	r24, 0x04	; 4
     e40:	a1 f0       	breq	.+40     	; 0xe6a <udc_next_desc_in_iface+0x5e>
     e42:	86 13       	cpse	r24, r22
     e44:	03 c0       	rjmp	.+6      	; 0xe4c <udc_next_desc_in_iface+0x40>
     e46:	8e 2f       	mov	r24, r30
     e48:	9f 2f       	mov	r25, r31
     e4a:	08 95       	ret
     e4c:	80 81       	ld	r24, Z
     e4e:	e8 0f       	add	r30, r24
     e50:	f1 1d       	adc	r31, r1
     e52:	e2 17       	cp	r30, r18
     e54:	f3 07       	cpc	r31, r19
     e56:	90 f3       	brcs	.-28     	; 0xe3c <udc_next_desc_in_iface+0x30>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	08 95       	ret
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	08 95       	ret
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	08 95       	ret
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	08 95       	ret

00000e70 <udc_valid_address>:
     e70:	80 91 3a 23 	lds	r24, 0x233A	; 0x80233a <udd_g_ctrlreq+0x2>
     e74:	8f 77       	andi	r24, 0x7F	; 127
     e76:	95 c7       	rjmp	.+3882   	; 0x1da2 <udd_set_address>
     e78:	08 95       	ret

00000e7a <udc_update_iface_desc>:
     e7a:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udc_num_configuration>
     e7e:	99 23       	and	r25, r25
     e80:	81 f1       	breq	.+96     	; 0xee2 <udc_update_iface_desc+0x68>
     e82:	e0 91 fe 21 	lds	r30, 0x21FE	; 0x8021fe <udc_ptr_conf>
     e86:	f0 91 ff 21 	lds	r31, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
     e8a:	01 90       	ld	r0, Z+
     e8c:	f0 81       	ld	r31, Z
     e8e:	e0 2d       	mov	r30, r0
     e90:	94 81       	ldd	r25, Z+4	; 0x04
     e92:	89 17       	cp	r24, r25
     e94:	40 f5       	brcc	.+80     	; 0xee6 <udc_update_iface_desc+0x6c>
     e96:	e0 93 fc 21 	sts	0x21FC, r30	; 0x8021fc <udc_ptr_iface>
     e9a:	f0 93 fd 21 	sts	0x21FD, r31	; 0x8021fd <udc_ptr_iface+0x1>
     e9e:	22 81       	ldd	r18, Z+2	; 0x02
     ea0:	33 81       	ldd	r19, Z+3	; 0x03
     ea2:	2e 0f       	add	r18, r30
     ea4:	3f 1f       	adc	r19, r31
     ea6:	e2 17       	cp	r30, r18
     ea8:	f3 07       	cpc	r31, r19
     eaa:	f8 f4       	brcc	.+62     	; 0xeea <udc_update_iface_desc+0x70>
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	61 f4       	brne	.+24     	; 0xeca <udc_update_iface_desc+0x50>
     eb2:	92 81       	ldd	r25, Z+2	; 0x02
     eb4:	98 13       	cpse	r25, r24
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <udc_update_iface_desc+0x50>
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	96 13       	cpse	r25, r22
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <udc_update_iface_desc+0x50>
     ebe:	e0 93 fc 21 	sts	0x21FC, r30	; 0x8021fc <udc_ptr_iface>
     ec2:	f0 93 fd 21 	sts	0x21FD, r31	; 0x8021fd <udc_ptr_iface+0x1>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	08 95       	ret
     eca:	90 81       	ld	r25, Z
     ecc:	e9 0f       	add	r30, r25
     ece:	f1 1d       	adc	r31, r1
     ed0:	e2 17       	cp	r30, r18
     ed2:	f3 07       	cpc	r31, r19
     ed4:	58 f3       	brcs	.-42     	; 0xeac <udc_update_iface_desc+0x32>
     ed6:	e0 93 fc 21 	sts	0x21FC, r30	; 0x8021fc <udc_ptr_iface>
     eda:	f0 93 fd 21 	sts	0x21FD, r31	; 0x8021fd <udc_ptr_iface+0x1>
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	08 95       	ret
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	08 95       	ret
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	08 95       	ret
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	08 95       	ret

00000eee <udc_iface_disable>:
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	c8 2f       	mov	r28, r24
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	be df       	rcall	.-132    	; 0xe7a <udc_update_iface_desc>
     efe:	18 2f       	mov	r17, r24
     f00:	88 23       	and	r24, r24
     f02:	81 f1       	breq	.+96     	; 0xf64 <udc_iface_disable+0x76>
     f04:	a0 91 fe 21 	lds	r26, 0x21FE	; 0x8021fe <udc_ptr_conf>
     f08:	b0 91 ff 21 	lds	r27, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
     f0c:	ec 2f       	mov	r30, r28
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	12 96       	adiw	r26, 0x02	; 2
     f16:	8d 91       	ld	r24, X+
     f18:	9c 91       	ld	r25, X
     f1a:	13 97       	sbiw	r26, 0x03	; 3
     f1c:	e8 0f       	add	r30, r24
     f1e:	f9 1f       	adc	r31, r25
     f20:	e0 80       	ld	r14, Z
     f22:	f1 80       	ldd	r15, Z+1	; 0x01
     f24:	d7 01       	movw	r26, r14
     f26:	16 96       	adiw	r26, 0x06	; 6
     f28:	ed 91       	ld	r30, X+
     f2a:	fc 91       	ld	r31, X
     f2c:	17 97       	sbiw	r26, 0x07	; 7
     f2e:	19 95       	eicall
     f30:	68 2f       	mov	r22, r24
     f32:	8c 2f       	mov	r24, r28
     f34:	a2 df       	rcall	.-188    	; 0xe7a <udc_update_iface_desc>
     f36:	18 2f       	mov	r17, r24
     f38:	88 23       	and	r24, r24
     f3a:	a1 f0       	breq	.+40     	; 0xf64 <udc_iface_disable+0x76>
     f3c:	c0 91 fc 21 	lds	r28, 0x21FC	; 0x8021fc <udc_ptr_iface>
     f40:	d0 91 fd 21 	lds	r29, 0x21FD	; 0x8021fd <udc_ptr_iface+0x1>
     f44:	65 e0       	ldi	r22, 0x05	; 5
     f46:	ce 01       	movw	r24, r28
     f48:	61 df       	rcall	.-318    	; 0xe0c <udc_next_desc_in_iface>
     f4a:	ec 01       	movw	r28, r24
     f4c:	89 2b       	or	r24, r25
     f4e:	21 f0       	breq	.+8      	; 0xf58 <udc_iface_disable+0x6a>
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <udd_ep_free>
     f56:	f6 cf       	rjmp	.-20     	; 0xf44 <udc_iface_disable+0x56>
     f58:	d7 01       	movw	r26, r14
     f5a:	12 96       	adiw	r26, 0x02	; 2
     f5c:	ed 91       	ld	r30, X+
     f5e:	fc 91       	ld	r31, X
     f60:	13 97       	sbiw	r26, 0x03	; 3
     f62:	19 95       	eicall
     f64:	81 2f       	mov	r24, r17
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	08 95       	ret

00000f72 <udc_iface_enable>:
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	18 2f       	mov	r17, r24
     f7a:	7f df       	rcall	.-258    	; 0xe7a <udc_update_iface_desc>
     f7c:	88 23       	and	r24, r24
     f7e:	39 f1       	breq	.+78     	; 0xfce <udc_iface_enable+0x5c>
     f80:	c0 91 fc 21 	lds	r28, 0x21FC	; 0x8021fc <udc_ptr_iface>
     f84:	d0 91 fd 21 	lds	r29, 0x21FD	; 0x8021fd <udc_ptr_iface+0x1>
     f88:	65 e0       	ldi	r22, 0x05	; 5
     f8a:	ce 01       	movw	r24, r28
     f8c:	3f df       	rcall	.-386    	; 0xe0c <udc_next_desc_in_iface>
     f8e:	ec 01       	movw	r28, r24
     f90:	89 2b       	or	r24, r25
     f92:	41 f0       	breq	.+16     	; 0xfa4 <udc_iface_enable+0x32>
     f94:	4c 81       	ldd	r20, Y+4	; 0x04
     f96:	5d 81       	ldd	r21, Y+5	; 0x05
     f98:	6b 81       	ldd	r22, Y+3	; 0x03
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	17 d7       	rcall	.+3630   	; 0x1dcc <udd_ep_alloc>
     f9e:	81 11       	cpse	r24, r1
     fa0:	f3 cf       	rjmp	.-26     	; 0xf88 <udc_iface_enable+0x16>
     fa2:	15 c0       	rjmp	.+42     	; 0xfce <udc_iface_enable+0x5c>
     fa4:	a0 91 fe 21 	lds	r26, 0x21FE	; 0x8021fe <udc_ptr_conf>
     fa8:	b0 91 ff 21 	lds	r27, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
     fac:	e1 2f       	mov	r30, r17
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	12 96       	adiw	r26, 0x02	; 2
     fb6:	8d 91       	ld	r24, X+
     fb8:	9c 91       	ld	r25, X
     fba:	13 97       	sbiw	r26, 0x03	; 3
     fbc:	e8 0f       	add	r30, r24
     fbe:	f9 1f       	adc	r31, r25
     fc0:	01 90       	ld	r0, Z+
     fc2:	f0 81       	ld	r31, Z
     fc4:	e0 2d       	mov	r30, r0
     fc6:	01 90       	ld	r0, Z+
     fc8:	f0 81       	ld	r31, Z
     fca:	e0 2d       	mov	r30, r0
     fcc:	19 95       	eicall
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	08 95       	ret

00000fd6 <udc_start>:
     fd6:	60 c6       	rjmp	.+3264   	; 0x1c98 <udd_enable>
     fd8:	08 95       	ret

00000fda <udc_reset>:
     fda:	cf 93       	push	r28
     fdc:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <udc_num_configuration>
     fe0:	88 23       	and	r24, r24
     fe2:	c1 f0       	breq	.+48     	; 0x1014 <udc_reset+0x3a>
     fe4:	e0 91 fe 21 	lds	r30, 0x21FE	; 0x8021fe <udc_ptr_conf>
     fe8:	f0 91 ff 21 	lds	r31, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
     fec:	01 90       	ld	r0, Z+
     fee:	f0 81       	ld	r31, Z
     ff0:	e0 2d       	mov	r30, r0
     ff2:	84 81       	ldd	r24, Z+4	; 0x04
     ff4:	88 23       	and	r24, r24
     ff6:	71 f0       	breq	.+28     	; 0x1014 <udc_reset+0x3a>
     ff8:	c0 e0       	ldi	r28, 0x00	; 0
     ffa:	8c 2f       	mov	r24, r28
     ffc:	78 df       	rcall	.-272    	; 0xeee <udc_iface_disable>
     ffe:	cf 5f       	subi	r28, 0xFF	; 255
    1000:	e0 91 fe 21 	lds	r30, 0x21FE	; 0x8021fe <udc_ptr_conf>
    1004:	f0 91 ff 21 	lds	r31, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
    1008:	01 90       	ld	r0, Z+
    100a:	f0 81       	ld	r31, Z
    100c:	e0 2d       	mov	r30, r0
    100e:	84 81       	ldd	r24, Z+4	; 0x04
    1010:	c8 17       	cp	r28, r24
    1012:	98 f3       	brcs	.-26     	; 0xffa <udc_reset+0x20>
    1014:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udc_num_configuration>
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	80 93 04 22 	sts	0x2204, r24	; 0x802204 <udc_device_status>
    1020:	90 93 05 22 	sts	0x2205, r25	; 0x802205 <udc_device_status+0x1>
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1028:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    102a:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <udc_num_configuration>
    102e:	88 23       	and	r24, r24
    1030:	49 f1       	breq	.+82     	; 0x1084 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1032:	a0 91 fe 21 	lds	r26, 0x21FE	; 0x8021fe <udc_ptr_conf>
    1036:	b0 91 ff 21 	lds	r27, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
    103a:	ed 91       	ld	r30, X+
    103c:	fc 91       	ld	r31, X
    103e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1040:	84 81       	ldd	r24, Z+4	; 0x04
    1042:	88 23       	and	r24, r24
    1044:	f9 f0       	breq	.+62     	; 0x1084 <udc_sof_notify+0x5c>
    1046:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1048:	ec 2f       	mov	r30, r28
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	12 96       	adiw	r26, 0x02	; 2
    1052:	8d 91       	ld	r24, X+
    1054:	9c 91       	ld	r25, X
    1056:	13 97       	sbiw	r26, 0x03	; 3
    1058:	e8 0f       	add	r30, r24
    105a:	f9 1f       	adc	r31, r25
    105c:	01 90       	ld	r0, Z+
    105e:	f0 81       	ld	r31, Z
    1060:	e0 2d       	mov	r30, r0
    1062:	00 84       	ldd	r0, Z+8	; 0x08
    1064:	f1 85       	ldd	r31, Z+9	; 0x09
    1066:	e0 2d       	mov	r30, r0
    1068:	30 97       	sbiw	r30, 0x00	; 0
    106a:	09 f0       	breq	.+2      	; 0x106e <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    106c:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    106e:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1070:	a0 91 fe 21 	lds	r26, 0x21FE	; 0x8021fe <udc_ptr_conf>
    1074:	b0 91 ff 21 	lds	r27, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
    1078:	ed 91       	ld	r30, X+
    107a:	fc 91       	ld	r31, X
    107c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    107e:	84 81       	ldd	r24, Z+4	; 0x04
    1080:	c8 17       	cp	r28, r24
    1082:	10 f3       	brcs	.-60     	; 0x1048 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1090:	e8 e3       	ldi	r30, 0x38	; 56
    1092:	f3 e2       	ldi	r31, 0x23	; 35
    1094:	12 86       	std	Z+10, r1	; 0x0a
    1096:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1098:	14 86       	std	Z+12, r1	; 0x0c
    109a:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    109c:	16 86       	std	Z+14, r1	; 0x0e
    109e:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    10a0:	80 81       	ld	r24, Z
    10a2:	88 23       	and	r24, r24
    10a4:	0c f0       	brlt	.+2      	; 0x10a8 <udc_process_setup+0x20>
    10a6:	5a c2       	rjmp	.+1204   	; 0x155c <udc_process_setup+0x4d4>
		if (udd_g_ctrlreq.req.wLength == 0) {
    10a8:	20 91 3e 23 	lds	r18, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
    10ac:	30 91 3f 23 	lds	r19, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
    10b0:	21 15       	cp	r18, r1
    10b2:	31 05       	cpc	r19, r1
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <udc_process_setup+0x30>
    10b6:	57 c2       	rjmp	.+1198   	; 0x1566 <udc_process_setup+0x4de>
    10b8:	4d c2       	rjmp	.+1178   	; 0x1554 <udc_process_setup+0x4cc>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    10ba:	8f 71       	andi	r24, 0x1F	; 31
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <udc_process_setup+0x38>
    10be:	a3 c0       	rjmp	.+326    	; 0x1206 <udc_process_setup+0x17e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    10c0:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x1>
    10c4:	96 30       	cpi	r25, 0x06	; 6
    10c6:	79 f0       	breq	.+30     	; 0x10e6 <udc_process_setup+0x5e>
    10c8:	98 30       	cpi	r25, 0x08	; 8
    10ca:	09 f4       	brne	.+2      	; 0x10ce <udc_process_setup+0x46>
    10cc:	92 c0       	rjmp	.+292    	; 0x11f2 <udc_process_setup+0x16a>
    10ce:	91 11       	cpse	r25, r1
    10d0:	9a c0       	rjmp	.+308    	; 0x1206 <udc_process_setup+0x17e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	09 f0       	breq	.+2      	; 0x10da <udc_process_setup+0x52>
    10d8:	c6 c1       	rjmp	.+908    	; 0x1466 <udc_process_setup+0x3de>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    10da:	62 e0       	ldi	r22, 0x02	; 2
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	84 e0       	ldi	r24, 0x04	; 4
    10e0:	92 e2       	ldi	r25, 0x22	; 34
    10e2:	6d d6       	rcall	.+3290   	; 0x1dbe <udd_set_setup_payload>
    10e4:	45 c2       	rjmp	.+1162   	; 0x1570 <udc_process_setup+0x4e8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    10e6:	80 91 3a 23 	lds	r24, 0x233A	; 0x80233a <udd_g_ctrlreq+0x2>
    10ea:	90 91 3b 23 	lds	r25, 0x233B	; 0x80233b <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    10ee:	29 2f       	mov	r18, r25
    10f0:	33 27       	eor	r19, r19
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	a9 f0       	breq	.+42     	; 0x1122 <udc_process_setup+0x9a>
    10f8:	24 f4       	brge	.+8      	; 0x1102 <udc_process_setup+0x7a>
    10fa:	21 30       	cpi	r18, 0x01	; 1
    10fc:	31 05       	cpc	r19, r1
    10fe:	41 f0       	breq	.+16     	; 0x1110 <udc_process_setup+0x88>
    1100:	a9 c1       	rjmp	.+850    	; 0x1454 <udc_process_setup+0x3cc>
    1102:	23 30       	cpi	r18, 0x03	; 3
    1104:	31 05       	cpc	r19, r1
    1106:	d9 f1       	breq	.+118    	; 0x117e <udc_process_setup+0xf6>
    1108:	2f 30       	cpi	r18, 0x0F	; 15
    110a:	31 05       	cpc	r19, r1
    110c:	51 f1       	breq	.+84     	; 0x1162 <udc_process_setup+0xda>
    110e:	a2 c1       	rjmp	.+836    	; 0x1454 <udc_process_setup+0x3cc>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1110:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config>
    1114:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1118:	dc 01       	movw	r26, r24
    111a:	6c 91       	ld	r22, X
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	4f d6       	rcall	.+3230   	; 0x1dbe <udd_set_setup_payload>
    1120:	59 c0       	rjmp	.+178    	; 0x11d4 <udc_process_setup+0x14c>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1122:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    1126:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
    112a:	21 89       	ldd	r18, Z+17	; 0x11
    112c:	82 17       	cp	r24, r18
    112e:	08 f0       	brcs	.+2      	; 0x1132 <udc_process_setup+0xaa>
    1130:	9a c1       	rjmp	.+820    	; 0x1466 <udc_process_setup+0x3de>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1132:	99 27       	eor	r25, r25
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    1140:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    1144:	e8 0f       	add	r30, r24
    1146:	f9 1f       	adc	r31, r25
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    114c:	fc 01       	movw	r30, r24
    114e:	62 81       	ldd	r22, Z+2	; 0x02
    1150:	73 81       	ldd	r23, Z+3	; 0x03
    1152:	35 d6       	rcall	.+3178   	; 0x1dbe <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1154:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <udd_g_ctrlreq+0x8>
    1158:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <udd_g_ctrlreq+0x9>
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	81 83       	std	Z+1, r24	; 0x01
    1160:	39 c0       	rjmp	.+114    	; 0x11d4 <udc_process_setup+0x14c>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1162:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <udc_config+0x4>
    1166:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <udc_config+0x5>
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	09 f4       	brne	.+2      	; 0x1170 <udc_process_setup+0xe8>
    116e:	7b c1       	rjmp	.+758    	; 0x1466 <udc_process_setup+0x3de>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1170:	dc 01       	movw	r26, r24
    1172:	12 96       	adiw	r26, 0x02	; 2
    1174:	6d 91       	ld	r22, X+
    1176:	7c 91       	ld	r23, X
    1178:	13 97       	sbiw	r26, 0x03	; 3
    117a:	21 d6       	rcall	.+3138   	; 0x1dbe <udd_set_setup_payload>
    117c:	2b c0       	rjmp	.+86     	; 0x11d4 <udc_process_setup+0x14c>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    117e:	99 27       	eor	r25, r25
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	71 f0       	breq	.+28     	; 0x11a2 <udc_process_setup+0x11a>
    1186:	38 f0       	brcs	.+14     	; 0x1196 <udc_process_setup+0x10e>
    1188:	02 97       	sbiw	r24, 0x02	; 2
    118a:	09 f0       	breq	.+2      	; 0x118e <udc_process_setup+0x106>
    118c:	6c c1       	rjmp	.+728    	; 0x1466 <udc_process_setup+0x3de>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    118e:	88 e9       	ldi	r24, 0x98	; 152
    1190:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1192:	2f e0       	ldi	r18, 0x0F	; 15
    1194:	09 c0       	rjmp	.+18     	; 0x11a8 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1196:	64 e0       	ldi	r22, 0x04	; 4
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	82 eb       	ldi	r24, 0xB2	; 178
    119c:	90 e2       	ldi	r25, 0x20	; 32
    119e:	0f d6       	rcall	.+3102   	; 0x1dbe <udd_set_setup_payload>
    11a0:	19 c0       	rjmp	.+50     	; 0x11d4 <udc_process_setup+0x14c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    11a2:	88 ea       	ldi	r24, 0xA8	; 168
    11a4:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    11a6:	29 e0       	ldi	r18, 0x09	; 9
    11a8:	38 2f       	mov	r19, r24
    11aa:	aa e7       	ldi	r26, 0x7A	; 122
    11ac:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    11ae:	e8 2f       	mov	r30, r24
    11b0:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    11b2:	81 91       	ld	r24, Z+
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	8d 93       	st	X+, r24
    11b8:	9d 93       	st	X+, r25
    11ba:	8e 2f       	mov	r24, r30
    11bc:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    11be:	82 17       	cp	r24, r18
    11c0:	c0 f3       	brcs	.-16     	; 0x11b2 <udc_process_setup+0x12a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    11c2:	62 2f       	mov	r22, r18
    11c4:	66 0f       	add	r22, r22
    11c6:	6e 5f       	subi	r22, 0xFE	; 254
    11c8:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <udc_string_desc>
		udd_set_setup_payload(
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	88 e7       	ldi	r24, 0x78	; 120
    11d0:	90 e2       	ldi	r25, 0x20	; 32
    11d2:	f5 d5       	rcall	.+3050   	; 0x1dbe <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    11d4:	e8 e3       	ldi	r30, 0x38	; 56
    11d6:	f3 e2       	ldi	r31, 0x23	; 35
    11d8:	86 81       	ldd	r24, Z+6	; 0x06
    11da:	97 81       	ldd	r25, Z+7	; 0x07
    11dc:	22 85       	ldd	r18, Z+10	; 0x0a
    11de:	33 85       	ldd	r19, Z+11	; 0x0b
    11e0:	82 17       	cp	r24, r18
    11e2:	93 07       	cpc	r25, r19
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <udc_process_setup+0x160>
    11e6:	c4 c1       	rjmp	.+904    	; 0x1570 <udc_process_setup+0x4e8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    11e8:	80 93 42 23 	sts	0x2342, r24	; 0x802342 <udd_g_ctrlreq+0xa>
    11ec:	90 93 43 23 	sts	0x2343, r25	; 0x802343 <udd_g_ctrlreq+0xb>
    11f0:	bf c1       	rjmp	.+894    	; 0x1570 <udc_process_setup+0x4e8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    11f2:	21 30       	cpi	r18, 0x01	; 1
    11f4:	31 05       	cpc	r19, r1
    11f6:	09 f0       	breq	.+2      	; 0x11fa <udc_process_setup+0x172>
    11f8:	36 c1       	rjmp	.+620    	; 0x1466 <udc_process_setup+0x3de>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	92 e2       	ldi	r25, 0x22	; 34
    1202:	dd d5       	rcall	.+3002   	; 0x1dbe <udd_set_setup_payload>
    1204:	b5 c1       	rjmp	.+874    	; 0x1570 <udc_process_setup+0x4e8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	e1 f5       	brne	.+120    	; 0x1282 <udc_process_setup+0x1fa>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    120a:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x1>
    120e:	9a 30       	cpi	r25, 0x0A	; 10
    1210:	c1 f5       	brne	.+112    	; 0x1282 <udc_process_setup+0x1fa>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1212:	21 30       	cpi	r18, 0x01	; 1
    1214:	31 05       	cpc	r19, r1
    1216:	09 f0       	breq	.+2      	; 0x121a <udc_process_setup+0x192>
    1218:	26 c1       	rjmp	.+588    	; 0x1466 <udc_process_setup+0x3de>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    121a:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <udc_num_configuration>
    121e:	88 23       	and	r24, r24
    1220:	09 f4       	brne	.+2      	; 0x1224 <udc_process_setup+0x19c>
    1222:	21 c1       	rjmp	.+578    	; 0x1466 <udc_process_setup+0x3de>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1224:	c0 91 3c 23 	lds	r28, 0x233C	; 0x80233c <udd_g_ctrlreq+0x4>
    1228:	d0 91 3d 23 	lds	r29, 0x233D	; 0x80233d <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    122c:	00 91 fe 21 	lds	r16, 0x21FE	; 0x8021fe <udc_ptr_conf>
    1230:	10 91 ff 21 	lds	r17, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
    1234:	d8 01       	movw	r26, r16
    1236:	ed 91       	ld	r30, X+
    1238:	fc 91       	ld	r31, X
    123a:	84 81       	ldd	r24, Z+4	; 0x04
    123c:	c8 17       	cp	r28, r24
    123e:	08 f0       	brcs	.+2      	; 0x1242 <udc_process_setup+0x1ba>
    1240:	12 c1       	rjmp	.+548    	; 0x1466 <udc_process_setup+0x3de>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	8c 2f       	mov	r24, r28
    1246:	19 de       	rcall	.-974    	; 0xe7a <udc_update_iface_desc>
    1248:	88 23       	and	r24, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <udc_process_setup+0x1c6>
    124c:	0c c1       	rjmp	.+536    	; 0x1466 <udc_process_setup+0x3de>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    124e:	ce 01       	movw	r24, r28
    1250:	99 27       	eor	r25, r25
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	d8 01       	movw	r26, r16
    1258:	12 96       	adiw	r26, 0x02	; 2
    125a:	ed 91       	ld	r30, X+
    125c:	fc 91       	ld	r31, X
    125e:	13 97       	sbiw	r26, 0x03	; 3
    1260:	e8 0f       	add	r30, r24
    1262:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1264:	01 90       	ld	r0, Z+
    1266:	f0 81       	ld	r31, Z
    1268:	e0 2d       	mov	r30, r0
    126a:	86 81       	ldd	r24, Z+6	; 0x06
    126c:	97 81       	ldd	r25, Z+7	; 0x07
    126e:	fc 01       	movw	r30, r24
    1270:	19 95       	eicall
    1272:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	92 e2       	ldi	r25, 0x22	; 34
    127e:	9f d5       	rcall	.+2878   	; 0x1dbe <udd_set_setup_payload>
    1280:	77 c1       	rjmp	.+750    	; 0x1570 <udc_process_setup+0x4e8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1282:	82 30       	cpi	r24, 0x02	; 2
    1284:	09 f0       	breq	.+2      	; 0x1288 <udc_process_setup+0x200>
    1286:	ef c0       	rjmp	.+478    	; 0x1466 <udc_process_setup+0x3de>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1288:	80 91 39 23 	lds	r24, 0x2339	; 0x802339 <udd_g_ctrlreq+0x1>
    128c:	81 11       	cpse	r24, r1
    128e:	e4 c0       	rjmp	.+456    	; 0x1458 <udc_process_setup+0x3d0>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	09 f0       	breq	.+2      	; 0x1298 <udc_process_setup+0x210>
    1296:	e7 c0       	rjmp	.+462    	; 0x1466 <udc_process_setup+0x3de>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1298:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <udd_g_ctrlreq+0x4>
    129c:	1f d6       	rcall	.+3134   	; 0x1edc <udd_ep_is_halted>
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <udc_ep_status.4680>
    12a4:	90 93 fb 21 	sts	0x21FB, r25	; 0x8021fb <udc_ep_status.4680+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    12a8:	62 e0       	ldi	r22, 0x02	; 2
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	8a ef       	ldi	r24, 0xFA	; 250
    12ae:	91 e2       	ldi	r25, 0x21	; 33
    12b0:	86 d5       	rcall	.+2828   	; 0x1dbe <udd_set_setup_payload>
    12b2:	5e c1       	rjmp	.+700    	; 0x1570 <udc_process_setup+0x4e8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    12b4:	8f 71       	andi	r24, 0x1F	; 31
    12b6:	09 f0       	breq	.+2      	; 0x12ba <udc_process_setup+0x232>
    12b8:	83 c0       	rjmp	.+262    	; 0x13c0 <udc_process_setup+0x338>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    12ba:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x1>
    12be:	93 30       	cpi	r25, 0x03	; 3
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <udc_process_setup+0x23c>
    12c2:	cc c0       	rjmp	.+408    	; 0x145c <udc_process_setup+0x3d4>
    12c4:	18 f4       	brcc	.+6      	; 0x12cc <udc_process_setup+0x244>
    12c6:	91 30       	cpi	r25, 0x01	; 1
    12c8:	a1 f0       	breq	.+40     	; 0x12f2 <udc_process_setup+0x26a>
    12ca:	7a c0       	rjmp	.+244    	; 0x13c0 <udc_process_setup+0x338>
    12cc:	95 30       	cpi	r25, 0x05	; 5
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <udc_process_setup+0x24e>
    12d0:	99 30       	cpi	r25, 0x09	; 9
    12d2:	39 f1       	breq	.+78     	; 0x1322 <udc_process_setup+0x29a>
    12d4:	75 c0       	rjmp	.+234    	; 0x13c0 <udc_process_setup+0x338>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    12d6:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
    12da:	90 91 3f 23 	lds	r25, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
    12de:	89 2b       	or	r24, r25
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <udc_process_setup+0x25c>
    12e2:	c1 c0       	rjmp	.+386    	; 0x1466 <udc_process_setup+0x3de>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    12e4:	88 e3       	ldi	r24, 0x38	; 56
    12e6:	97 e0       	ldi	r25, 0x07	; 7
    12e8:	80 93 44 23 	sts	0x2344, r24	; 0x802344 <udd_g_ctrlreq+0xc>
    12ec:	90 93 45 23 	sts	0x2345, r25	; 0x802345 <udd_g_ctrlreq+0xd>
    12f0:	3f c1       	rjmp	.+638    	; 0x1570 <udc_process_setup+0x4e8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    12f2:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
    12f6:	90 91 3f 23 	lds	r25, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
    12fa:	89 2b       	or	r24, r25
    12fc:	09 f0       	breq	.+2      	; 0x1300 <udc_process_setup+0x278>
    12fe:	b3 c0       	rjmp	.+358    	; 0x1466 <udc_process_setup+0x3de>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1300:	80 91 3a 23 	lds	r24, 0x233A	; 0x80233a <udd_g_ctrlreq+0x2>
    1304:	90 91 3b 23 	lds	r25, 0x233B	; 0x80233b <udd_g_ctrlreq+0x3>
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	09 f0       	breq	.+2      	; 0x130e <udc_process_setup+0x286>
    130c:	ac c0       	rjmp	.+344    	; 0x1466 <udc_process_setup+0x3de>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    130e:	80 91 04 22 	lds	r24, 0x2204	; 0x802204 <udc_device_status>
    1312:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <udc_device_status+0x1>
    1316:	8d 7f       	andi	r24, 0xFD	; 253
    1318:	80 93 04 22 	sts	0x2204, r24	; 0x802204 <udc_device_status>
    131c:	90 93 05 22 	sts	0x2205, r25	; 0x802205 <udc_device_status+0x1>
    1320:	27 c1       	rjmp	.+590    	; 0x1570 <udc_process_setup+0x4e8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1322:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
    1326:	90 91 3f 23 	lds	r25, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
    132a:	89 2b       	or	r24, r25
    132c:	09 f0       	breq	.+2      	; 0x1330 <udc_process_setup+0x2a8>
    132e:	9b c0       	rjmp	.+310    	; 0x1466 <udc_process_setup+0x3de>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1330:	3b d5       	rcall	.+2678   	; 0x1da8 <udd_getaddress>
    1332:	88 23       	and	r24, r24
    1334:	09 f4       	brne	.+2      	; 0x1338 <udc_process_setup+0x2b0>
    1336:	97 c0       	rjmp	.+302    	; 0x1466 <udc_process_setup+0x3de>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1338:	20 91 3a 23 	lds	r18, 0x233A	; 0x80233a <udd_g_ctrlreq+0x2>
    133c:	30 91 3b 23 	lds	r19, 0x233B	; 0x80233b <udd_g_ctrlreq+0x3>
    1340:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1342:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    1346:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    134a:	81 89       	ldd	r24, Z+17	; 0x11
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	82 17       	cp	r24, r18
    1350:	93 07       	cpc	r25, r19
    1352:	08 f4       	brcc	.+2      	; 0x1356 <udc_process_setup+0x2ce>
    1354:	88 c0       	rjmp	.+272    	; 0x1466 <udc_process_setup+0x3de>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1356:	41 de       	rcall	.-894    	; 0xfda <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1358:	80 91 3a 23 	lds	r24, 0x233A	; 0x80233a <udd_g_ctrlreq+0x2>
    135c:	90 91 3b 23 	lds	r25, 0x233B	; 0x80233b <udd_g_ctrlreq+0x3>
    1360:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1364:	88 23       	and	r24, r24
    1366:	09 f4       	brne	.+2      	; 0x136a <udc_process_setup+0x2e2>
    1368:	03 c1       	rjmp	.+518    	; 0x1570 <udc_process_setup+0x4e8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    136a:	99 27       	eor	r25, r25
    136c:	81 50       	subi	r24, 0x01	; 1
    136e:	90 4c       	sbci	r25, 0xC0	; 192
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    137c:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    1380:	e8 0f       	add	r30, r24
    1382:	f9 1f       	adc	r31, r25
    1384:	e0 93 fe 21 	sts	0x21FE, r30	; 0x8021fe <udc_ptr_conf>
    1388:	f0 93 ff 21 	sts	0x21FF, r31	; 0x8021ff <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    138c:	01 90       	ld	r0, Z+
    138e:	f0 81       	ld	r31, Z
    1390:	e0 2d       	mov	r30, r0
    1392:	84 81       	ldd	r24, Z+4	; 0x04
    1394:	88 23       	and	r24, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <udc_process_setup+0x312>
    1398:	eb c0       	rjmp	.+470    	; 0x1570 <udc_process_setup+0x4e8>
    139a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	8c 2f       	mov	r24, r28
    13a0:	e8 dd       	rcall	.-1072   	; 0xf72 <udc_iface_enable>
    13a2:	88 23       	and	r24, r24
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <udc_process_setup+0x320>
    13a6:	5f c0       	rjmp	.+190    	; 0x1466 <udc_process_setup+0x3de>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    13a8:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13aa:	e0 91 fe 21 	lds	r30, 0x21FE	; 0x8021fe <udc_ptr_conf>
    13ae:	f0 91 ff 21 	lds	r31, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
    13b2:	01 90       	ld	r0, Z+
    13b4:	f0 81       	ld	r31, Z
    13b6:	e0 2d       	mov	r30, r0
    13b8:	84 81       	ldd	r24, Z+4	; 0x04
    13ba:	c8 17       	cp	r28, r24
    13bc:	78 f3       	brcs	.-34     	; 0x139c <udc_process_setup+0x314>
    13be:	d8 c0       	rjmp	.+432    	; 0x1570 <udc_process_setup+0x4e8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	e1 f4       	brne	.+56     	; 0x13fc <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    13c4:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <udd_g_ctrlreq+0x1>
    13c8:	9b 30       	cpi	r25, 0x0B	; 11
    13ca:	c1 f4       	brne	.+48     	; 0x13fc <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    13cc:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
    13d0:	90 91 3f 23 	lds	r25, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
    13d4:	89 2b       	or	r24, r25
    13d6:	09 f0       	breq	.+2      	; 0x13da <udc_process_setup+0x352>
    13d8:	46 c0       	rjmp	.+140    	; 0x1466 <udc_process_setup+0x3de>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    13da:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <udc_num_configuration>
    13de:	88 23       	and	r24, r24
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <udc_process_setup+0x35c>
    13e2:	41 c0       	rjmp	.+130    	; 0x1466 <udc_process_setup+0x3de>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    13e4:	e8 e3       	ldi	r30, 0x38	; 56
    13e6:	f3 e2       	ldi	r31, 0x23	; 35
    13e8:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    13ea:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    13ec:	8c 2f       	mov	r24, r28
    13ee:	7f dd       	rcall	.-1282   	; 0xeee <udc_iface_disable>
    13f0:	88 23       	and	r24, r24
    13f2:	c9 f1       	breq	.+114    	; 0x1466 <udc_process_setup+0x3de>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    13f4:	6d 2f       	mov	r22, r29
    13f6:	8c 2f       	mov	r24, r28
    13f8:	bc dd       	rcall	.-1160   	; 0xf72 <udc_iface_enable>
    13fa:	33 c0       	rjmp	.+102    	; 0x1462 <udc_process_setup+0x3da>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    13fc:	82 30       	cpi	r24, 0x02	; 2
    13fe:	99 f5       	brne	.+102    	; 0x1466 <udc_process_setup+0x3de>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1400:	80 91 39 23 	lds	r24, 0x2339	; 0x802339 <udd_g_ctrlreq+0x1>
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	19 f0       	breq	.+6      	; 0x140e <udc_process_setup+0x386>
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	89 f0       	breq	.+34     	; 0x142e <udc_process_setup+0x3a6>
    140c:	29 c0       	rjmp	.+82     	; 0x1460 <udc_process_setup+0x3d8>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    140e:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
    1412:	90 91 3f 23 	lds	r25, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
    1416:	89 2b       	or	r24, r25
    1418:	31 f5       	brne	.+76     	; 0x1466 <udc_process_setup+0x3de>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    141a:	80 91 3a 23 	lds	r24, 0x233A	; 0x80233a <udd_g_ctrlreq+0x2>
    141e:	90 91 3b 23 	lds	r25, 0x233B	; 0x80233b <udd_g_ctrlreq+0x3>
    1422:	89 2b       	or	r24, r25
    1424:	01 f5       	brne	.+64     	; 0x1466 <udc_process_setup+0x3de>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1426:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <udd_g_ctrlreq+0x4>
    142a:	73 d5       	rcall	.+2790   	; 0x1f12 <udd_ep_clear_halt>
    142c:	1a c0       	rjmp	.+52     	; 0x1462 <udc_process_setup+0x3da>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    142e:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
    1432:	90 91 3f 23 	lds	r25, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
    1436:	89 2b       	or	r24, r25
    1438:	b1 f4       	brne	.+44     	; 0x1466 <udc_process_setup+0x3de>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    143a:	80 91 3a 23 	lds	r24, 0x233A	; 0x80233a <udd_g_ctrlreq+0x2>
    143e:	90 91 3b 23 	lds	r25, 0x233B	; 0x80233b <udd_g_ctrlreq+0x3>
    1442:	89 2b       	or	r24, r25
    1444:	81 f4       	brne	.+32     	; 0x1466 <udc_process_setup+0x3de>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1446:	c8 e3       	ldi	r28, 0x38	; 56
    1448:	d3 e2       	ldi	r29, 0x23	; 35
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	60 d6       	rcall	.+3264   	; 0x210e <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	c3 d6       	rcall	.+3462   	; 0x21d8 <udd_ep_set_halt>
    1452:	07 c0       	rjmp	.+14     	; 0x1462 <udc_process_setup+0x3da>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <udc_process_setup+0x3da>
				break;
			}
		}
#endif
	}
	return false;
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	03 c0       	rjmp	.+6      	; 0x1462 <udc_process_setup+0x3da>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	01 c0       	rjmp	.+2      	; 0x1462 <udc_process_setup+0x3da>
				break;
			}
		}
#endif
	}
	return false;
    1460:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1462:	81 11       	cpse	r24, r1
    1464:	86 c0       	rjmp	.+268    	; 0x1572 <udc_process_setup+0x4ea>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1466:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq>
    146a:	8f 71       	andi	r24, 0x1F	; 31
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	71 f5       	brne	.+92     	; 0x14cc <udc_process_setup+0x444>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1470:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <udc_num_configuration>
    1474:	88 23       	and	r24, r24
    1476:	51 f1       	breq	.+84     	; 0x14cc <udc_process_setup+0x444>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1478:	00 91 3c 23 	lds	r16, 0x233C	; 0x80233c <udd_g_ctrlreq+0x4>
    147c:	10 91 3d 23 	lds	r17, 0x233D	; 0x80233d <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1480:	c0 91 fe 21 	lds	r28, 0x21FE	; 0x8021fe <udc_ptr_conf>
    1484:	d0 91 ff 21 	lds	r29, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
    1488:	e8 81       	ld	r30, Y
    148a:	f9 81       	ldd	r31, Y+1	; 0x01
    148c:	84 81       	ldd	r24, Z+4	; 0x04
    148e:	08 17       	cp	r16, r24
    1490:	e8 f4       	brcc	.+58     	; 0x14cc <udc_process_setup+0x444>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	80 2f       	mov	r24, r16
    1496:	f1 dc       	rcall	.-1566   	; 0xe7a <udc_update_iface_desc>
    1498:	88 23       	and	r24, r24
    149a:	c1 f0       	breq	.+48     	; 0x14cc <udc_process_setup+0x444>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    149c:	f8 01       	movw	r30, r16
    149e:	ff 27       	eor	r31, r31
    14a0:	cf 01       	movw	r24, r30
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	ea 81       	ldd	r30, Y+2	; 0x02
    14a8:	fb 81       	ldd	r31, Y+3	; 0x03
    14aa:	e8 0f       	add	r30, r24
    14ac:	f9 1f       	adc	r31, r25
    14ae:	c0 81       	ld	r28, Z
    14b0:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    14b2:	ee 81       	ldd	r30, Y+6	; 0x06
    14b4:	ff 81       	ldd	r31, Y+7	; 0x07
    14b6:	19 95       	eicall
    14b8:	68 2f       	mov	r22, r24
    14ba:	80 2f       	mov	r24, r16
    14bc:	de dc       	rcall	.-1604   	; 0xe7a <udc_update_iface_desc>
    14be:	88 23       	and	r24, r24
    14c0:	29 f0       	breq	.+10     	; 0x14cc <udc_process_setup+0x444>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    14c2:	ec 81       	ldd	r30, Y+4	; 0x04
    14c4:	fd 81       	ldd	r31, Y+5	; 0x05
    14c6:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    14c8:	81 11       	cpse	r24, r1
    14ca:	53 c0       	rjmp	.+166    	; 0x1572 <udc_process_setup+0x4ea>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    14cc:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq>
    14d0:	8f 71       	andi	r24, 0x1F	; 31
    14d2:	82 30       	cpi	r24, 0x02	; 2
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <udc_process_setup+0x450>
    14d6:	40 c0       	rjmp	.+128    	; 0x1558 <udc_process_setup+0x4d0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    14d8:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <udc_num_configuration>
    14dc:	88 23       	and	r24, r24
    14de:	b1 f1       	breq	.+108    	; 0x154c <udc_process_setup+0x4c4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14e0:	a0 91 fe 21 	lds	r26, 0x21FE	; 0x8021fe <udc_ptr_conf>
    14e4:	b0 91 ff 21 	lds	r27, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
    14e8:	ed 91       	ld	r30, X+
    14ea:	fc 91       	ld	r31, X
    14ec:	11 97       	sbiw	r26, 0x01	; 1
    14ee:	84 81       	ldd	r24, Z+4	; 0x04
    14f0:	88 23       	and	r24, r24
    14f2:	71 f1       	breq	.+92     	; 0x1550 <udc_process_setup+0x4c8>
    14f4:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    14f6:	ec 2f       	mov	r30, r28
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	ee 0f       	add	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	12 96       	adiw	r26, 0x02	; 2
    1500:	8d 91       	ld	r24, X+
    1502:	9c 91       	ld	r25, X
    1504:	13 97       	sbiw	r26, 0x03	; 3
    1506:	e8 0f       	add	r30, r24
    1508:	f9 1f       	adc	r31, r25
    150a:	00 81       	ld	r16, Z
    150c:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    150e:	d8 01       	movw	r26, r16
    1510:	16 96       	adiw	r26, 0x06	; 6
    1512:	ed 91       	ld	r30, X+
    1514:	fc 91       	ld	r31, X
    1516:	17 97       	sbiw	r26, 0x07	; 7
    1518:	19 95       	eicall
    151a:	68 2f       	mov	r22, r24
    151c:	8c 2f       	mov	r24, r28
    151e:	ad dc       	rcall	.-1702   	; 0xe7a <udc_update_iface_desc>
    1520:	88 23       	and	r24, r24
    1522:	39 f1       	breq	.+78     	; 0x1572 <udc_process_setup+0x4ea>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1524:	d8 01       	movw	r26, r16
    1526:	14 96       	adiw	r26, 0x04	; 4
    1528:	ed 91       	ld	r30, X+
    152a:	fc 91       	ld	r31, X
    152c:	15 97       	sbiw	r26, 0x05	; 5
    152e:	19 95       	eicall
    1530:	81 11       	cpse	r24, r1
    1532:	1f c0       	rjmp	.+62     	; 0x1572 <udc_process_setup+0x4ea>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1534:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1536:	a0 91 fe 21 	lds	r26, 0x21FE	; 0x8021fe <udc_ptr_conf>
    153a:	b0 91 ff 21 	lds	r27, 0x21FF	; 0x8021ff <udc_ptr_conf+0x1>
    153e:	ed 91       	ld	r30, X+
    1540:	fc 91       	ld	r31, X
    1542:	11 97       	sbiw	r26, 0x01	; 1
    1544:	94 81       	ldd	r25, Z+4	; 0x04
    1546:	c9 17       	cp	r28, r25
    1548:	b0 f2       	brcs	.-84     	; 0x14f6 <udc_process_setup+0x46e>
    154a:	13 c0       	rjmp	.+38     	; 0x1572 <udc_process_setup+0x4ea>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	11 c0       	rjmp	.+34     	; 0x1572 <udc_process_setup+0x4ea>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	0f c0       	rjmp	.+30     	; 0x1572 <udc_process_setup+0x4ea>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	0d c0       	rjmp	.+26     	; 0x1572 <udc_process_setup+0x4ea>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	0b c0       	rjmp	.+22     	; 0x1572 <udc_process_setup+0x4ea>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    155c:	98 2f       	mov	r25, r24
    155e:	90 76       	andi	r25, 0x60	; 96
    1560:	09 f0       	breq	.+2      	; 0x1564 <udc_process_setup+0x4dc>
    1562:	81 cf       	rjmp	.-254    	; 0x1466 <udc_process_setup+0x3de>
    1564:	a7 ce       	rjmp	.-690    	; 0x12b4 <udc_process_setup+0x22c>
    1566:	98 2f       	mov	r25, r24
    1568:	90 76       	andi	r25, 0x60	; 96
    156a:	09 f0       	breq	.+2      	; 0x156e <udc_process_setup+0x4e6>
    156c:	7c cf       	rjmp	.-264    	; 0x1466 <udc_process_setup+0x3de>
    156e:	a5 cd       	rjmp	.-1206   	; 0x10ba <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1570:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	08 95       	ret

0000157c <board_init>:
    157c:	43 e0       	ldi	r20, 0x03	; 3
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	80 ee       	ldi	r24, 0xE0	; 224
    1584:	97 e0       	ldi	r25, 0x07	; 7
    1586:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ioport_configure_port_pin>
    158a:	43 e0       	ldi	r20, 0x03	; 3
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	62 e0       	ldi	r22, 0x02	; 2
    1590:	80 ee       	ldi	r24, 0xE0	; 224
    1592:	97 e0       	ldi	r25, 0x07	; 7
    1594:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ioport_configure_port_pin>
    1598:	43 e0       	ldi	r20, 0x03	; 3
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	60 e1       	ldi	r22, 0x10	; 16
    159e:	80 e6       	ldi	r24, 0x60	; 96
    15a0:	96 e0       	ldi	r25, 0x06	; 6
    15a2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ioport_configure_port_pin>
    15a6:	41 e0       	ldi	r20, 0x01	; 1
    15a8:	50 e4       	ldi	r21, 0x40	; 64
    15aa:	60 e2       	ldi	r22, 0x20	; 32
    15ac:	80 e6       	ldi	r24, 0x60	; 96
    15ae:	96 e0       	ldi	r25, 0x06	; 6
    15b0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ioport_configure_port_pin>
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	5b e1       	ldi	r21, 0x1B	; 27
    15b8:	60 e2       	ldi	r22, 0x20	; 32
    15ba:	80 e8       	ldi	r24, 0x80	; 128
    15bc:	96 e0       	ldi	r25, 0x06	; 6
    15be:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ioport_configure_port_pin>
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	5b e1       	ldi	r21, 0x1B	; 27
    15c6:	62 e0       	ldi	r22, 0x02	; 2
    15c8:	80 ea       	ldi	r24, 0xA0	; 160
    15ca:	96 e0       	ldi	r25, 0x06	; 6
    15cc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ioport_configure_port_pin>
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	5b e1       	ldi	r21, 0x1B	; 27
    15d4:	64 e0       	ldi	r22, 0x04	; 4
    15d6:	80 ea       	ldi	r24, 0xA0	; 160
    15d8:	96 e0       	ldi	r25, 0x06	; 6
    15da:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <ioport_configure_port_pin>
    15de:	08 95       	ret

000015e0 <ccp_write_io>:
    15e0:	1b be       	out	0x3b, r1	; 59
    15e2:	fc 01       	movw	r30, r24
    15e4:	28 ed       	ldi	r18, 0xD8	; 216
    15e6:	24 bf       	out	0x34, r18	; 52
    15e8:	60 83       	st	Z, r22
    15ea:	08 95       	ret

000015ec <nvm_read_byte>:
    15ec:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    15f0:	e6 2f       	mov	r30, r22
    15f2:	f7 2f       	mov	r31, r23
    15f4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    15f8:	84 91       	lpm	r24, Z
    15fa:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    15fe:	08 95       	ret

00001600 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	1f 92       	push	r1
    1606:	1f 92       	push	r1
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	81 11       	cpse	r24, r1
    160e:	26 c0       	rjmp	.+76     	; 0x165c <udd_sleep_mode+0x5c>
    1610:	90 91 30 23 	lds	r25, 0x2330	; 0x802330 <udd_b_idle>
    1614:	99 23       	and	r25, r25
    1616:	f9 f0       	breq	.+62     	; 0x1656 <udd_sleep_mode+0x56>
    1618:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <sleepmgr_locks+0x1>
    161c:	91 11       	cpse	r25, r1
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <udd_sleep_mode+0x22>
    1620:	ff cf       	rjmp	.-2      	; 0x1620 <udd_sleep_mode+0x20>
    1622:	9f b7       	in	r25, 0x3f	; 63
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	f8 94       	cli
    1628:	2a 81       	ldd	r18, Y+2	; 0x02
    162a:	e2 e3       	ldi	r30, 0x32	; 50
    162c:	f3 e2       	ldi	r31, 0x23	; 35
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	91 50       	subi	r25, 0x01	; 1
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	2f bf       	out	0x3f, r18	; 63
    1636:	0f c0       	rjmp	.+30     	; 0x1656 <udd_sleep_mode+0x56>
    1638:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <sleepmgr_locks+0x1>
    163c:	9f 3f       	cpi	r25, 0xFF	; 255
    163e:	09 f4       	brne	.+2      	; 0x1642 <udd_sleep_mode+0x42>
    1640:	ff cf       	rjmp	.-2      	; 0x1640 <udd_sleep_mode+0x40>
    1642:	9f b7       	in	r25, 0x3f	; 63
    1644:	99 83       	std	Y+1, r25	; 0x01
    1646:	f8 94       	cli
    1648:	29 81       	ldd	r18, Y+1	; 0x01
    164a:	e2 e3       	ldi	r30, 0x32	; 50
    164c:	f3 e2       	ldi	r31, 0x23	; 35
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	9f 5f       	subi	r25, 0xFF	; 255
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	2f bf       	out	0x3f, r18	; 63
    1656:	80 93 30 23 	sts	0x2330, r24	; 0x802330 <udd_b_idle>
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <udd_sleep_mode+0x66>
    165c:	90 91 30 23 	lds	r25, 0x2330	; 0x802330 <udd_b_idle>
    1660:	99 23       	and	r25, r25
    1662:	51 f3       	breq	.-44     	; 0x1638 <udd_sleep_mode+0x38>
    1664:	f8 cf       	rjmp	.-16     	; 0x1656 <udd_sleep_mode+0x56>
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <udd_ctrl_init>:
    1670:	0f 93       	push	r16
    1672:	e8 ec       	ldi	r30, 0xC8	; 200
    1674:	f4 e0       	ldi	r31, 0x04	; 4
    1676:	80 81       	ld	r24, Z
    1678:	8f 7d       	andi	r24, 0xDF	; 223
    167a:	80 83       	st	Z, r24
    167c:	80 81       	ld	r24, Z
    167e:	8f 7d       	andi	r24, 0xDF	; 223
    1680:	80 83       	st	Z, r24
    1682:	e4 e0       	ldi	r30, 0x04	; 4
    1684:	f3 e2       	ldi	r31, 0x23	; 35
    1686:	02 e0       	ldi	r16, 0x02	; 2
    1688:	05 93       	las	Z, r16
    168a:	10 92 06 23 	sts	0x2306, r1	; 0x802306 <udd_sram+0x16>
    168e:	10 92 07 23 	sts	0x2307, r1	; 0x802307 <udd_sram+0x17>
    1692:	00 e2       	ldi	r16, 0x20	; 32
    1694:	06 93       	lac	Z, r16
    1696:	00 e4       	ldi	r16, 0x40	; 64
    1698:	06 93       	lac	Z, r16
    169a:	ec ef       	ldi	r30, 0xFC	; 252
    169c:	f2 e2       	ldi	r31, 0x22	; 34
    169e:	00 e4       	ldi	r16, 0x40	; 64
    16a0:	06 93       	lac	Z, r16
    16a2:	e8 e3       	ldi	r30, 0x38	; 56
    16a4:	f3 e2       	ldi	r31, 0x23	; 35
    16a6:	14 86       	std	Z+12, r1	; 0x0c
    16a8:	15 86       	std	Z+13, r1	; 0x0d
    16aa:	16 86       	std	Z+14, r1	; 0x0e
    16ac:	17 86       	std	Z+15, r1	; 0x0f
    16ae:	12 86       	std	Z+10, r1	; 0x0a
    16b0:	13 86       	std	Z+11, r1	; 0x0b
    16b2:	10 92 ef 22 	sts	0x22EF, r1	; 0x8022ef <udd_ep_control_state>
    16b6:	0f 91       	pop	r16
    16b8:	08 95       	ret

000016ba <udd_ctrl_stall_data>:
    16ba:	0f 93       	push	r16
    16bc:	85 e0       	ldi	r24, 0x05	; 5
    16be:	80 93 ef 22 	sts	0x22EF, r24	; 0x8022ef <udd_ep_control_state>
    16c2:	e5 e0       	ldi	r30, 0x05	; 5
    16c4:	f3 e2       	ldi	r31, 0x23	; 35
    16c6:	04 e0       	ldi	r16, 0x04	; 4
    16c8:	05 93       	las	Z, r16
    16ca:	ed ef       	ldi	r30, 0xFD	; 253
    16cc:	f2 e2       	ldi	r31, 0x22	; 34
    16ce:	04 e0       	ldi	r16, 0x04	; 4
    16d0:	05 93       	las	Z, r16
    16d2:	0f 91       	pop	r16
    16d4:	08 95       	ret

000016d6 <udd_ctrl_send_zlp_in>:
    16d6:	0f 93       	push	r16
    16d8:	83 e0       	ldi	r24, 0x03	; 3
    16da:	80 93 ef 22 	sts	0x22EF, r24	; 0x8022ef <udd_ep_control_state>
    16de:	10 92 06 23 	sts	0x2306, r1	; 0x802306 <udd_sram+0x16>
    16e2:	10 92 07 23 	sts	0x2307, r1	; 0x802307 <udd_sram+0x17>
    16e6:	e4 e0       	ldi	r30, 0x04	; 4
    16e8:	f3 e2       	ldi	r31, 0x23	; 35
    16ea:	02 e0       	ldi	r16, 0x02	; 2
    16ec:	06 93       	lac	Z, r16
    16ee:	0f 91       	pop	r16
    16f0:	08 95       	ret

000016f2 <udd_ctrl_endofrequest>:
    16f2:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <udd_g_ctrlreq+0xc>
    16f6:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <udd_g_ctrlreq+0xd>
    16fa:	30 97       	sbiw	r30, 0x00	; 0
    16fc:	09 f0       	breq	.+2      	; 0x1700 <udd_ctrl_endofrequest+0xe>
    16fe:	19 95       	eicall
    1700:	08 95       	ret

00001702 <udd_ctrl_in_sent>:
    1702:	0f 93       	push	r16
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	80 91 ef 22 	lds	r24, 0x22EF	; 0x8022ef <udd_ep_control_state>
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	19 f4       	brne	.+6      	; 0x1716 <udd_ctrl_in_sent+0x14>
    1710:	f0 df       	rcall	.-32     	; 0x16f2 <udd_ctrl_endofrequest>
    1712:	ae df       	rcall	.-164    	; 0x1670 <udd_ctrl_init>
    1714:	5e c0       	rjmp	.+188    	; 0x17d2 <udd_ctrl_in_sent+0xd0>
    1716:	80 91 eb 22 	lds	r24, 0x22EB	; 0x8022eb <udd_ctrl_payload_nb_trans>
    171a:	90 91 ec 22 	lds	r25, 0x22EC	; 0x8022ec <udd_ctrl_payload_nb_trans+0x1>
    171e:	c0 91 42 23 	lds	r28, 0x2342	; 0x802342 <udd_g_ctrlreq+0xa>
    1722:	d0 91 43 23 	lds	r29, 0x2343	; 0x802343 <udd_g_ctrlreq+0xb>
    1726:	c8 1b       	sub	r28, r24
    1728:	d9 0b       	sbc	r29, r25
    172a:	71 f5       	brne	.+92     	; 0x1788 <udd_ctrl_in_sent+0x86>
    172c:	20 91 ed 22 	lds	r18, 0x22ED	; 0x8022ed <udd_ctrl_prev_payload_nb_trans>
    1730:	30 91 ee 22 	lds	r19, 0x22EE	; 0x8022ee <udd_ctrl_prev_payload_nb_trans+0x1>
    1734:	82 0f       	add	r24, r18
    1736:	93 1f       	adc	r25, r19
    1738:	80 93 ed 22 	sts	0x22ED, r24	; 0x8022ed <udd_ctrl_prev_payload_nb_trans>
    173c:	90 93 ee 22 	sts	0x22EE, r25	; 0x8022ee <udd_ctrl_prev_payload_nb_trans+0x1>
    1740:	20 91 3e 23 	lds	r18, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
    1744:	30 91 3f 23 	lds	r19, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
    1748:	82 17       	cp	r24, r18
    174a:	93 07       	cpc	r25, r19
    174c:	21 f0       	breq	.+8      	; 0x1756 <udd_ctrl_in_sent+0x54>
    174e:	80 91 06 22 	lds	r24, 0x2206	; 0x802206 <b_shortpacket.5394>
    1752:	88 23       	and	r24, r24
    1754:	41 f0       	breq	.+16     	; 0x1766 <udd_ctrl_in_sent+0x64>
    1756:	84 e0       	ldi	r24, 0x04	; 4
    1758:	80 93 ef 22 	sts	0x22EF, r24	; 0x8022ef <udd_ep_control_state>
    175c:	ec ef       	ldi	r30, 0xFC	; 252
    175e:	f2 e2       	ldi	r31, 0x22	; 34
    1760:	02 e0       	ldi	r16, 0x02	; 2
    1762:	06 93       	lac	Z, r16
    1764:	36 c0       	rjmp	.+108    	; 0x17d2 <udd_ctrl_in_sent+0xd0>
    1766:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <udd_g_ctrlreq+0xe>
    176a:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <udd_g_ctrlreq+0xf>
    176e:	30 97       	sbiw	r30, 0x00	; 0
    1770:	99 f0       	breq	.+38     	; 0x1798 <udd_ctrl_in_sent+0x96>
    1772:	19 95       	eicall
    1774:	88 23       	and	r24, r24
    1776:	81 f0       	breq	.+32     	; 0x1798 <udd_ctrl_in_sent+0x96>
    1778:	10 92 eb 22 	sts	0x22EB, r1	; 0x8022eb <udd_ctrl_payload_nb_trans>
    177c:	10 92 ec 22 	sts	0x22EC, r1	; 0x8022ec <udd_ctrl_payload_nb_trans+0x1>
    1780:	c0 91 42 23 	lds	r28, 0x2342	; 0x802342 <udd_g_ctrlreq+0xa>
    1784:	d0 91 43 23 	lds	r29, 0x2343	; 0x802343 <udd_g_ctrlreq+0xb>
    1788:	c0 34       	cpi	r28, 0x40	; 64
    178a:	d1 05       	cpc	r29, r1
    178c:	28 f0       	brcs	.+10     	; 0x1798 <udd_ctrl_in_sent+0x96>
    178e:	10 92 06 22 	sts	0x2206, r1	; 0x802206 <b_shortpacket.5394>
    1792:	c0 e4       	ldi	r28, 0x40	; 64
    1794:	d0 e0       	ldi	r29, 0x00	; 0
    1796:	03 c0       	rjmp	.+6      	; 0x179e <udd_ctrl_in_sent+0x9c>
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	80 93 06 22 	sts	0x2206, r24	; 0x802206 <b_shortpacket.5394>
    179e:	e0 ef       	ldi	r30, 0xF0	; 240
    17a0:	f2 e2       	ldi	r31, 0x22	; 34
    17a2:	c6 8b       	std	Z+22, r28	; 0x16
    17a4:	d7 8b       	std	Z+23, r29	; 0x17
    17a6:	80 91 eb 22 	lds	r24, 0x22EB	; 0x8022eb <udd_ctrl_payload_nb_trans>
    17aa:	90 91 ec 22 	lds	r25, 0x22EC	; 0x8022ec <udd_ctrl_payload_nb_trans+0x1>
    17ae:	20 91 40 23 	lds	r18, 0x2340	; 0x802340 <udd_g_ctrlreq+0x8>
    17b2:	30 91 41 23 	lds	r19, 0x2341	; 0x802341 <udd_g_ctrlreq+0x9>
    17b6:	28 0f       	add	r18, r24
    17b8:	39 1f       	adc	r19, r25
    17ba:	20 8f       	std	Z+24, r18	; 0x18
    17bc:	31 8f       	std	Z+25, r19	; 0x19
    17be:	c8 0f       	add	r28, r24
    17c0:	d9 1f       	adc	r29, r25
    17c2:	c0 93 eb 22 	sts	0x22EB, r28	; 0x8022eb <udd_ctrl_payload_nb_trans>
    17c6:	d0 93 ec 22 	sts	0x22EC, r29	; 0x8022ec <udd_ctrl_payload_nb_trans+0x1>
    17ca:	e4 e0       	ldi	r30, 0x04	; 4
    17cc:	f3 e2       	ldi	r31, 0x23	; 35
    17ce:	02 e0       	ldi	r16, 0x02	; 2
    17d0:	06 93       	lac	Z, r16
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	0f 91       	pop	r16
    17d8:	08 95       	ret

000017da <udd_ep_get_size>:
    17da:	fc 01       	movw	r30, r24
    17dc:	81 81       	ldd	r24, Z+1	; 0x01
    17de:	e8 2f       	mov	r30, r24
    17e0:	e7 70       	andi	r30, 0x07	; 7
    17e2:	8e 2f       	mov	r24, r30
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	fc 01       	movw	r30, r24
    17e8:	31 97       	sbiw	r30, 0x01	; 1
    17ea:	e7 30       	cpi	r30, 0x07	; 7
    17ec:	f1 05       	cpc	r31, r1
    17ee:	d8 f4       	brcc	.+54     	; 0x1826 <udd_ep_get_size+0x4c>
    17f0:	88 27       	eor	r24, r24
    17f2:	e2 50       	subi	r30, 0x02	; 2
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	8f 4f       	sbci	r24, 0xFF	; 255
    17f8:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__tablejump2__>
    17fc:	80 e1       	ldi	r24, 0x10	; 16
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	08 95       	ret
    1802:	80 e2       	ldi	r24, 0x20	; 32
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	08 95       	ret
    1808:	80 e4       	ldi	r24, 0x40	; 64
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	08 95       	ret
    180e:	80 e8       	ldi	r24, 0x80	; 128
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	08 95       	ret
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	08 95       	ret
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	92 e0       	ldi	r25, 0x02	; 2
    181e:	08 95       	ret
    1820:	8f ef       	ldi	r24, 0xFF	; 255
    1822:	93 e0       	ldi	r25, 0x03	; 3
    1824:	08 95       	ret
    1826:	88 e0       	ldi	r24, 0x08	; 8
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	08 95       	ret

0000182c <udd_ep_get_job>:
    182c:	28 2f       	mov	r18, r24
    182e:	2f 70       	andi	r18, 0x0F	; 15
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	22 0f       	add	r18, r18
    1834:	33 1f       	adc	r19, r19
    1836:	08 2e       	mov	r0, r24
    1838:	00 0c       	add	r0, r0
    183a:	99 0b       	sbc	r25, r25
    183c:	88 27       	eor	r24, r24
    183e:	99 0f       	add	r25, r25
    1840:	88 1f       	adc	r24, r24
    1842:	99 27       	eor	r25, r25
    1844:	82 0f       	add	r24, r18
    1846:	93 1f       	adc	r25, r19
    1848:	02 97       	sbiw	r24, 0x02	; 2
    184a:	9c 01       	movw	r18, r24
    184c:	22 0f       	add	r18, r18
    184e:	33 1f       	adc	r19, r19
    1850:	22 0f       	add	r18, r18
    1852:	33 1f       	adc	r19, r19
    1854:	22 0f       	add	r18, r18
    1856:	33 1f       	adc	r19, r19
    1858:	82 0f       	add	r24, r18
    185a:	93 1f       	adc	r25, r19
    185c:	89 57       	subi	r24, 0x79	; 121
    185e:	9d 4d       	sbci	r25, 0xDD	; 221
    1860:	08 95       	ret

00001862 <udd_ctrl_interrupt_tc_setup>:
    1862:	0f 93       	push	r16
    1864:	cf 93       	push	r28
    1866:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    186a:	80 ff       	sbrs	r24, 0
    186c:	64 c0       	rjmp	.+200    	; 0x1936 <udd_ctrl_interrupt_tc_setup+0xd4>
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1874:	ec ef       	ldi	r30, 0xFC	; 252
    1876:	f2 e2       	ldi	r31, 0x22	; 34
    1878:	00 e8       	ldi	r16, 0x80	; 128
    187a:	06 93       	lac	Z, r16
    187c:	e4 e0       	ldi	r30, 0x04	; 4
    187e:	f3 e2       	ldi	r31, 0x23	; 35
    1880:	00 e8       	ldi	r16, 0x80	; 128
    1882:	06 93       	lac	Z, r16
    1884:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1888:	ec ef       	ldi	r30, 0xFC	; 252
    188a:	f2 e2       	ldi	r31, 0x22	; 34
    188c:	00 e1       	ldi	r16, 0x10	; 16
    188e:	06 93       	lac	Z, r16
    1890:	80 91 ef 22 	lds	r24, 0x22EF	; 0x8022ef <udd_ep_control_state>
    1894:	88 23       	and	r24, r24
    1896:	29 f0       	breq	.+10     	; 0x18a2 <udd_ctrl_interrupt_tc_setup+0x40>
    1898:	83 50       	subi	r24, 0x03	; 3
    189a:	82 30       	cpi	r24, 0x02	; 2
    189c:	08 f4       	brcc	.+2      	; 0x18a0 <udd_ctrl_interrupt_tc_setup+0x3e>
    189e:	29 df       	rcall	.-430    	; 0x16f2 <udd_ctrl_endofrequest>
    18a0:	e7 de       	rcall	.-562    	; 0x1670 <udd_ctrl_init>
    18a2:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <udd_sram+0xe>
    18a6:	90 91 ff 22 	lds	r25, 0x22FF	; 0x8022ff <udd_sram+0xf>
    18aa:	08 97       	sbiw	r24, 0x08	; 8
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <udd_ctrl_interrupt_tc_setup+0x4e>
    18ae:	45 c0       	rjmp	.+138    	; 0x193a <udd_ctrl_interrupt_tc_setup+0xd8>
    18b0:	88 e0       	ldi	r24, 0x08	; 8
    18b2:	eb ea       	ldi	r30, 0xAB	; 171
    18b4:	f2 e2       	ldi	r31, 0x22	; 34
    18b6:	a8 e3       	ldi	r26, 0x38	; 56
    18b8:	b3 e2       	ldi	r27, 0x23	; 35
    18ba:	01 90       	ld	r0, Z+
    18bc:	0d 92       	st	X+, r0
    18be:	8a 95       	dec	r24
    18c0:	e1 f7       	brne	.-8      	; 0x18ba <udd_ctrl_interrupt_tc_setup+0x58>
    18c2:	e8 ec       	ldi	r30, 0xC8	; 200
    18c4:	f4 e0       	ldi	r31, 0x04	; 4
    18c6:	80 81       	ld	r24, Z
    18c8:	80 62       	ori	r24, 0x20	; 32
    18ca:	80 83       	st	Z, r24
    18cc:	80 81       	ld	r24, Z
    18ce:	80 62       	ori	r24, 0x20	; 32
    18d0:	80 83       	st	Z, r24
    18d2:	da db       	rcall	.-2124   	; 0x1088 <udc_process_setup>
    18d4:	c8 2f       	mov	r28, r24
    18d6:	81 11       	cpse	r24, r1
    18d8:	03 c0       	rjmp	.+6      	; 0x18e0 <udd_ctrl_interrupt_tc_setup+0x7e>
    18da:	ef de       	rcall	.-546    	; 0x16ba <udd_ctrl_stall_data>
    18dc:	c1 e0       	ldi	r28, 0x01	; 1
    18de:	2e c0       	rjmp	.+92     	; 0x193c <udd_ctrl_interrupt_tc_setup+0xda>
    18e0:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <udd_g_ctrlreq>
    18e4:	88 23       	and	r24, r24
    18e6:	6c f4       	brge	.+26     	; 0x1902 <udd_ctrl_interrupt_tc_setup+0xa0>
    18e8:	10 92 ed 22 	sts	0x22ED, r1	; 0x8022ed <udd_ctrl_prev_payload_nb_trans>
    18ec:	10 92 ee 22 	sts	0x22EE, r1	; 0x8022ee <udd_ctrl_prev_payload_nb_trans+0x1>
    18f0:	10 92 eb 22 	sts	0x22EB, r1	; 0x8022eb <udd_ctrl_payload_nb_trans>
    18f4:	10 92 ec 22 	sts	0x22EC, r1	; 0x8022ec <udd_ctrl_payload_nb_trans+0x1>
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	80 93 ef 22 	sts	0x22EF, r24	; 0x8022ef <udd_ep_control_state>
    18fe:	01 df       	rcall	.-510    	; 0x1702 <udd_ctrl_in_sent>
    1900:	1d c0       	rjmp	.+58     	; 0x193c <udd_ctrl_interrupt_tc_setup+0xda>
    1902:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
    1906:	90 91 3f 23 	lds	r25, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
    190a:	89 2b       	or	r24, r25
    190c:	11 f4       	brne	.+4      	; 0x1912 <udd_ctrl_interrupt_tc_setup+0xb0>
    190e:	e3 de       	rcall	.-570    	; 0x16d6 <udd_ctrl_send_zlp_in>
    1910:	15 c0       	rjmp	.+42     	; 0x193c <udd_ctrl_interrupt_tc_setup+0xda>
    1912:	10 92 ed 22 	sts	0x22ED, r1	; 0x8022ed <udd_ctrl_prev_payload_nb_trans>
    1916:	10 92 ee 22 	sts	0x22EE, r1	; 0x8022ee <udd_ctrl_prev_payload_nb_trans+0x1>
    191a:	10 92 eb 22 	sts	0x22EB, r1	; 0x8022eb <udd_ctrl_payload_nb_trans>
    191e:	10 92 ec 22 	sts	0x22EC, r1	; 0x8022ec <udd_ctrl_payload_nb_trans+0x1>
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	80 93 ef 22 	sts	0x22EF, r24	; 0x8022ef <udd_ep_control_state>
    1928:	ec ef       	ldi	r30, 0xFC	; 252
    192a:	f2 e2       	ldi	r31, 0x22	; 34
    192c:	02 e0       	ldi	r16, 0x02	; 2
    192e:	06 93       	lac	Z, r16
    1930:	00 e2       	ldi	r16, 0x20	; 32
    1932:	06 93       	lac	Z, r16
    1934:	03 c0       	rjmp	.+6      	; 0x193c <udd_ctrl_interrupt_tc_setup+0xda>
    1936:	c0 e0       	ldi	r28, 0x00	; 0
    1938:	01 c0       	rjmp	.+2      	; 0x193c <udd_ctrl_interrupt_tc_setup+0xda>
    193a:	c1 e0       	ldi	r28, 0x01	; 1
    193c:	8c 2f       	mov	r24, r28
    193e:	cf 91       	pop	r28
    1940:	0f 91       	pop	r16
    1942:	08 95       	ret

00001944 <udd_ep_trans_complet>:
    1944:	8f 92       	push	r8
    1946:	9f 92       	push	r9
    1948:	af 92       	push	r10
    194a:	bf 92       	push	r11
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	d8 2e       	mov	r13, r24
    195c:	67 df       	rcall	.-306    	; 0x182c <udd_ep_get_job>
    195e:	8c 01       	movw	r16, r24
    1960:	bd 2c       	mov	r11, r13
    1962:	bb 1c       	adc	r11, r11
    1964:	bb 24       	eor	r11, r11
    1966:	bb 1c       	adc	r11, r11
    1968:	cd 2d       	mov	r28, r13
    196a:	cf 70       	andi	r28, 0x0F	; 15
    196c:	d0 e0       	ldi	r29, 0x00	; 0
    196e:	cc 0f       	add	r28, r28
    1970:	dd 1f       	adc	r29, r29
    1972:	cb 0d       	add	r28, r11
    1974:	d1 1d       	adc	r29, r1
    1976:	ce 01       	movw	r24, r28
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	9c 01       	movw	r18, r24
    1986:	24 50       	subi	r18, 0x04	; 4
    1988:	3d 4d       	sbci	r19, 0xDD	; 221
    198a:	79 01       	movw	r14, r18
    198c:	c9 01       	movw	r24, r18
    198e:	25 df       	rcall	.-438    	; 0x17da <udd_ep_get_size>
    1990:	4c 01       	movw	r8, r24
    1992:	bb 20       	and	r11, r11
    1994:	09 f4       	brne	.+2      	; 0x1998 <udd_ep_trans_complet+0x54>
    1996:	79 c0       	rjmp	.+242    	; 0x1a8a <udd_ep_trans_complet+0x146>
    1998:	fe 01       	movw	r30, r28
    199a:	ee 0f       	add	r30, r30
    199c:	ff 1f       	adc	r31, r31
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	e0 51       	subi	r30, 0x10	; 16
    19a8:	fd 4d       	sbci	r31, 0xDD	; 221
    19aa:	22 89       	ldd	r18, Z+18	; 0x12
    19ac:	33 89       	ldd	r19, Z+19	; 0x13
    19ae:	d8 01       	movw	r26, r16
    19b0:	15 96       	adiw	r26, 0x05	; 5
    19b2:	8d 91       	ld	r24, X+
    19b4:	9c 91       	ld	r25, X
    19b6:	16 97       	sbiw	r26, 0x06	; 6
    19b8:	82 0f       	add	r24, r18
    19ba:	93 1f       	adc	r25, r19
    19bc:	15 96       	adiw	r26, 0x05	; 5
    19be:	8d 93       	st	X+, r24
    19c0:	9c 93       	st	X, r25
    19c2:	16 97       	sbiw	r26, 0x06	; 6
    19c4:	13 96       	adiw	r26, 0x03	; 3
    19c6:	2d 91       	ld	r18, X+
    19c8:	3c 91       	ld	r19, X
    19ca:	14 97       	sbiw	r26, 0x04	; 4
    19cc:	82 17       	cp	r24, r18
    19ce:	93 07       	cpc	r25, r19
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <udd_ep_trans_complet+0x90>
    19d2:	45 c0       	rjmp	.+138    	; 0x1a5e <udd_ep_trans_complet+0x11a>
    19d4:	28 1b       	sub	r18, r24
    19d6:	39 0b       	sbc	r19, r25
    19d8:	21 15       	cp	r18, r1
    19da:	b4 e0       	ldi	r27, 0x04	; 4
    19dc:	3b 07       	cpc	r19, r27
    19de:	38 f0       	brcs	.+14     	; 0x19ee <udd_ep_trans_complet+0xaa>
    19e0:	2f ef       	ldi	r18, 0xFF	; 255
    19e2:	33 e0       	ldi	r19, 0x03	; 3
    19e4:	c9 01       	movw	r24, r18
    19e6:	b4 01       	movw	r22, r8
    19e8:	14 d7       	rcall	.+3624   	; 0x2812 <__udivmodhi4>
    19ea:	28 1b       	sub	r18, r24
    19ec:	39 0b       	sbc	r19, r25
    19ee:	f8 01       	movw	r30, r16
    19f0:	80 81       	ld	r24, Z
    19f2:	81 ff       	sbrs	r24, 1
    19f4:	09 c0       	rjmp	.+18     	; 0x1a08 <udd_ep_trans_complet+0xc4>
    19f6:	c9 01       	movw	r24, r18
    19f8:	b4 01       	movw	r22, r8
    19fa:	0b d7       	rcall	.+3606   	; 0x2812 <__udivmodhi4>
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	89 2b       	or	r24, r25
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <udd_ep_trans_complet+0xc0>
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	84 2f       	mov	r24, r20
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <udd_ep_trans_complet+0xc6>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	d8 01       	movw	r26, r16
    1a0c:	9c 91       	ld	r25, X
    1a0e:	80 fb       	bst	r24, 0
    1a10:	91 f9       	bld	r25, 1
    1a12:	9c 93       	st	X, r25
    1a14:	fe 01       	movw	r30, r28
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	ee 0f       	add	r30, r30
    1a20:	ff 1f       	adc	r31, r31
    1a22:	e0 51       	subi	r30, 0x10	; 16
    1a24:	fd 4d       	sbci	r31, 0xDD	; 221
    1a26:	12 8a       	std	Z+18, r1	; 0x12
    1a28:	13 8a       	std	Z+19, r1	; 0x13
    1a2a:	26 87       	std	Z+14, r18	; 0x0e
    1a2c:	37 87       	std	Z+15, r19	; 0x0f
    1a2e:	11 96       	adiw	r26, 0x01	; 1
    1a30:	2d 91       	ld	r18, X+
    1a32:	3c 91       	ld	r19, X
    1a34:	12 97       	sbiw	r26, 0x02	; 2
    1a36:	15 96       	adiw	r26, 0x05	; 5
    1a38:	8d 91       	ld	r24, X+
    1a3a:	9c 91       	ld	r25, X
    1a3c:	16 97       	sbiw	r26, 0x06	; 6
    1a3e:	82 0f       	add	r24, r18
    1a40:	93 1f       	adc	r25, r19
    1a42:	cc 0f       	add	r28, r28
    1a44:	dd 1f       	adc	r29, r29
    1a46:	cc 0f       	add	r28, r28
    1a48:	dd 1f       	adc	r29, r29
    1a4a:	cc 0f       	add	r28, r28
    1a4c:	dd 1f       	adc	r29, r29
    1a4e:	c0 50       	subi	r28, 0x00	; 0
    1a50:	dd 4d       	sbci	r29, 0xDD	; 221
    1a52:	88 83       	st	Y, r24
    1a54:	99 83       	std	Y+1, r25	; 0x01
    1a56:	f7 01       	movw	r30, r14
    1a58:	02 e0       	ldi	r16, 0x02	; 2
    1a5a:	06 93       	lac	Z, r16
    1a5c:	e4 c0       	rjmp	.+456    	; 0x1c26 <udd_ep_trans_complet+0x2e2>
    1a5e:	d8 01       	movw	r26, r16
    1a60:	8c 91       	ld	r24, X
    1a62:	81 ff       	sbrs	r24, 1
    1a64:	cd c0       	rjmp	.+410    	; 0x1c00 <udd_ep_trans_complet+0x2bc>
    1a66:	8d 7f       	andi	r24, 0xFD	; 253
    1a68:	8c 93       	st	X, r24
    1a6a:	cc 0f       	add	r28, r28
    1a6c:	dd 1f       	adc	r29, r29
    1a6e:	cc 0f       	add	r28, r28
    1a70:	dd 1f       	adc	r29, r29
    1a72:	cc 0f       	add	r28, r28
    1a74:	dd 1f       	adc	r29, r29
    1a76:	c0 51       	subi	r28, 0x10	; 16
    1a78:	dd 4d       	sbci	r29, 0xDD	; 221
    1a7a:	1a 8a       	std	Y+18, r1	; 0x12
    1a7c:	1b 8a       	std	Y+19, r1	; 0x13
    1a7e:	1e 86       	std	Y+14, r1	; 0x0e
    1a80:	1f 86       	std	Y+15, r1	; 0x0f
    1a82:	f7 01       	movw	r30, r14
    1a84:	02 e0       	ldi	r16, 0x02	; 2
    1a86:	06 93       	lac	Z, r16
    1a88:	ce c0       	rjmp	.+412    	; 0x1c26 <udd_ep_trans_complet+0x2e2>
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	ee 0f       	add	r30, r30
    1a8e:	ff 1f       	adc	r31, r31
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	e0 51       	subi	r30, 0x10	; 16
    1a9a:	fd 4d       	sbci	r31, 0xDD	; 221
    1a9c:	a6 84       	ldd	r10, Z+14	; 0x0e
    1a9e:	b7 84       	ldd	r11, Z+15	; 0x0f
    1aa0:	d8 01       	movw	r26, r16
    1aa2:	8c 91       	ld	r24, X
    1aa4:	82 ff       	sbrs	r24, 2
    1aa6:	19 c0       	rjmp	.+50     	; 0x1ada <udd_ep_trans_complet+0x196>
    1aa8:	11 96       	adiw	r26, 0x01	; 1
    1aaa:	ed 91       	ld	r30, X+
    1aac:	fc 91       	ld	r31, X
    1aae:	12 97       	sbiw	r26, 0x02	; 2
    1ab0:	15 96       	adiw	r26, 0x05	; 5
    1ab2:	2d 91       	ld	r18, X+
    1ab4:	3c 91       	ld	r19, X
    1ab6:	16 97       	sbiw	r26, 0x06	; 6
    1ab8:	13 96       	adiw	r26, 0x03	; 3
    1aba:	8d 91       	ld	r24, X+
    1abc:	9c 91       	ld	r25, X
    1abe:	14 97       	sbiw	r26, 0x04	; 4
    1ac0:	b4 01       	movw	r22, r8
    1ac2:	a7 d6       	rcall	.+3406   	; 0x2812 <__udivmodhi4>
    1ac4:	b0 e4       	ldi	r27, 0x40	; 64
    1ac6:	db 9e       	mul	r13, r27
    1ac8:	b0 01       	movw	r22, r0
    1aca:	11 24       	eor	r1, r1
    1acc:	69 53       	subi	r22, 0x39	; 57
    1ace:	7e 4d       	sbci	r23, 0xDE	; 222
    1ad0:	ac 01       	movw	r20, r24
    1ad2:	cf 01       	movw	r24, r30
    1ad4:	82 0f       	add	r24, r18
    1ad6:	93 1f       	adc	r25, r19
    1ad8:	da d6       	rcall	.+3508   	; 0x288e <memcpy>
    1ada:	f8 01       	movw	r30, r16
    1adc:	25 81       	ldd	r18, Z+5	; 0x05
    1ade:	36 81       	ldd	r19, Z+6	; 0x06
    1ae0:	2a 0d       	add	r18, r10
    1ae2:	3b 1d       	adc	r19, r11
    1ae4:	25 83       	std	Z+5, r18	; 0x05
    1ae6:	36 83       	std	Z+6, r19	; 0x06
    1ae8:	83 81       	ldd	r24, Z+3	; 0x03
    1aea:	94 81       	ldd	r25, Z+4	; 0x04
    1aec:	82 17       	cp	r24, r18
    1aee:	93 07       	cpc	r25, r19
    1af0:	68 f4       	brcc	.+26     	; 0x1b0c <udd_ep_trans_complet+0x1c8>
    1af2:	85 83       	std	Z+5, r24	; 0x05
    1af4:	96 83       	std	Z+6, r25	; 0x06
    1af6:	cc 0f       	add	r28, r28
    1af8:	dd 1f       	adc	r29, r29
    1afa:	cc 0f       	add	r28, r28
    1afc:	dd 1f       	adc	r29, r29
    1afe:	cc 0f       	add	r28, r28
    1b00:	dd 1f       	adc	r29, r29
    1b02:	c0 51       	subi	r28, 0x10	; 16
    1b04:	dd 4d       	sbci	r29, 0xDD	; 221
    1b06:	8a 89       	ldd	r24, Y+18	; 0x12
    1b08:	9b 89       	ldd	r25, Y+19	; 0x13
    1b0a:	7a c0       	rjmp	.+244    	; 0x1c00 <udd_ep_trans_complet+0x2bc>
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ee 0f       	add	r30, r30
    1b10:	ff 1f       	adc	r31, r31
    1b12:	ee 0f       	add	r30, r30
    1b14:	ff 1f       	adc	r31, r31
    1b16:	ee 0f       	add	r30, r30
    1b18:	ff 1f       	adc	r31, r31
    1b1a:	e0 51       	subi	r30, 0x10	; 16
    1b1c:	fd 4d       	sbci	r31, 0xDD	; 221
    1b1e:	42 89       	ldd	r20, Z+18	; 0x12
    1b20:	53 89       	ldd	r21, Z+19	; 0x13
    1b22:	4a 15       	cp	r20, r10
    1b24:	5b 05       	cpc	r21, r11
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <udd_ep_trans_complet+0x1e6>
    1b28:	6b c0       	rjmp	.+214    	; 0x1c00 <udd_ep_trans_complet+0x2bc>
    1b2a:	28 17       	cp	r18, r24
    1b2c:	39 07       	cpc	r19, r25
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <udd_ep_trans_complet+0x1ee>
    1b30:	67 c0       	rjmp	.+206    	; 0x1c00 <udd_ep_trans_complet+0x2bc>
    1b32:	ac 01       	movw	r20, r24
    1b34:	42 1b       	sub	r20, r18
    1b36:	53 0b       	sbc	r21, r19
    1b38:	9a 01       	movw	r18, r20
    1b3a:	21 15       	cp	r18, r1
    1b3c:	54 e0       	ldi	r21, 0x04	; 4
    1b3e:	35 07       	cpc	r19, r21
    1b40:	50 f0       	brcs	.+20     	; 0x1b56 <udd_ep_trans_complet+0x212>
    1b42:	2f ef       	ldi	r18, 0xFF	; 255
    1b44:	33 e0       	ldi	r19, 0x03	; 3
    1b46:	c9 01       	movw	r24, r18
    1b48:	b4 01       	movw	r22, r8
    1b4a:	63 d6       	rcall	.+3270   	; 0x2812 <__udivmodhi4>
    1b4c:	d9 01       	movw	r26, r18
    1b4e:	a8 1b       	sub	r26, r24
    1b50:	b9 0b       	sbc	r27, r25
    1b52:	cd 01       	movw	r24, r26
    1b54:	07 c0       	rjmp	.+14     	; 0x1b64 <udd_ep_trans_complet+0x220>
    1b56:	c9 01       	movw	r24, r18
    1b58:	b4 01       	movw	r22, r8
    1b5a:	5b d6       	rcall	.+3254   	; 0x2812 <__udivmodhi4>
    1b5c:	f9 01       	movw	r30, r18
    1b5e:	e8 1b       	sub	r30, r24
    1b60:	f9 0b       	sbc	r31, r25
    1b62:	cf 01       	movw	r24, r30
    1b64:	fe 01       	movw	r30, r28
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	ee 0f       	add	r30, r30
    1b6c:	ff 1f       	adc	r31, r31
    1b6e:	ee 0f       	add	r30, r30
    1b70:	ff 1f       	adc	r31, r31
    1b72:	e0 51       	subi	r30, 0x10	; 16
    1b74:	fd 4d       	sbci	r31, 0xDD	; 221
    1b76:	16 86       	std	Z+14, r1	; 0x0e
    1b78:	17 86       	std	Z+15, r1	; 0x0f
    1b7a:	88 15       	cp	r24, r8
    1b7c:	99 05       	cpc	r25, r9
    1b7e:	00 f5       	brcc	.+64     	; 0x1bc0 <udd_ep_trans_complet+0x27c>
    1b80:	d8 01       	movw	r26, r16
    1b82:	8c 91       	ld	r24, X
    1b84:	84 60       	ori	r24, 0x04	; 4
    1b86:	8c 93       	st	X, r24
    1b88:	b0 e4       	ldi	r27, 0x40	; 64
    1b8a:	db 9e       	mul	r13, r27
    1b8c:	c0 01       	movw	r24, r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	89 53       	subi	r24, 0x39	; 57
    1b92:	9e 4d       	sbci	r25, 0xDE	; 222
    1b94:	fe 01       	movw	r30, r28
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	ff 1f       	adc	r31, r31
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	e0 50       	subi	r30, 0x00	; 0
    1ba4:	fd 4d       	sbci	r31, 0xDD	; 221
    1ba6:	80 83       	st	Z, r24
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	cc 0f       	add	r28, r28
    1bac:	dd 1f       	adc	r29, r29
    1bae:	cc 0f       	add	r28, r28
    1bb0:	dd 1f       	adc	r29, r29
    1bb2:	cc 0f       	add	r28, r28
    1bb4:	dd 1f       	adc	r29, r29
    1bb6:	c0 51       	subi	r28, 0x10	; 16
    1bb8:	dd 4d       	sbci	r29, 0xDD	; 221
    1bba:	8a 8a       	std	Y+18, r8	; 0x12
    1bbc:	9b 8a       	std	Y+19, r9	; 0x13
    1bbe:	1c c0       	rjmp	.+56     	; 0x1bf8 <udd_ep_trans_complet+0x2b4>
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	41 81       	ldd	r20, Z+1	; 0x01
    1bc4:	52 81       	ldd	r21, Z+2	; 0x02
    1bc6:	25 81       	ldd	r18, Z+5	; 0x05
    1bc8:	36 81       	ldd	r19, Z+6	; 0x06
    1bca:	24 0f       	add	r18, r20
    1bcc:	35 1f       	adc	r19, r21
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ee 0f       	add	r30, r30
    1bd2:	ff 1f       	adc	r31, r31
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	ee 0f       	add	r30, r30
    1bda:	ff 1f       	adc	r31, r31
    1bdc:	e0 50       	subi	r30, 0x00	; 0
    1bde:	fd 4d       	sbci	r31, 0xDD	; 221
    1be0:	20 83       	st	Z, r18
    1be2:	31 83       	std	Z+1, r19	; 0x01
    1be4:	cc 0f       	add	r28, r28
    1be6:	dd 1f       	adc	r29, r29
    1be8:	cc 0f       	add	r28, r28
    1bea:	dd 1f       	adc	r29, r29
    1bec:	cc 0f       	add	r28, r28
    1bee:	dd 1f       	adc	r29, r29
    1bf0:	c0 51       	subi	r28, 0x10	; 16
    1bf2:	dd 4d       	sbci	r29, 0xDD	; 221
    1bf4:	8a 8b       	std	Y+18, r24	; 0x12
    1bf6:	9b 8b       	std	Y+19, r25	; 0x13
    1bf8:	f7 01       	movw	r30, r14
    1bfa:	02 e0       	ldi	r16, 0x02	; 2
    1bfc:	06 93       	lac	Z, r16
    1bfe:	13 c0       	rjmp	.+38     	; 0x1c26 <udd_ep_trans_complet+0x2e2>
    1c00:	d8 01       	movw	r26, r16
    1c02:	8c 91       	ld	r24, X
    1c04:	80 ff       	sbrs	r24, 0
    1c06:	0f c0       	rjmp	.+30     	; 0x1c26 <udd_ep_trans_complet+0x2e2>
    1c08:	8e 7f       	andi	r24, 0xFE	; 254
    1c0a:	8c 93       	st	X, r24
    1c0c:	17 96       	adiw	r26, 0x07	; 7
    1c0e:	ed 91       	ld	r30, X+
    1c10:	fc 91       	ld	r31, X
    1c12:	18 97       	sbiw	r26, 0x08	; 8
    1c14:	30 97       	sbiw	r30, 0x00	; 0
    1c16:	39 f0       	breq	.+14     	; 0x1c26 <udd_ep_trans_complet+0x2e2>
    1c18:	15 96       	adiw	r26, 0x05	; 5
    1c1a:	6d 91       	ld	r22, X+
    1c1c:	7c 91       	ld	r23, X
    1c1e:	16 97       	sbiw	r26, 0x06	; 6
    1c20:	4d 2d       	mov	r20, r13
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	19 95       	eicall
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	df 90       	pop	r13
    1c34:	bf 90       	pop	r11
    1c36:	af 90       	pop	r10
    1c38:	9f 90       	pop	r9
    1c3a:	8f 90       	pop	r8
    1c3c:	08 95       	ret

00001c3e <udd_attach>:
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	1f 92       	push	r1
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	8f b7       	in	r24, 0x3f	; 63
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	f8 94       	cli
    1c50:	19 81       	ldd	r17, Y+1	; 0x01
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	d5 dc       	rcall	.-1622   	; 0x1600 <udd_sleep_mode>
    1c56:	ea ec       	ldi	r30, 0xCA	; 202
    1c58:	f4 e0       	ldi	r31, 0x04	; 4
    1c5a:	80 e4       	ldi	r24, 0x40	; 64
    1c5c:	80 83       	st	Z, r24
    1c5e:	80 e2       	ldi	r24, 0x20	; 32
    1c60:	80 83       	st	Z, r24
    1c62:	e1 ec       	ldi	r30, 0xC1	; 193
    1c64:	f4 e0       	ldi	r31, 0x04	; 4
    1c66:	80 81       	ld	r24, Z
    1c68:	81 60       	ori	r24, 0x01	; 1
    1c6a:	80 83       	st	Z, r24
    1c6c:	a9 ec       	ldi	r26, 0xC9	; 201
    1c6e:	b4 e0       	ldi	r27, 0x04	; 4
    1c70:	8c 91       	ld	r24, X
    1c72:	82 60       	ori	r24, 0x02	; 2
    1c74:	8c 93       	st	X, r24
    1c76:	e8 ec       	ldi	r30, 0xC8	; 200
    1c78:	f4 e0       	ldi	r31, 0x04	; 4
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 64       	ori	r24, 0x40	; 64
    1c7e:	80 83       	st	Z, r24
    1c80:	8c 91       	ld	r24, X
    1c82:	81 60       	ori	r24, 0x01	; 1
    1c84:	8c 93       	st	X, r24
    1c86:	80 81       	ld	r24, Z
    1c88:	80 68       	ori	r24, 0x80	; 128
    1c8a:	80 83       	st	Z, r24
    1c8c:	1f bf       	out	0x3f, r17	; 63
    1c8e:	0f 90       	pop	r0
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	08 95       	ret

00001c98 <udd_enable>:
    1c98:	0f 93       	push	r16
    1c9a:	1f 93       	push	r17
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	1f 92       	push	r1
    1ca2:	1f 92       	push	r1
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	00 e6       	ldi	r16, 0x60	; 96
    1caa:	10 e0       	ldi	r17, 0x00	; 0
    1cac:	f8 01       	movw	r30, r16
    1cae:	10 82       	st	Z, r1
    1cb0:	80 e3       	ldi	r24, 0x30	; 48
    1cb2:	0e 94 12 02 	call	0x424	; 0x424 <sysclk_enable_usb>
    1cb6:	e0 ec       	ldi	r30, 0xC0	; 192
    1cb8:	f4 e0       	ldi	r31, 0x04	; 4
    1cba:	80 81       	ld	r24, Z
    1cbc:	80 64       	ori	r24, 0x40	; 64
    1cbe:	80 83       	st	Z, r24
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	80 83       	st	Z, r24
    1cc6:	8f b7       	in	r24, 0x3f	; 63
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
    1cca:	f8 94       	cli
    1ccc:	1a 81       	ldd	r17, Y+2	; 0x02
    1cce:	e0 ef       	ldi	r30, 0xF0	; 240
    1cd0:	f2 e2       	ldi	r31, 0x22	; 34
    1cd2:	15 86       	std	Z+13, r1	; 0x0d
    1cd4:	15 8a       	std	Z+21, r1	; 0x15
    1cd6:	15 8e       	std	Z+29, r1	; 0x1d
    1cd8:	15 a2       	std	Z+37, r1	; 0x25
    1cda:	15 a6       	std	Z+45, r1	; 0x2d
    1cdc:	15 aa       	std	Z+53, r1	; 0x35
    1cde:	e7 e8       	ldi	r30, 0x87	; 135
    1ce0:	f2 e2       	ldi	r31, 0x22	; 34
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8e 7f       	andi	r24, 0xFE	; 254
    1ce6:	80 83       	st	Z, r24
    1ce8:	e0 e9       	ldi	r30, 0x90	; 144
    1cea:	f2 e2       	ldi	r31, 0x22	; 34
    1cec:	80 81       	ld	r24, Z
    1cee:	8e 7f       	andi	r24, 0xFE	; 254
    1cf0:	80 83       	st	Z, r24
    1cf2:	e9 e9       	ldi	r30, 0x99	; 153
    1cf4:	f2 e2       	ldi	r31, 0x22	; 34
    1cf6:	80 81       	ld	r24, Z
    1cf8:	8e 7f       	andi	r24, 0xFE	; 254
    1cfa:	80 83       	st	Z, r24
    1cfc:	e2 ea       	ldi	r30, 0xA2	; 162
    1cfe:	f2 e2       	ldi	r31, 0x22	; 34
    1d00:	80 81       	ld	r24, Z
    1d02:	8e 7f       	andi	r24, 0xFE	; 254
    1d04:	80 83       	st	Z, r24
    1d06:	6a e1       	ldi	r22, 0x1A	; 26
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	6f dc       	rcall	.-1826   	; 0x15ec <nvm_read_byte>
    1d0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d10:	19 f0       	breq	.+6      	; 0x1d18 <udd_enable+0x80>
    1d12:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1d16:	03 c0       	rjmp	.+6      	; 0x1d1e <udd_enable+0x86>
    1d18:	8f e1       	ldi	r24, 0x1F	; 31
    1d1a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1d1e:	6b e1       	ldi	r22, 0x1B	; 27
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	63 dc       	rcall	.-1850   	; 0x15ec <nvm_read_byte>
    1d26:	8f 3f       	cpi	r24, 0xFF	; 255
    1d28:	19 f0       	breq	.+6      	; 0x1d30 <udd_enable+0x98>
    1d2a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1d2e:	03 c0       	rjmp	.+6      	; 0x1d36 <udd_enable+0x9e>
    1d30:	8f e1       	ldi	r24, 0x1F	; 31
    1d32:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1d36:	e0 ec       	ldi	r30, 0xC0	; 192
    1d38:	f4 e0       	ldi	r31, 0x04	; 4
    1d3a:	80 81       	ld	r24, Z
    1d3c:	82 60       	ori	r24, 0x02	; 2
    1d3e:	80 83       	st	Z, r24
    1d40:	80 81       	ld	r24, Z
    1d42:	80 68       	ori	r24, 0x80	; 128
    1d44:	80 83       	st	Z, r24
    1d46:	80 81       	ld	r24, Z
    1d48:	80 61       	ori	r24, 0x10	; 16
    1d4a:	80 83       	st	Z, r24
    1d4c:	8c ef       	ldi	r24, 0xFC	; 252
    1d4e:	92 e2       	ldi	r25, 0x22	; 34
    1d50:	86 83       	std	Z+6, r24	; 0x06
    1d52:	97 83       	std	Z+7, r25	; 0x07
    1d54:	80 81       	ld	r24, Z
    1d56:	80 62       	ori	r24, 0x20	; 32
    1d58:	80 83       	st	Z, r24
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    1d60:	e8 ec       	ldi	r30, 0xC8	; 200
    1d62:	f4 e0       	ldi	r31, 0x04	; 4
    1d64:	80 81       	ld	r24, Z
    1d66:	81 60       	ori	r24, 0x01	; 1
    1d68:	80 83       	st	Z, r24
    1d6a:	10 92 30 23 	sts	0x2330, r1	; 0x802330 <udd_b_idle>
    1d6e:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <sleepmgr_locks+0x5>
    1d72:	8f 3f       	cpi	r24, 0xFF	; 255
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <udd_enable+0xe0>
    1d76:	ff cf       	rjmp	.-2      	; 0x1d76 <udd_enable+0xde>
    1d78:	8f b7       	in	r24, 0x3f	; 63
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	f8 94       	cli
    1d7e:	99 81       	ldd	r25, Y+1	; 0x01
    1d80:	e2 e3       	ldi	r30, 0x32	; 50
    1d82:	f3 e2       	ldi	r31, 0x23	; 35
    1d84:	85 81       	ldd	r24, Z+5	; 0x05
    1d86:	8f 5f       	subi	r24, 0xFF	; 255
    1d88:	85 83       	std	Z+5, r24	; 0x05
    1d8a:	9f bf       	out	0x3f, r25	; 63
    1d8c:	58 df       	rcall	.-336    	; 0x1c3e <udd_attach>
    1d8e:	1f bf       	out	0x3f, r17	; 63
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <udd_is_high_speed>:
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	08 95       	ret

00001da2 <udd_set_address>:
    1da2:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1da6:	08 95       	ret

00001da8 <udd_getaddress>:
    1da8:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1dac:	08 95       	ret

00001dae <udd_get_frame_number>:
    1dae:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udd_sram+0x3c>
    1db2:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <udd_sram+0x3d>
    1db6:	08 95       	ret

00001db8 <udd_get_micro_frame_number>:
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	08 95       	ret

00001dbe <udd_set_setup_payload>:
    1dbe:	e8 e3       	ldi	r30, 0x38	; 56
    1dc0:	f3 e2       	ldi	r31, 0x23	; 35
    1dc2:	80 87       	std	Z+8, r24	; 0x08
    1dc4:	91 87       	std	Z+9, r25	; 0x09
    1dc6:	62 87       	std	Z+10, r22	; 0x0a
    1dc8:	73 87       	std	Z+11, r23	; 0x0b
    1dca:	08 95       	ret

00001dcc <udd_ep_alloc>:
    1dcc:	28 2f       	mov	r18, r24
    1dce:	2f 70       	andi	r18, 0x0F	; 15
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	22 0f       	add	r18, r18
    1dd4:	33 1f       	adc	r19, r19
    1dd6:	08 2e       	mov	r0, r24
    1dd8:	00 0c       	add	r0, r0
    1dda:	99 0b       	sbc	r25, r25
    1ddc:	88 27       	eor	r24, r24
    1dde:	99 0f       	add	r25, r25
    1de0:	88 1f       	adc	r24, r24
    1de2:	99 27       	eor	r25, r25
    1de4:	82 0f       	add	r24, r18
    1de6:	93 1f       	adc	r25, r19
    1de8:	fc 01       	movw	r30, r24
    1dea:	ee 0f       	add	r30, r30
    1dec:	ff 1f       	adc	r31, r31
    1dee:	ee 0f       	add	r30, r30
    1df0:	ff 1f       	adc	r31, r31
    1df2:	ee 0f       	add	r30, r30
    1df4:	ff 1f       	adc	r31, r31
    1df6:	e0 51       	subi	r30, 0x10	; 16
    1df8:	fd 4d       	sbci	r31, 0xDD	; 221
    1dfa:	25 85       	ldd	r18, Z+13	; 0x0d
    1dfc:	20 7c       	andi	r18, 0xC0	; 192
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <udd_ep_alloc+0x36>
    1e00:	69 c0       	rjmp	.+210    	; 0x1ed4 <udd_ep_alloc+0x108>
    1e02:	63 70       	andi	r22, 0x03	; 3
    1e04:	61 30       	cpi	r22, 0x01	; 1
    1e06:	11 f0       	breq	.+4      	; 0x1e0c <udd_ep_alloc+0x40>
    1e08:	18 f4       	brcc	.+6      	; 0x1e10 <udd_ep_alloc+0x44>
    1e0a:	04 c0       	rjmp	.+8      	; 0x1e14 <udd_ep_alloc+0x48>
    1e0c:	20 ec       	ldi	r18, 0xC0	; 192
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <udd_ep_alloc+0x4a>
    1e10:	20 e8       	ldi	r18, 0x80	; 128
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <udd_ep_alloc+0x4a>
    1e14:	20 e4       	ldi	r18, 0x40	; 64
    1e16:	40 38       	cpi	r20, 0x80	; 128
    1e18:	51 05       	cpc	r21, r1
    1e1a:	e9 f0       	breq	.+58     	; 0x1e56 <udd_ep_alloc+0x8a>
    1e1c:	50 f4       	brcc	.+20     	; 0x1e32 <udd_ep_alloc+0x66>
    1e1e:	40 32       	cpi	r20, 0x20	; 32
    1e20:	51 05       	cpc	r21, r1
    1e22:	a9 f0       	breq	.+42     	; 0x1e4e <udd_ep_alloc+0x82>
    1e24:	40 34       	cpi	r20, 0x40	; 64
    1e26:	51 05       	cpc	r21, r1
    1e28:	a1 f0       	breq	.+40     	; 0x1e52 <udd_ep_alloc+0x86>
    1e2a:	40 31       	cpi	r20, 0x10	; 16
    1e2c:	51 05       	cpc	r21, r1
    1e2e:	d9 f4       	brne	.+54     	; 0x1e66 <udd_ep_alloc+0x9a>
    1e30:	0c c0       	rjmp	.+24     	; 0x1e4a <udd_ep_alloc+0x7e>
    1e32:	41 15       	cp	r20, r1
    1e34:	32 e0       	ldi	r19, 0x02	; 2
    1e36:	53 07       	cpc	r21, r19
    1e38:	91 f0       	breq	.+36     	; 0x1e5e <udd_ep_alloc+0x92>
    1e3a:	4f 3f       	cpi	r20, 0xFF	; 255
    1e3c:	33 e0       	ldi	r19, 0x03	; 3
    1e3e:	53 07       	cpc	r21, r19
    1e40:	81 f0       	breq	.+32     	; 0x1e62 <udd_ep_alloc+0x96>
    1e42:	41 15       	cp	r20, r1
    1e44:	51 40       	sbci	r21, 0x01	; 1
    1e46:	79 f4       	brne	.+30     	; 0x1e66 <udd_ep_alloc+0x9a>
    1e48:	08 c0       	rjmp	.+16     	; 0x1e5a <udd_ep_alloc+0x8e>
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	0d c0       	rjmp	.+26     	; 0x1e68 <udd_ep_alloc+0x9c>
    1e4e:	42 e0       	ldi	r20, 0x02	; 2
    1e50:	0b c0       	rjmp	.+22     	; 0x1e68 <udd_ep_alloc+0x9c>
    1e52:	43 e0       	ldi	r20, 0x03	; 3
    1e54:	09 c0       	rjmp	.+18     	; 0x1e68 <udd_ep_alloc+0x9c>
    1e56:	44 e0       	ldi	r20, 0x04	; 4
    1e58:	07 c0       	rjmp	.+14     	; 0x1e68 <udd_ep_alloc+0x9c>
    1e5a:	45 e0       	ldi	r20, 0x05	; 5
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <udd_ep_alloc+0x9c>
    1e5e:	46 e0       	ldi	r20, 0x06	; 6
    1e60:	03 c0       	rjmp	.+6      	; 0x1e68 <udd_ep_alloc+0x9c>
    1e62:	47 e0       	ldi	r20, 0x07	; 7
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <udd_ep_alloc+0x9c>
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	fc 01       	movw	r30, r24
    1e6a:	ee 0f       	add	r30, r30
    1e6c:	ff 1f       	adc	r31, r31
    1e6e:	ee 0f       	add	r30, r30
    1e70:	ff 1f       	adc	r31, r31
    1e72:	ee 0f       	add	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	e0 51       	subi	r30, 0x10	; 16
    1e78:	fd 4d       	sbci	r31, 0xDD	; 221
    1e7a:	15 86       	std	Z+13, r1	; 0x0d
    1e7c:	36 e0       	ldi	r19, 0x06	; 6
    1e7e:	34 87       	std	Z+12, r19	; 0x0c
    1e80:	24 2b       	or	r18, r20
    1e82:	25 87       	std	Z+13, r18	; 0x0d
    1e84:	fc 01       	movw	r30, r24
    1e86:	ee 0f       	add	r30, r30
    1e88:	ff 1f       	adc	r31, r31
    1e8a:	ee 0f       	add	r30, r30
    1e8c:	ff 1f       	adc	r31, r31
    1e8e:	ee 0f       	add	r30, r30
    1e90:	ff 1f       	adc	r31, r31
    1e92:	e0 51       	subi	r30, 0x10	; 16
    1e94:	fd 4d       	sbci	r31, 0xDD	; 221
    1e96:	25 85       	ldd	r18, Z+13	; 0x0d
    1e98:	20 7c       	andi	r18, 0xC0	; 192
    1e9a:	20 3c       	cpi	r18, 0xC0	; 192
    1e9c:	69 f4       	brne	.+26     	; 0x1eb8 <udd_ep_alloc+0xec>
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	ee 0f       	add	r30, r30
    1ea6:	ff 1f       	adc	r31, r31
    1ea8:	ee 0f       	add	r30, r30
    1eaa:	ff 1f       	adc	r31, r31
    1eac:	e0 51       	subi	r30, 0x10	; 16
    1eae:	fd 4d       	sbci	r31, 0xDD	; 221
    1eb0:	25 85       	ldd	r18, Z+13	; 0x0d
    1eb2:	27 70       	andi	r18, 0x07	; 7
    1eb4:	27 30       	cpi	r18, 0x07	; 7
    1eb6:	81 f0       	breq	.+32     	; 0x1ed8 <udd_ep_alloc+0x10c>
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	e0 51       	subi	r30, 0x10	; 16
    1ec8:	fd 4d       	sbci	r31, 0xDD	; 221
    1eca:	85 85       	ldd	r24, Z+13	; 0x0d
    1ecc:	80 62       	ori	r24, 0x20	; 32
    1ece:	85 87       	std	Z+13, r24	; 0x0d
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	08 95       	ret
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	08 95       	ret
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	08 95       	ret

00001edc <udd_ep_is_halted>:
    1edc:	e8 2f       	mov	r30, r24
    1ede:	ef 70       	andi	r30, 0x0F	; 15
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	08 2e       	mov	r0, r24
    1ee8:	00 0c       	add	r0, r0
    1eea:	99 0b       	sbc	r25, r25
    1eec:	88 27       	eor	r24, r24
    1eee:	99 0f       	add	r25, r25
    1ef0:	88 1f       	adc	r24, r24
    1ef2:	99 27       	eor	r25, r25
    1ef4:	e8 0f       	add	r30, r24
    1ef6:	f9 1f       	adc	r31, r25
    1ef8:	ee 0f       	add	r30, r30
    1efa:	ff 1f       	adc	r31, r31
    1efc:	ee 0f       	add	r30, r30
    1efe:	ff 1f       	adc	r31, r31
    1f00:	ee 0f       	add	r30, r30
    1f02:	ff 1f       	adc	r31, r31
    1f04:	e0 51       	subi	r30, 0x10	; 16
    1f06:	fd 4d       	sbci	r31, 0xDD	; 221
    1f08:	85 85       	ldd	r24, Z+13	; 0x0d
    1f0a:	82 fb       	bst	r24, 2
    1f0c:	88 27       	eor	r24, r24
    1f0e:	80 f9       	bld	r24, 0
    1f10:	08 95       	ret

00001f12 <udd_ep_clear_halt>:
    1f12:	0f 93       	push	r16
    1f14:	28 2f       	mov	r18, r24
    1f16:	2f 70       	andi	r18, 0x0F	; 15
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	a9 01       	movw	r20, r18
    1f1c:	44 0f       	add	r20, r20
    1f1e:	55 1f       	adc	r21, r21
    1f20:	28 2f       	mov	r18, r24
    1f22:	08 2e       	mov	r0, r24
    1f24:	00 0c       	add	r0, r0
    1f26:	33 0b       	sbc	r19, r19
    1f28:	22 27       	eor	r18, r18
    1f2a:	33 0f       	add	r19, r19
    1f2c:	22 1f       	adc	r18, r18
    1f2e:	33 27       	eor	r19, r19
    1f30:	24 0f       	add	r18, r20
    1f32:	35 1f       	adc	r19, r21
    1f34:	a9 01       	movw	r20, r18
    1f36:	44 0f       	add	r20, r20
    1f38:	55 1f       	adc	r21, r21
    1f3a:	44 0f       	add	r20, r20
    1f3c:	55 1f       	adc	r21, r21
    1f3e:	44 0f       	add	r20, r20
    1f40:	55 1f       	adc	r21, r21
    1f42:	fa 01       	movw	r30, r20
    1f44:	e4 50       	subi	r30, 0x04	; 4
    1f46:	fd 4d       	sbci	r31, 0xDD	; 221
    1f48:	01 e0       	ldi	r16, 0x01	; 1
    1f4a:	06 93       	lac	Z, r16
    1f4c:	fa 01       	movw	r30, r20
    1f4e:	e0 51       	subi	r30, 0x10	; 16
    1f50:	fd 4d       	sbci	r31, 0xDD	; 221
    1f52:	95 85       	ldd	r25, Z+13	; 0x0d
    1f54:	92 ff       	sbrs	r25, 2
    1f56:	11 c0       	rjmp	.+34     	; 0x1f7a <udd_ep_clear_halt+0x68>
    1f58:	fa 01       	movw	r30, r20
    1f5a:	e0 51       	subi	r30, 0x10	; 16
    1f5c:	fd 4d       	sbci	r31, 0xDD	; 221
    1f5e:	95 85       	ldd	r25, Z+13	; 0x0d
    1f60:	9b 7f       	andi	r25, 0xFB	; 251
    1f62:	95 87       	std	Z+13, r25	; 0x0d
    1f64:	63 dc       	rcall	.-1850   	; 0x182c <udd_ep_get_job>
    1f66:	fc 01       	movw	r30, r24
    1f68:	80 81       	ld	r24, Z
    1f6a:	80 ff       	sbrs	r24, 0
    1f6c:	06 c0       	rjmp	.+12     	; 0x1f7a <udd_ep_clear_halt+0x68>
    1f6e:	8e 7f       	andi	r24, 0xFE	; 254
    1f70:	80 83       	st	Z, r24
    1f72:	07 80       	ldd	r0, Z+7	; 0x07
    1f74:	f0 85       	ldd	r31, Z+8	; 0x08
    1f76:	e0 2d       	mov	r30, r0
    1f78:	19 95       	eicall
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	0f 91       	pop	r16
    1f7e:	08 95       	ret

00001f80 <udd_ep_run>:
    1f80:	5f 92       	push	r5
    1f82:	6f 92       	push	r6
    1f84:	7f 92       	push	r7
    1f86:	8f 92       	push	r8
    1f88:	9f 92       	push	r9
    1f8a:	af 92       	push	r10
    1f8c:	bf 92       	push	r11
    1f8e:	cf 92       	push	r12
    1f90:	df 92       	push	r13
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	1f 92       	push	r1
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	78 2e       	mov	r7, r24
    1fa6:	66 2e       	mov	r6, r22
    1fa8:	4a 01       	movw	r8, r20
    1faa:	59 01       	movw	r10, r18
    1fac:	3f dc       	rcall	.-1922   	; 0x182c <udd_ep_get_job>
    1fae:	6c 01       	movw	r12, r24
    1fb0:	57 2c       	mov	r5, r7
    1fb2:	55 1c       	adc	r5, r5
    1fb4:	55 24       	eor	r5, r5
    1fb6:	55 1c       	adc	r5, r5
    1fb8:	87 2d       	mov	r24, r7
    1fba:	8f 70       	andi	r24, 0x0F	; 15
    1fbc:	e8 2e       	mov	r14, r24
    1fbe:	f1 2c       	mov	r15, r1
    1fc0:	ee 0c       	add	r14, r14
    1fc2:	ff 1c       	adc	r15, r15
    1fc4:	e5 0c       	add	r14, r5
    1fc6:	f1 1c       	adc	r15, r1
    1fc8:	f7 01       	movw	r30, r14
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	ee 0f       	add	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	e0 51       	subi	r30, 0x10	; 16
    1fd8:	fd 4d       	sbci	r31, 0xDD	; 221
    1fda:	85 85       	ldd	r24, Z+13	; 0x0d
    1fdc:	80 7c       	andi	r24, 0xC0	; 192
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <udd_ep_run+0x62>
    1fe0:	81 c0       	rjmp	.+258    	; 0x20e4 <udd_ep_run+0x164>
    1fe2:	f7 01       	movw	r30, r14
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	e0 51       	subi	r30, 0x10	; 16
    1ff2:	fd 4d       	sbci	r31, 0xDD	; 221
    1ff4:	85 85       	ldd	r24, Z+13	; 0x0d
    1ff6:	80 7c       	andi	r24, 0xC0	; 192
    1ff8:	80 3c       	cpi	r24, 0xC0	; 192
    1ffa:	61 f0       	breq	.+24     	; 0x2014 <udd_ep_run+0x94>
    1ffc:	f7 01       	movw	r30, r14
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	ee 0f       	add	r30, r30
    2008:	ff 1f       	adc	r31, r31
    200a:	e0 51       	subi	r30, 0x10	; 16
    200c:	fd 4d       	sbci	r31, 0xDD	; 221
    200e:	85 85       	ldd	r24, Z+13	; 0x0d
    2010:	82 fd       	sbrc	r24, 2
    2012:	6a c0       	rjmp	.+212    	; 0x20e8 <udd_ep_run+0x168>
    2014:	8f b7       	in	r24, 0x3f	; 63
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	f8 94       	cli
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	f6 01       	movw	r30, r12
    201e:	90 81       	ld	r25, Z
    2020:	90 ff       	sbrs	r25, 0
    2022:	03 c0       	rjmp	.+6      	; 0x202a <udd_ep_run+0xaa>
    2024:	8f bf       	out	0x3f, r24	; 63
    2026:	51 2c       	mov	r5, r1
    2028:	60 c0       	rjmp	.+192    	; 0x20ea <udd_ep_run+0x16a>
    202a:	f6 01       	movw	r30, r12
    202c:	90 81       	ld	r25, Z
    202e:	91 60       	ori	r25, 0x01	; 1
    2030:	90 83       	st	Z, r25
    2032:	8f bf       	out	0x3f, r24	; 63
    2034:	81 82       	std	Z+1, r8	; 0x01
    2036:	92 82       	std	Z+2, r9	; 0x02
    2038:	a3 82       	std	Z+3, r10	; 0x03
    203a:	b4 82       	std	Z+4, r11	; 0x04
    203c:	15 82       	std	Z+5, r1	; 0x05
    203e:	16 82       	std	Z+6, r1	; 0x06
    2040:	07 83       	std	Z+7, r16	; 0x07
    2042:	10 87       	std	Z+8, r17	; 0x08
    2044:	61 10       	cpse	r6, r1
    2046:	06 c0       	rjmp	.+12     	; 0x2054 <udd_ep_run+0xd4>
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	a1 14       	cp	r10, r1
    204c:	b1 04       	cpc	r11, r1
    204e:	19 f0       	breq	.+6      	; 0x2056 <udd_ep_run+0xd6>
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <udd_ep_run+0xd6>
    2054:	91 e0       	ldi	r25, 0x01	; 1
    2056:	f6 01       	movw	r30, r12
    2058:	80 81       	ld	r24, Z
    205a:	90 fb       	bst	r25, 0
    205c:	81 f9       	bld	r24, 1
    205e:	8b 7f       	andi	r24, 0xFB	; 251
    2060:	80 83       	st	Z, r24
    2062:	55 20       	and	r5, r5
    2064:	61 f0       	breq	.+24     	; 0x207e <udd_ep_run+0xfe>
    2066:	f7 01       	movw	r30, r14
    2068:	ee 0f       	add	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	ee 0f       	add	r30, r30
    2072:	ff 1f       	adc	r31, r31
    2074:	e0 51       	subi	r30, 0x10	; 16
    2076:	fd 4d       	sbci	r31, 0xDD	; 221
    2078:	12 8a       	std	Z+18, r1	; 0x12
    207a:	13 8a       	std	Z+19, r1	; 0x13
    207c:	2e c0       	rjmp	.+92     	; 0x20da <udd_ep_run+0x15a>
    207e:	f7 01       	movw	r30, r14
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	ee 0f       	add	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	e0 51       	subi	r30, 0x10	; 16
    208e:	fd 4d       	sbci	r31, 0xDD	; 221
    2090:	85 85       	ldd	r24, Z+13	; 0x0d
    2092:	80 7c       	andi	r24, 0xC0	; 192
    2094:	80 3c       	cpi	r24, 0xC0	; 192
    2096:	a1 f4       	brne	.+40     	; 0x20c0 <udd_ep_run+0x140>
    2098:	c7 01       	movw	r24, r14
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	84 50       	subi	r24, 0x04	; 4
    20a8:	9d 4d       	sbci	r25, 0xDD	; 221
    20aa:	97 db       	rcall	.-2258   	; 0x17da <udd_ep_get_size>
    20ac:	bc 01       	movw	r22, r24
    20ae:	c5 01       	movw	r24, r10
    20b0:	b0 d3       	rcall	.+1888   	; 0x2812 <__udivmodhi4>
    20b2:	89 2b       	or	r24, r25
    20b4:	29 f0       	breq	.+10     	; 0x20c0 <udd_ep_run+0x140>
    20b6:	f6 01       	movw	r30, r12
    20b8:	80 81       	ld	r24, Z
    20ba:	8e 7f       	andi	r24, 0xFE	; 254
    20bc:	80 83       	st	Z, r24
    20be:	15 c0       	rjmp	.+42     	; 0x20ea <udd_ep_run+0x16a>
    20c0:	f7 01       	movw	r30, r14
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	ee 0f       	add	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	e0 51       	subi	r30, 0x10	; 16
    20d0:	fd 4d       	sbci	r31, 0xDD	; 221
    20d2:	16 86       	std	Z+14, r1	; 0x0e
    20d4:	17 86       	std	Z+15, r1	; 0x0f
    20d6:	12 8a       	std	Z+18, r1	; 0x12
    20d8:	13 8a       	std	Z+19, r1	; 0x13
    20da:	87 2d       	mov	r24, r7
    20dc:	33 dc       	rcall	.-1946   	; 0x1944 <udd_ep_trans_complet>
    20de:	55 24       	eor	r5, r5
    20e0:	53 94       	inc	r5
    20e2:	03 c0       	rjmp	.+6      	; 0x20ea <udd_ep_run+0x16a>
    20e4:	51 2c       	mov	r5, r1
    20e6:	01 c0       	rjmp	.+2      	; 0x20ea <udd_ep_run+0x16a>
    20e8:	51 2c       	mov	r5, r1
    20ea:	85 2d       	mov	r24, r5
    20ec:	0f 90       	pop	r0
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
    20f6:	ff 90       	pop	r15
    20f8:	ef 90       	pop	r14
    20fa:	df 90       	pop	r13
    20fc:	cf 90       	pop	r12
    20fe:	bf 90       	pop	r11
    2100:	af 90       	pop	r10
    2102:	9f 90       	pop	r9
    2104:	8f 90       	pop	r8
    2106:	7f 90       	pop	r7
    2108:	6f 90       	pop	r6
    210a:	5f 90       	pop	r5
    210c:	08 95       	ret

0000210e <udd_ep_abort>:
    210e:	ff 92       	push	r15
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	18 2f       	mov	r17, r24
    211a:	f8 2e       	mov	r15, r24
    211c:	ff 1c       	adc	r15, r15
    211e:	ff 24       	eor	r15, r15
    2120:	ff 1c       	adc	r15, r15
    2122:	c8 2f       	mov	r28, r24
    2124:	cf 70       	andi	r28, 0x0F	; 15
    2126:	d0 e0       	ldi	r29, 0x00	; 0
    2128:	cc 0f       	add	r28, r28
    212a:	dd 1f       	adc	r29, r29
    212c:	cf 0d       	add	r28, r15
    212e:	d1 1d       	adc	r29, r1
    2130:	7d db       	rcall	.-2310   	; 0x182c <udd_ep_get_job>
    2132:	dc 01       	movw	r26, r24
    2134:	fe 01       	movw	r30, r28
    2136:	ee 0f       	add	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	e4 50       	subi	r30, 0x04	; 4
    2144:	fd 4d       	sbci	r31, 0xDD	; 221
    2146:	02 e0       	ldi	r16, 0x02	; 2
    2148:	05 93       	las	Z, r16
    214a:	8c 91       	ld	r24, X
    214c:	80 ff       	sbrs	r24, 0
    214e:	22 c0       	rjmp	.+68     	; 0x2194 <udd_ep_abort+0x86>
    2150:	8e 7f       	andi	r24, 0xFE	; 254
    2152:	8c 93       	st	X, r24
    2154:	17 96       	adiw	r26, 0x07	; 7
    2156:	ed 91       	ld	r30, X+
    2158:	fc 91       	ld	r31, X
    215a:	18 97       	sbiw	r26, 0x08	; 8
    215c:	30 97       	sbiw	r30, 0x00	; 0
    215e:	d1 f0       	breq	.+52     	; 0x2194 <udd_ep_abort+0x86>
    2160:	ff 20       	and	r15, r15
    2162:	59 f0       	breq	.+22     	; 0x217a <udd_ep_abort+0x6c>
    2164:	cc 0f       	add	r28, r28
    2166:	dd 1f       	adc	r29, r29
    2168:	cc 0f       	add	r28, r28
    216a:	dd 1f       	adc	r29, r29
    216c:	cc 0f       	add	r28, r28
    216e:	dd 1f       	adc	r29, r29
    2170:	c0 51       	subi	r28, 0x10	; 16
    2172:	dd 4d       	sbci	r29, 0xDD	; 221
    2174:	6a 89       	ldd	r22, Y+18	; 0x12
    2176:	7b 89       	ldd	r23, Y+19	; 0x13
    2178:	0a c0       	rjmp	.+20     	; 0x218e <udd_ep_abort+0x80>
    217a:	cc 0f       	add	r28, r28
    217c:	dd 1f       	adc	r29, r29
    217e:	cc 0f       	add	r28, r28
    2180:	dd 1f       	adc	r29, r29
    2182:	cc 0f       	add	r28, r28
    2184:	dd 1f       	adc	r29, r29
    2186:	c0 51       	subi	r28, 0x10	; 16
    2188:	dd 4d       	sbci	r29, 0xDD	; 221
    218a:	6e 85       	ldd	r22, Y+14	; 0x0e
    218c:	7f 85       	ldd	r23, Y+15	; 0x0f
    218e:	41 2f       	mov	r20, r17
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	19 95       	eicall
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	ff 90       	pop	r15
    219e:	08 95       	ret

000021a0 <udd_ep_free>:
    21a0:	cf 93       	push	r28
    21a2:	c8 2f       	mov	r28, r24
    21a4:	b4 df       	rcall	.-152    	; 0x210e <udd_ep_abort>
    21a6:	ec 2f       	mov	r30, r28
    21a8:	ef 70       	andi	r30, 0x0F	; 15
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	8c 2f       	mov	r24, r28
    21b2:	cc 0f       	add	r28, r28
    21b4:	99 0b       	sbc	r25, r25
    21b6:	88 27       	eor	r24, r24
    21b8:	99 0f       	add	r25, r25
    21ba:	88 1f       	adc	r24, r24
    21bc:	99 27       	eor	r25, r25
    21be:	e8 0f       	add	r30, r24
    21c0:	f9 1f       	adc	r31, r25
    21c2:	ee 0f       	add	r30, r30
    21c4:	ff 1f       	adc	r31, r31
    21c6:	ee 0f       	add	r30, r30
    21c8:	ff 1f       	adc	r31, r31
    21ca:	ee 0f       	add	r30, r30
    21cc:	ff 1f       	adc	r31, r31
    21ce:	e0 51       	subi	r30, 0x10	; 16
    21d0:	fd 4d       	sbci	r31, 0xDD	; 221
    21d2:	15 86       	std	Z+13, r1	; 0x0d
    21d4:	cf 91       	pop	r28
    21d6:	08 95       	ret

000021d8 <udd_ep_set_halt>:
    21d8:	e8 2f       	mov	r30, r24
    21da:	ef 70       	andi	r30, 0x0F	; 15
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	ee 0f       	add	r30, r30
    21e0:	ff 1f       	adc	r31, r31
    21e2:	28 2f       	mov	r18, r24
    21e4:	08 2e       	mov	r0, r24
    21e6:	00 0c       	add	r0, r0
    21e8:	33 0b       	sbc	r19, r19
    21ea:	22 27       	eor	r18, r18
    21ec:	33 0f       	add	r19, r19
    21ee:	22 1f       	adc	r18, r18
    21f0:	33 27       	eor	r19, r19
    21f2:	e2 0f       	add	r30, r18
    21f4:	f3 1f       	adc	r31, r19
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	ee 0f       	add	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	e0 51       	subi	r30, 0x10	; 16
    2204:	fd 4d       	sbci	r31, 0xDD	; 221
    2206:	95 85       	ldd	r25, Z+13	; 0x0d
    2208:	94 60       	ori	r25, 0x04	; 4
    220a:	95 87       	std	Z+13, r25	; 0x0d
    220c:	80 df       	rcall	.-256    	; 0x210e <udd_ep_abort>
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	08 95       	ret

00002212 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2212:	1f 92       	push	r1
    2214:	0f 92       	push	r0
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	0f 92       	push	r0
    221a:	11 24       	eor	r1, r1
    221c:	0b b6       	in	r0, 0x3b	; 59
    221e:	0f 92       	push	r0
    2220:	0f 93       	push	r16
    2222:	2f 93       	push	r18
    2224:	3f 93       	push	r19
    2226:	4f 93       	push	r20
    2228:	5f 93       	push	r21
    222a:	6f 93       	push	r22
    222c:	7f 93       	push	r23
    222e:	8f 93       	push	r24
    2230:	9f 93       	push	r25
    2232:	af 93       	push	r26
    2234:	bf 93       	push	r27
    2236:	ef 93       	push	r30
    2238:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    223a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    223e:	88 23       	and	r24, r24
    2240:	3c f4       	brge	.+14     	; 0x2250 <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    2242:	80 e8       	ldi	r24, 0x80	; 128
    2244:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2248:	0e 94 14 08 	call	0x1028	; 0x1028 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    224c:	c2 d1       	rcall	.+900    	; 0x25d2 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    224e:	88 c0       	rjmp	.+272    	; 0x2360 <__vector_125+0x14e>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2250:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2254:	82 ff       	sbrs	r24, 2
    2256:	20 c0       	rjmp	.+64     	; 0x2298 <__vector_125+0x86>
		udd_ack_underflow_event();
    2258:	84 e0       	ldi	r24, 0x04	; 4
    225a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    225e:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <udd_sram+0x14>
    2262:	86 ff       	sbrs	r24, 6
    2264:	7d c0       	rjmp	.+250    	; 0x2360 <__vector_125+0x14e>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2266:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    226a:	81 fd       	sbrc	r24, 1
    226c:	79 c0       	rjmp	.+242    	; 0x2360 <__vector_125+0x14e>
    226e:	f9 da       	rcall	.-2574   	; 0x1862 <udd_ctrl_interrupt_tc_setup>
    2270:	81 11       	cpse	r24, r1
    2272:	76 c0       	rjmp	.+236    	; 0x2360 <__vector_125+0x14e>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2274:	80 91 ef 22 	lds	r24, 0x22EF	; 0x8022ef <udd_ep_control_state>
    2278:	81 30       	cpi	r24, 0x01	; 1
    227a:	11 f4       	brne	.+4      	; 0x2280 <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    227c:	2c da       	rcall	.-2984   	; 0x16d6 <udd_ctrl_send_zlp_in>
    227e:	70 c0       	rjmp	.+224    	; 0x2360 <__vector_125+0x14e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2280:	84 30       	cpi	r24, 0x04	; 4
    2282:	09 f0       	breq	.+2      	; 0x2286 <__vector_125+0x74>
    2284:	6d c0       	rjmp	.+218    	; 0x2360 <__vector_125+0x14e>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2286:	e5 e0       	ldi	r30, 0x05	; 5
    2288:	f3 e2       	ldi	r31, 0x23	; 35
    228a:	04 e0       	ldi	r16, 0x04	; 4
    228c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    228e:	ed ef       	ldi	r30, 0xFD	; 253
    2290:	f2 e2       	ldi	r31, 0x22	; 34
    2292:	04 e0       	ldi	r16, 0x04	; 4
    2294:	05 93       	las	Z, r16
    2296:	64 c0       	rjmp	.+200    	; 0x2360 <__vector_125+0x14e>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2298:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    229c:	81 ff       	sbrs	r24, 1
    229e:	5b c0       	rjmp	.+182    	; 0x2356 <__vector_125+0x144>
		udd_ack_overflow_event();
    22a0:	82 e0       	ldi	r24, 0x02	; 2
    22a2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    22a6:	80 91 fc 22 	lds	r24, 0x22FC	; 0x8022fc <udd_sram+0xc>
    22aa:	86 ff       	sbrs	r24, 6
    22ac:	59 c0       	rjmp	.+178    	; 0x2360 <__vector_125+0x14e>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    22ae:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    22b2:	81 fd       	sbrc	r24, 1
    22b4:	55 c0       	rjmp	.+170    	; 0x2360 <__vector_125+0x14e>
    22b6:	d5 da       	rcall	.-2646   	; 0x1862 <udd_ctrl_interrupt_tc_setup>
    22b8:	81 11       	cpse	r24, r1
    22ba:	52 c0       	rjmp	.+164    	; 0x2360 <__vector_125+0x14e>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    22bc:	80 91 ef 22 	lds	r24, 0x22EF	; 0x8022ef <udd_ep_control_state>
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	41 f4       	brne	.+16     	; 0x22d4 <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    22c4:	84 e0       	ldi	r24, 0x04	; 4
    22c6:	80 93 ef 22 	sts	0x22EF, r24	; 0x8022ef <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    22ca:	ec ef       	ldi	r30, 0xFC	; 252
    22cc:	f2 e2       	ldi	r31, 0x22	; 34
    22ce:	02 e0       	ldi	r16, 0x02	; 2
    22d0:	06 93       	lac	Z, r16
    22d2:	46 c0       	rjmp	.+140    	; 0x2360 <__vector_125+0x14e>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    22d4:	83 30       	cpi	r24, 0x03	; 3
    22d6:	09 f0       	breq	.+2      	; 0x22da <__vector_125+0xc8>
    22d8:	43 c0       	rjmp	.+134    	; 0x2360 <__vector_125+0x14e>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    22da:	e5 e0       	ldi	r30, 0x05	; 5
    22dc:	f3 e2       	ldi	r31, 0x23	; 35
    22de:	04 e0       	ldi	r16, 0x04	; 4
    22e0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    22e2:	ed ef       	ldi	r30, 0xFD	; 253
    22e4:	f2 e2       	ldi	r31, 0x22	; 34
    22e6:	04 e0       	ldi	r16, 0x04	; 4
    22e8:	05 93       	las	Z, r16
    22ea:	3a c0       	rjmp	.+116    	; 0x2360 <__vector_125+0x14e>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    22ec:	80 e1       	ldi	r24, 0x10	; 16
    22ee:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	0c df       	rcall	.-488    	; 0x210e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    22f6:	81 e8       	ldi	r24, 0x81	; 129
    22f8:	0a df       	rcall	.-492    	; 0x210e <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	08 df       	rcall	.-496    	; 0x210e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    22fe:	82 e8       	ldi	r24, 0x82	; 130
    2300:	06 df       	rcall	.-500    	; 0x210e <udd_ep_abort>
		}
#endif
		udc_reset();
    2302:	0e 94 ed 07 	call	0xfda	; 0xfda <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2306:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    230a:	e0 ef       	ldi	r30, 0xF0	; 240
    230c:	f2 e2       	ldi	r31, 0x22	; 34
    230e:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    2310:	96 e0       	ldi	r25, 0x06	; 6
    2312:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2314:	83 e4       	ldi	r24, 0x43	; 67
    2316:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2318:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    231a:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    231c:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    231e:	8b ea       	ldi	r24, 0xAB	; 171
    2320:	92 e2       	ldi	r25, 0x22	; 34
    2322:	80 8b       	std	Z+16, r24	; 0x10
    2324:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    2326:	a4 d9       	rcall	.-3256   	; 0x1670 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2328:	1b c0       	rjmp	.+54     	; 0x2360 <__vector_125+0x14e>
	}

	if (udd_is_suspend_event()) {
    232a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    232e:	86 ff       	sbrs	r24, 6
    2330:	07 c0       	rjmp	.+14     	; 0x2340 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2332:	80 e4       	ldi	r24, 0x40	; 64
    2334:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	62 d9       	rcall	.-3388   	; 0x1600 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    233c:	44 d1       	rcall	.+648    	; 0x25c6 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    233e:	10 c0       	rjmp	.+32     	; 0x2360 <__vector_125+0x14e>
	}

	if (udd_is_resume_event()) {
    2340:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2344:	85 ff       	sbrs	r24, 5
    2346:	0c c0       	rjmp	.+24     	; 0x2360 <__vector_125+0x14e>
		udd_ack_resume_event();
    2348:	80 e2       	ldi	r24, 0x20	; 32
    234a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	57 d9       	rcall	.-3410   	; 0x1600 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2352:	3c d1       	rcall	.+632    	; 0x25cc <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2354:	05 c0       	rjmp	.+10     	; 0x2360 <__vector_125+0x14e>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2356:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    235a:	84 fd       	sbrc	r24, 4
    235c:	c7 cf       	rjmp	.-114    	; 0x22ec <__vector_125+0xda>
    235e:	e5 cf       	rjmp	.-54     	; 0x232a <__vector_125+0x118>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2360:	ff 91       	pop	r31
    2362:	ef 91       	pop	r30
    2364:	bf 91       	pop	r27
    2366:	af 91       	pop	r26
    2368:	9f 91       	pop	r25
    236a:	8f 91       	pop	r24
    236c:	7f 91       	pop	r23
    236e:	6f 91       	pop	r22
    2370:	5f 91       	pop	r21
    2372:	4f 91       	pop	r20
    2374:	3f 91       	pop	r19
    2376:	2f 91       	pop	r18
    2378:	0f 91       	pop	r16
    237a:	0f 90       	pop	r0
    237c:	0b be       	out	0x3b, r0	; 59
    237e:	0f 90       	pop	r0
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	0f 90       	pop	r0
    2384:	1f 90       	pop	r1
    2386:	18 95       	reti

00002388 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2388:	1f 92       	push	r1
    238a:	0f 92       	push	r0
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	0f 92       	push	r0
    2390:	11 24       	eor	r1, r1
    2392:	0b b6       	in	r0, 0x3b	; 59
    2394:	0f 92       	push	r0
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	2f 93       	push	r18
    239c:	3f 93       	push	r19
    239e:	4f 93       	push	r20
    23a0:	5f 93       	push	r21
    23a2:	6f 93       	push	r22
    23a4:	7f 93       	push	r23
    23a6:	8f 93       	push	r24
    23a8:	9f 93       	push	r25
    23aa:	af 93       	push	r26
    23ac:	bf 93       	push	r27
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	ef 93       	push	r30
    23b4:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    23b6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    23ba:	81 fd       	sbrc	r24, 1
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    23be:	51 da       	rcall	.-2910   	; 0x1862 <udd_ctrl_interrupt_tc_setup>
    23c0:	81 11       	cpse	r24, r1
    23c2:	c3 c0       	rjmp	.+390    	; 0x254a <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    23ca:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    23ce:	81 95       	neg	r24
    23d0:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    23d2:	ec ef       	ldi	r30, 0xFC	; 252
    23d4:	f2 e2       	ldi	r31, 0x22	; 34
    23d6:	e8 1b       	sub	r30, r24
    23d8:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    23da:	20 81       	ld	r18, Z
    23dc:	31 81       	ldd	r19, Z+1	; 0x01
    23de:	2c 5f       	subi	r18, 0xFC	; 252
    23e0:	32 42       	sbci	r19, 0x22	; 34
    23e2:	36 95       	lsr	r19
    23e4:	27 95       	ror	r18
    23e6:	36 95       	lsr	r19
    23e8:	27 95       	ror	r18
    23ea:	36 95       	lsr	r19
    23ec:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    23ee:	82 2f       	mov	r24, r18
    23f0:	86 95       	lsr	r24
    23f2:	20 fd       	sbrc	r18, 0
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <__vector_126+0x72>
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	01 c0       	rjmp	.+2      	; 0x23fc <__vector_126+0x74>
    23fa:	90 e8       	ldi	r25, 0x80	; 128
    23fc:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    23fe:	e8 2f       	mov	r30, r24
    2400:	ef 70       	andi	r30, 0x0F	; 15
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2408:	28 2f       	mov	r18, r24
    240a:	08 2e       	mov	r0, r24
    240c:	00 0c       	add	r0, r0
    240e:	33 0b       	sbc	r19, r19
    2410:	22 27       	eor	r18, r18
    2412:	33 0f       	add	r19, r19
    2414:	22 1f       	adc	r18, r18
    2416:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2418:	e2 0f       	add	r30, r18
    241a:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    241c:	df 01       	movw	r26, r30
    241e:	aa 0f       	add	r26, r26
    2420:	bb 1f       	adc	r27, r27
    2422:	aa 0f       	add	r26, r26
    2424:	bb 1f       	adc	r27, r27
    2426:	aa 0f       	add	r26, r26
    2428:	bb 1f       	adc	r27, r27
    242a:	a0 51       	subi	r26, 0x10	; 16
    242c:	bd 4d       	sbci	r27, 0xDD	; 221
    242e:	1c 96       	adiw	r26, 0x0c	; 12
    2430:	9c 91       	ld	r25, X
    2432:	95 ff       	sbrs	r25, 5
    2434:	8a c0       	rjmp	.+276    	; 0x254a <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	ee 0f       	add	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	e4 50       	subi	r30, 0x04	; 4
    2444:	fd 4d       	sbci	r31, 0xDD	; 221
    2446:	00 e2       	ldi	r16, 0x20	; 32
    2448:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    244a:	81 11       	cpse	r24, r1
    244c:	79 c0       	rjmp	.+242    	; 0x2540 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    244e:	80 91 ef 22 	lds	r24, 0x22EF	; 0x8022ef <udd_ep_control_state>
    2452:	84 30       	cpi	r24, 0x04	; 4
    2454:	19 f4       	brne	.+6      	; 0x245c <__vector_126+0xd4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2456:	4d d9       	rcall	.-3430   	; 0x16f2 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2458:	0b d9       	rcall	.-3562   	; 0x1670 <udd_ctrl_init>
    245a:	77 c0       	rjmp	.+238    	; 0x254a <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    245c:	00 91 fe 22 	lds	r16, 0x22FE	; 0x8022fe <udd_sram+0xe>
    2460:	10 91 ff 22 	lds	r17, 0x22FF	; 0x8022ff <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2464:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <udd_g_ctrlreq+0xa>
    2468:	90 91 43 23 	lds	r25, 0x2343	; 0x802343 <udd_g_ctrlreq+0xb>
    246c:	c0 91 eb 22 	lds	r28, 0x22EB	; 0x8022eb <udd_ctrl_payload_nb_trans>
    2470:	d0 91 ec 22 	lds	r29, 0x22EC	; 0x8022ec <udd_ctrl_payload_nb_trans+0x1>
    2474:	9e 01       	movw	r18, r28
    2476:	20 0f       	add	r18, r16
    2478:	31 1f       	adc	r19, r17
    247a:	82 17       	cp	r24, r18
    247c:	93 07       	cpc	r25, r19
    247e:	18 f4       	brcc	.+6      	; 0x2486 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2480:	8c 01       	movw	r16, r24
    2482:	0c 1b       	sub	r16, r28
    2484:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2486:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <udd_g_ctrlreq+0x8>
    248a:	90 91 41 23 	lds	r25, 0x2341	; 0x802341 <udd_g_ctrlreq+0x9>
    248e:	a8 01       	movw	r20, r16
    2490:	6b ea       	ldi	r22, 0xAB	; 171
    2492:	72 e2       	ldi	r23, 0x22	; 34
    2494:	8c 0f       	add	r24, r28
    2496:	9d 1f       	adc	r25, r29
    2498:	fa d1       	rcall	.+1012   	; 0x288e <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    249a:	c0 0f       	add	r28, r16
    249c:	d1 1f       	adc	r29, r17
    249e:	c0 93 eb 22 	sts	0x22EB, r28	; 0x8022eb <udd_ctrl_payload_nb_trans>
    24a2:	d0 93 ec 22 	sts	0x22EC, r29	; 0x8022ec <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    24a6:	00 34       	cpi	r16, 0x40	; 64
    24a8:	11 05       	cpc	r17, r1
    24aa:	69 f4       	brne	.+26     	; 0x24c6 <__vector_126+0x13e>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    24ac:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <udd_ctrl_prev_payload_nb_trans>
    24b0:	90 91 ee 22 	lds	r25, 0x22EE	; 0x8022ee <udd_ctrl_prev_payload_nb_trans+0x1>
    24b4:	8c 0f       	add	r24, r28
    24b6:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    24b8:	20 91 3e 23 	lds	r18, 0x233E	; 0x80233e <udd_g_ctrlreq+0x6>
    24bc:	30 91 3f 23 	lds	r19, 0x233F	; 0x80233f <udd_g_ctrlreq+0x7>
    24c0:	82 17       	cp	r24, r18
    24c2:	93 07       	cpc	r25, r19
    24c4:	80 f0       	brcs	.+32     	; 0x24e6 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    24c6:	e8 e3       	ldi	r30, 0x38	; 56
    24c8:	f3 e2       	ldi	r31, 0x23	; 35
    24ca:	c2 87       	std	Z+10, r28	; 0x0a
    24cc:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    24ce:	06 84       	ldd	r0, Z+14	; 0x0e
    24d0:	f7 85       	ldd	r31, Z+15	; 0x0f
    24d2:	e0 2d       	mov	r30, r0
    24d4:	30 97       	sbiw	r30, 0x00	; 0
    24d6:	29 f0       	breq	.+10     	; 0x24e2 <__vector_126+0x15a>
			if (!udd_g_ctrlreq.over_under_run()) {
    24d8:	19 95       	eicall
    24da:	81 11       	cpse	r24, r1
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <__vector_126+0x15a>
				// Stall ZLP
				udd_ctrl_stall_data();
    24de:	ed d8       	rcall	.-3622   	; 0x16ba <udd_ctrl_stall_data>
    24e0:	34 c0       	rjmp	.+104    	; 0x254a <__vector_126+0x1c2>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    24e2:	f9 d8       	rcall	.-3598   	; 0x16d6 <udd_ctrl_send_zlp_in>
    24e4:	32 c0       	rjmp	.+100    	; 0x254a <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    24e6:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <udd_g_ctrlreq+0xa>
    24ea:	90 91 43 23 	lds	r25, 0x2343	; 0x802343 <udd_g_ctrlreq+0xb>
    24ee:	c8 17       	cp	r28, r24
    24f0:	d9 07       	cpc	r29, r25
    24f2:	f9 f4       	brne	.+62     	; 0x2532 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    24f4:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <udd_g_ctrlreq+0xe>
    24f8:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <udd_g_ctrlreq+0xf>
    24fc:	30 97       	sbiw	r30, 0x00	; 0
    24fe:	11 f4       	brne	.+4      	; 0x2504 <__vector_126+0x17c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2500:	dc d8       	rcall	.-3656   	; 0x16ba <udd_ctrl_stall_data>
    2502:	23 c0       	rjmp	.+70     	; 0x254a <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2504:	19 95       	eicall
    2506:	81 11       	cpse	r24, r1
    2508:	02 c0       	rjmp	.+4      	; 0x250e <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    250a:	d7 d8       	rcall	.-3666   	; 0x16ba <udd_ctrl_stall_data>
    250c:	1e c0       	rjmp	.+60     	; 0x254a <__vector_126+0x1c2>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    250e:	20 91 ed 22 	lds	r18, 0x22ED	; 0x8022ed <udd_ctrl_prev_payload_nb_trans>
    2512:	30 91 ee 22 	lds	r19, 0x22EE	; 0x8022ee <udd_ctrl_prev_payload_nb_trans+0x1>
    2516:	80 91 eb 22 	lds	r24, 0x22EB	; 0x8022eb <udd_ctrl_payload_nb_trans>
    251a:	90 91 ec 22 	lds	r25, 0x22EC	; 0x8022ec <udd_ctrl_payload_nb_trans+0x1>
    251e:	82 0f       	add	r24, r18
    2520:	93 1f       	adc	r25, r19
    2522:	80 93 ed 22 	sts	0x22ED, r24	; 0x8022ed <udd_ctrl_prev_payload_nb_trans>
    2526:	90 93 ee 22 	sts	0x22EE, r25	; 0x8022ee <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    252a:	10 92 eb 22 	sts	0x22EB, r1	; 0x8022eb <udd_ctrl_payload_nb_trans>
    252e:	10 92 ec 22 	sts	0x22EC, r1	; 0x8022ec <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2532:	ec ef       	ldi	r30, 0xFC	; 252
    2534:	f2 e2       	ldi	r31, 0x22	; 34
    2536:	02 e0       	ldi	r16, 0x02	; 2
    2538:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    253a:	00 e2       	ldi	r16, 0x20	; 32
    253c:	06 93       	lac	Z, r16
    253e:	05 c0       	rjmp	.+10     	; 0x254a <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2540:	80 38       	cpi	r24, 0x80	; 128
    2542:	11 f4       	brne	.+4      	; 0x2548 <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    2544:	de d8       	rcall	.-3652   	; 0x1702 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2546:	01 c0       	rjmp	.+2      	; 0x254a <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2548:	fd d9       	rcall	.-3078   	; 0x1944 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    254a:	ff 91       	pop	r31
    254c:	ef 91       	pop	r30
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	bf 91       	pop	r27
    2554:	af 91       	pop	r26
    2556:	9f 91       	pop	r25
    2558:	8f 91       	pop	r24
    255a:	7f 91       	pop	r23
    255c:	6f 91       	pop	r22
    255e:	5f 91       	pop	r21
    2560:	4f 91       	pop	r20
    2562:	3f 91       	pop	r19
    2564:	2f 91       	pop	r18
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	0f 90       	pop	r0
    256c:	0b be       	out	0x3b, r0	; 59
    256e:	0f 90       	pop	r0
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	0f 90       	pop	r0
    2574:	1f 90       	pop	r1
    2576:	18 95       	reti

00002578 <main>:
/*! \brief Main function. Execution starts here.
 */
int main(void)
{

	irq_initialize_vectors();
    2578:	87 e0       	ldi	r24, 0x07	; 7
    257a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    257e:	78 94       	sei
	// Initialize the sleep manager
	//sleepmgr_init();

#if !SAM0
	sysclk_init();
    2580:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <sysclk_init>
	board_init();
    2584:	0e 94 be 0a 	call	0x157c	; 0x157c <board_init>
#else
	system_init();
#endif
	ui_init();
    2588:	0e 94 27 01 	call	0x24e	; 0x24e <ui_init>
	ui_powerdown();
    258c:	0e 94 34 01 	call	0x268	; 0x268 <ui_powerdown>

	// Start USB stack to authorize VBus monitoring
	udc_start();
    2590:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <udc_start>
	
	while (true)
	{
		while(!udi_cdc_is_rx_ready()){}	
    2594:	0e 94 38 05 	call	0xa70	; 0xa70 <udi_cdc_is_rx_ready>
    2598:	88 23       	and	r24, r24
    259a:	e1 f3       	breq	.-8      	; 0x2594 <main+0x1c>
		udi_cdc_read_buf(temp, sizeof(temp));
    259c:	62 e0       	ldi	r22, 0x02	; 2
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <temp>
    25a4:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <temp+0x1>
    25a8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <udi_cdc_read_buf>
		
		while(!udi_cdc_is_tx_ready()){}
    25ac:	0e 94 37 06 	call	0xc6e	; 0xc6e <udi_cdc_is_tx_ready>
    25b0:	88 23       	and	r24, r24
    25b2:	e1 f3       	breq	.-8      	; 0x25ac <main+0x34>
		udi_cdc_write_buf(temp, sizeof(temp));
    25b4:	62 e0       	ldi	r22, 0x02	; 2
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <temp>
    25bc:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <temp+0x1>
    25c0:	0e 94 01 07 	call	0xe02	; 0xe02 <udi_cdc_write_buf>
		//udi_cdc_write_buf(hehe, 6);
		//delay_ms(500);
		//while(!udi_cdc_is_tx_ready()){
			
		
	}
    25c4:	e7 cf       	rjmp	.-50     	; 0x2594 <main+0x1c>

000025c6 <main_suspend_action>:
	//}
}

void main_suspend_action(void)
{
	ui_powerdown();
    25c6:	0c 94 34 01 	jmp	0x268	; 0x268 <ui_powerdown>
    25ca:	08 95       	ret

000025cc <main_resume_action>:
}

void main_resume_action(void)
{
	ui_wakeup();
    25cc:	0c 94 41 01 	jmp	0x282	; 0x282 <ui_wakeup>
    25d0:	08 95       	ret

000025d2 <main_sof_action>:
}

void main_sof_action(void)
{
	if (!main_b_cdc_enable)
    25d2:	80 91 31 23 	lds	r24, 0x2331	; 0x802331 <main_b_cdc_enable>
    25d6:	88 23       	and	r24, r24
    25d8:	19 f0       	breq	.+6      	; 0x25e0 <main_sof_action+0xe>
		return;
	ui_process(udd_get_frame_number());
    25da:	e9 db       	rcall	.-2094   	; 0x1dae <udd_get_frame_number>
    25dc:	0c 94 5f 01 	jmp	0x2be	; 0x2be <ui_process>
    25e0:	08 95       	ret

000025e2 <main_cdc_enable>:
}
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    25e2:	91 e0       	ldi	r25, 0x01	; 1
    25e4:	90 93 31 23 	sts	0x2331, r25	; 0x802331 <main_b_cdc_enable>
	// Open communication
	uart_open(port);
    25e8:	79 d0       	rcall	.+242    	; 0x26dc <uart_open>
	return true;
}
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	08 95       	ret

000025ee <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    25ee:	10 92 31 23 	sts	0x2331, r1	; 0x802331 <main_b_cdc_enable>
	// Close communication
	uart_close(port);
    25f2:	85 c0       	rjmp	.+266    	; 0x26fe <uart_close>
    25f4:	08 95       	ret

000025f6 <main_cdc_set_dtr>:
}

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) {
    25f6:	66 23       	and	r22, r22
    25f8:	19 f0       	breq	.+6      	; 0x2600 <main_cdc_set_dtr+0xa>
		// Host terminal has open COM
		ui_com_open(port);
    25fa:	0c 94 45 01 	jmp	0x28a	; 0x28a <ui_com_open>
    25fe:	08 95       	ret
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    2600:	0c 94 49 01 	jmp	0x292	; 0x292 <ui_com_close>
    2604:	08 95       	ret

00002606 <uart_config>:
#include "uart.h"
#include "main.h"
#include "ui.h"

void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    2606:	ff 92       	push	r15
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	8b 01       	movw	r16, r22
	uint8_t reg_ctrlc;
	uint16_t bsel;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;

	switch (cfg->bCharFormat) {
    2612:	fb 01       	movw	r30, r22
    2614:	84 81       	ldd	r24, Z+4	; 0x04
    2616:	82 30       	cpi	r24, 0x02	; 2
    2618:	21 f4       	brne	.+8      	; 0x2622 <uart_config+0x1c>
	case CDC_STOP_BITS_2:
		reg_ctrlc |= USART_SBMODE_bm;
    261a:	68 94       	set
    261c:	ff 24       	eor	r15, r15
    261e:	f3 f8       	bld	r15, 3
    2620:	01 c0       	rjmp	.+2      	; 0x2624 <uart_config+0x1e>
void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
	uint8_t reg_ctrlc;
	uint16_t bsel;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;
    2622:	f1 2c       	mov	r15, r1
	default:
		// Default stop bit = 1 stop bit
		break;
	}

	switch (cfg->bParityType) {
    2624:	f8 01       	movw	r30, r16
    2626:	85 81       	ldd	r24, Z+5	; 0x05
    2628:	81 30       	cpi	r24, 0x01	; 1
    262a:	31 f0       	breq	.+12     	; 0x2638 <uart_config+0x32>
    262c:	82 30       	cpi	r24, 0x02	; 2
    262e:	39 f4       	brne	.+14     	; 0x263e <uart_config+0x38>
	case CDC_PAR_EVEN:
		reg_ctrlc |= USART_PMODE_EVEN_gc;
    2630:	ff 2d       	mov	r31, r15
    2632:	f0 62       	ori	r31, 0x20	; 32
    2634:	ff 2e       	mov	r15, r31
		break;
    2636:	03 c0       	rjmp	.+6      	; 0x263e <uart_config+0x38>
	case CDC_PAR_ODD:
		reg_ctrlc |= USART_PMODE_ODD_gc;
    2638:	8f 2d       	mov	r24, r15
    263a:	80 63       	ori	r24, 0x30	; 48
    263c:	f8 2e       	mov	r15, r24
	case CDC_PAR_NONE:
		reg_ctrlc |= USART_PMODE_DISABLED_gc;
		break;
	}

	switch (cfg->bDataBits) {
    263e:	f8 01       	movw	r30, r16
    2640:	86 81       	ldd	r24, Z+6	; 0x06
    2642:	86 30       	cpi	r24, 0x06	; 6
    2644:	49 f0       	breq	.+18     	; 0x2658 <uart_config+0x52>
    2646:	18 f4       	brcc	.+6      	; 0x264e <uart_config+0x48>
    2648:	85 30       	cpi	r24, 0x05	; 5
    264a:	a9 f0       	breq	.+42     	; 0x2676 <uart_config+0x70>
    264c:	0d c0       	rjmp	.+26     	; 0x2668 <uart_config+0x62>
    264e:	87 30       	cpi	r24, 0x07	; 7
    2650:	39 f0       	breq	.+14     	; 0x2660 <uart_config+0x5a>
    2652:	89 30       	cpi	r24, 0x09	; 9
    2654:	69 f0       	breq	.+26     	; 0x2670 <uart_config+0x6a>
    2656:	08 c0       	rjmp	.+16     	; 0x2668 <uart_config+0x62>
	case 5:
		reg_ctrlc |= USART_CHSIZE_5BIT_gc;
		break;
	case 6:
		reg_ctrlc |= USART_CHSIZE_6BIT_gc;
    2658:	ff 2d       	mov	r31, r15
    265a:	f1 60       	ori	r31, 0x01	; 1
    265c:	ff 2e       	mov	r15, r31
		break;
    265e:	0b c0       	rjmp	.+22     	; 0x2676 <uart_config+0x70>
	case 7:
		reg_ctrlc |= USART_CHSIZE_7BIT_gc;
    2660:	8f 2d       	mov	r24, r15
    2662:	82 60       	ori	r24, 0x02	; 2
    2664:	f8 2e       	mov	r15, r24
		break;
    2666:	07 c0       	rjmp	.+14     	; 0x2676 <uart_config+0x70>
	default:
	case 8:
		reg_ctrlc |= USART_CHSIZE_8BIT_gc;
    2668:	ef 2d       	mov	r30, r15
    266a:	e3 60       	ori	r30, 0x03	; 3
    266c:	fe 2e       	mov	r15, r30
		break;
    266e:	03 c0       	rjmp	.+6      	; 0x2676 <uart_config+0x70>
	case 9:
		reg_ctrlc |= USART_CHSIZE_9BIT_gc;
    2670:	ff 2d       	mov	r31, r15
    2672:	f7 60       	ori	r31, 0x07	; 7
    2674:	ff 2e       	mov	r15, r31
		break;
	}

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    2676:	60 e1       	ldi	r22, 0x10	; 16
    2678:	83 e0       	ldi	r24, 0x03	; 3
    267a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <sysclk_enable_module>
	// Set configuration
	USART.CTRLC = reg_ctrlc;
    267e:	c0 ea       	ldi	r28, 0xA0	; 160
    2680:	d8 e0       	ldi	r29, 0x08	; 8
    2682:	fd 82       	std	Y+5, r15	; 0x05
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
    2684:	f8 01       	movw	r30, r16
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	a2 81       	ldd	r26, Z+2	; 0x02
    268c:	b3 81       	ldd	r27, Z+3	; 0x03
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	aa 1f       	adc	r26, r26
    2694:	bb 1f       	adc	r27, r27
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	aa 1f       	adc	r26, r26
    269c:	bb 1f       	adc	r27, r27
    269e:	9c 01       	movw	r18, r24
    26a0:	ad 01       	movw	r20, r26
    26a2:	22 0f       	add	r18, r18
    26a4:	33 1f       	adc	r19, r19
    26a6:	44 1f       	adc	r20, r20
    26a8:	55 1f       	adc	r21, r21

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
	// Set configuration
	USART.CTRLC = reg_ctrlc;
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	7c e6       	ldi	r23, 0x6C	; 108
    26ae:	8c ed       	ldi	r24, 0xDC	; 220
    26b0:	92 e0       	ldi	r25, 0x02	; 2
    26b2:	c3 d0       	rcall	.+390    	; 0x283a <__udivmodsi4>
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
    26b4:	da 01       	movw	r26, r20
    26b6:	c9 01       	movw	r24, r18
    26b8:	01 96       	adiw	r24, 0x01	; 1
    26ba:	a1 1d       	adc	r26, r1
    26bc:	b1 1d       	adc	r27, r1
    26be:	b6 95       	lsr	r27
    26c0:	a7 95       	ror	r26
    26c2:	97 95       	ror	r25
    26c4:	87 95       	ror	r24

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
	// Set configuration
	USART.CTRLC = reg_ctrlc;
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
    26c6:	9c 01       	movw	r18, r24
    26c8:	21 50       	subi	r18, 0x01	; 1
    26ca:	31 09       	sbc	r19, r1
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
	USART.BAUDCTRLA = bsel & 0xFF;
    26cc:	2e 83       	std	Y+6, r18	; 0x06
	USART.BAUDCTRLB = bsel >> 8;
    26ce:	3f 83       	std	Y+7, r19	; 0x07
}
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	1f 91       	pop	r17
    26d6:	0f 91       	pop	r16
    26d8:	ff 90       	pop	r15
    26da:	08 95       	ret

000026dc <uart_open>:

void uart_open(uint8_t port)
{
	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    26dc:	60 e1       	ldi	r22, 0x10	; 16
    26de:	83 e0       	ldi	r24, 0x03	; 3
    26e0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <sysclk_enable_module>
	// Open UART communication
	USART_PORT.DIRSET = USART_PORT_PIN_TX; // TX as output.
    26e4:	e0 e4       	ldi	r30, 0x40	; 64
    26e6:	f6 e0       	ldi	r31, 0x06	; 6
    26e8:	88 e0       	ldi	r24, 0x08	; 8
    26ea:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR = USART_PORT_PIN_RX; // RX as input.
    26ec:	84 e0       	ldi	r24, 0x04	; 4
    26ee:	82 83       	std	Z+2, r24	; 0x02

	// Enable both RX and TX
	USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm;
    26f0:	e0 ea       	ldi	r30, 0xA0	; 160
    26f2:	f8 e0       	ldi	r31, 0x08	; 8
    26f4:	8c e1       	ldi	r24, 0x1C	; 28
    26f6:	84 83       	std	Z+4, r24	; 0x04
	// Enable interrupt with priority higher than USB
	USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    26f8:	80 e3       	ldi	r24, 0x30	; 48
    26fa:	83 83       	std	Z+3, r24	; 0x03
    26fc:	08 95       	ret

000026fe <uart_close>:
			USART_DREINTLVL_OFF_gc;
}

void uart_close(uint8_t port)
{
	sysclk_disable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    26fe:	60 e1       	ldi	r22, 0x10	; 16
    2700:	83 e0       	ldi	r24, 0x03	; 3
    2702:	0e 94 fd 01 	call	0x3fa	; 0x3fa <sysclk_disable_module>
	// Disable interrupts
	USART.CTRLA = 0;
    2706:	e0 ea       	ldi	r30, 0xA0	; 160
    2708:	f8 e0       	ldi	r31, 0x08	; 8
    270a:	13 82       	std	Z+3, r1	; 0x03
	// Close RS232 communication
	USART.CTRLB = 0;
    270c:	14 82       	std	Z+4, r1	; 0x04
    270e:	08 95       	ret

00002710 <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	// If UART is open
	if (USART.CTRLA!=0) {
    2710:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    2714:	88 23       	and	r24, r24
    2716:	19 f0       	breq	.+6      	; 0x271e <uart_rx_notify+0xe>
		// Enable UART TX interrupt to send values
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    2718:	83 e3       	ldi	r24, 0x33	; 51
    271a:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    271e:	08 95       	ret

00002720 <__vector_25>:
	}
}


ISR(USART_RX_Vect)
{
    2720:	1f 92       	push	r1
    2722:	0f 92       	push	r0
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	0f 92       	push	r0
    2728:	11 24       	eor	r1, r1
    272a:	0b b6       	in	r0, 0x3b	; 59
    272c:	0f 92       	push	r0
    272e:	2f 93       	push	r18
    2730:	3f 93       	push	r19
    2732:	4f 93       	push	r20
    2734:	5f 93       	push	r21
    2736:	6f 93       	push	r22
    2738:	7f 93       	push	r23
    273a:	8f 93       	push	r24
    273c:	9f 93       	push	r25
    273e:	af 93       	push	r26
    2740:	bf 93       	push	r27
    2742:	cf 93       	push	r28
    2744:	ef 93       	push	r30
    2746:	ff 93       	push	r31
	uint8_t value;

	// Data received
	ui_com_tx_start();
    2748:	0e 94 55 01 	call	0x2aa	; 0x2aa <ui_com_tx_start>

	if (0 != (USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))) {
    274c:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
    2750:	88 71       	andi	r24, 0x18	; 24
    2752:	21 f0       	breq	.+8      	; 0x275c <__vector_25+0x3c>
		udi_cdc_signal_framing_error();
    2754:	0e 94 54 04 	call	0x8a8	; 0x8a8 <udi_cdc_signal_framing_error>
		ui_com_error();
    2758:	0e 94 5d 01 	call	0x2ba	; 0x2ba <ui_com_error>
	}

	// Transfer UART RX fifo to CDC TX
	value = USART.DATA;
    275c:	c0 91 a0 08 	lds	r28, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	if (!udi_cdc_is_tx_ready()) {
    2760:	0e 94 37 06 	call	0xc6e	; 0xc6e <udi_cdc_is_tx_ready>
    2764:	81 11       	cpse	r24, r1
    2766:	05 c0       	rjmp	.+10     	; 0x2772 <__vector_25+0x52>
		// Fifo full
		udi_cdc_signal_overrun();
    2768:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <udi_cdc_signal_overrun>
		ui_com_overflow();
    276c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <ui_com_overflow>
    2770:	04 c0       	rjmp	.+8      	; 0x277a <__vector_25+0x5a>
	}else{
		udi_cdc_putc(value);
    2772:	8c 2f       	mov	r24, r28
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	0e 94 89 06 	call	0xd12	; 0xd12 <udi_cdc_putc>
	}
	ui_com_tx_stop();
    277a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <ui_com_tx_stop>
}
    277e:	ff 91       	pop	r31
    2780:	ef 91       	pop	r30
    2782:	cf 91       	pop	r28
    2784:	bf 91       	pop	r27
    2786:	af 91       	pop	r26
    2788:	9f 91       	pop	r25
    278a:	8f 91       	pop	r24
    278c:	7f 91       	pop	r23
    278e:	6f 91       	pop	r22
    2790:	5f 91       	pop	r21
    2792:	4f 91       	pop	r20
    2794:	3f 91       	pop	r19
    2796:	2f 91       	pop	r18
    2798:	0f 90       	pop	r0
    279a:	0b be       	out	0x3b, r0	; 59
    279c:	0f 90       	pop	r0
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	0f 90       	pop	r0
    27a2:	1f 90       	pop	r1
    27a4:	18 95       	reti

000027a6 <__vector_26>:

ISR(USART_DRE_Vect)
{
    27a6:	1f 92       	push	r1
    27a8:	0f 92       	push	r0
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	0f 92       	push	r0
    27ae:	11 24       	eor	r1, r1
    27b0:	0b b6       	in	r0, 0x3b	; 59
    27b2:	0f 92       	push	r0
    27b4:	2f 93       	push	r18
    27b6:	3f 93       	push	r19
    27b8:	4f 93       	push	r20
    27ba:	5f 93       	push	r21
    27bc:	6f 93       	push	r22
    27be:	7f 93       	push	r23
    27c0:	8f 93       	push	r24
    27c2:	9f 93       	push	r25
    27c4:	af 93       	push	r26
    27c6:	bf 93       	push	r27
    27c8:	ef 93       	push	r30
    27ca:	ff 93       	push	r31
	// Data send
	if (udi_cdc_is_rx_ready()) {
    27cc:	0e 94 38 05 	call	0xa70	; 0xa70 <udi_cdc_is_rx_ready>
    27d0:	88 23       	and	r24, r24
    27d2:	39 f0       	breq	.+14     	; 0x27e2 <__vector_26+0x3c>
		// Transmit next data
		ui_com_rx_start();
    27d4:	0e 94 4d 01 	call	0x29a	; 0x29a <ui_com_rx_start>
		USART.DATA = udi_cdc_getc();
    27d8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <udi_cdc_getc>
    27dc:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    27e0:	05 c0       	rjmp	.+10     	; 0x27ec <__vector_26+0x46>
	} else {
		// Fifo empty then Stop UART transmission
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc |
    27e2:	80 e3       	ldi	r24, 0x30	; 48
    27e4:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
				(register8_t) USART_DREINTLVL_OFF_gc;
		ui_com_rx_stop();
    27e8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <ui_com_rx_stop>
	}
}
    27ec:	ff 91       	pop	r31
    27ee:	ef 91       	pop	r30
    27f0:	bf 91       	pop	r27
    27f2:	af 91       	pop	r26
    27f4:	9f 91       	pop	r25
    27f6:	8f 91       	pop	r24
    27f8:	7f 91       	pop	r23
    27fa:	6f 91       	pop	r22
    27fc:	5f 91       	pop	r21
    27fe:	4f 91       	pop	r20
    2800:	3f 91       	pop	r19
    2802:	2f 91       	pop	r18
    2804:	0f 90       	pop	r0
    2806:	0b be       	out	0x3b, r0	; 59
    2808:	0f 90       	pop	r0
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	0f 90       	pop	r0
    280e:	1f 90       	pop	r1
    2810:	18 95       	reti

00002812 <__udivmodhi4>:
    2812:	aa 1b       	sub	r26, r26
    2814:	bb 1b       	sub	r27, r27
    2816:	51 e1       	ldi	r21, 0x11	; 17
    2818:	07 c0       	rjmp	.+14     	; 0x2828 <__udivmodhi4_ep>

0000281a <__udivmodhi4_loop>:
    281a:	aa 1f       	adc	r26, r26
    281c:	bb 1f       	adc	r27, r27
    281e:	a6 17       	cp	r26, r22
    2820:	b7 07       	cpc	r27, r23
    2822:	10 f0       	brcs	.+4      	; 0x2828 <__udivmodhi4_ep>
    2824:	a6 1b       	sub	r26, r22
    2826:	b7 0b       	sbc	r27, r23

00002828 <__udivmodhi4_ep>:
    2828:	88 1f       	adc	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	5a 95       	dec	r21
    282e:	a9 f7       	brne	.-22     	; 0x281a <__udivmodhi4_loop>
    2830:	80 95       	com	r24
    2832:	90 95       	com	r25
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	08 95       	ret

0000283a <__udivmodsi4>:
    283a:	a1 e2       	ldi	r26, 0x21	; 33
    283c:	1a 2e       	mov	r1, r26
    283e:	aa 1b       	sub	r26, r26
    2840:	bb 1b       	sub	r27, r27
    2842:	fd 01       	movw	r30, r26
    2844:	0d c0       	rjmp	.+26     	; 0x2860 <__udivmodsi4_ep>

00002846 <__udivmodsi4_loop>:
    2846:	aa 1f       	adc	r26, r26
    2848:	bb 1f       	adc	r27, r27
    284a:	ee 1f       	adc	r30, r30
    284c:	ff 1f       	adc	r31, r31
    284e:	a2 17       	cp	r26, r18
    2850:	b3 07       	cpc	r27, r19
    2852:	e4 07       	cpc	r30, r20
    2854:	f5 07       	cpc	r31, r21
    2856:	20 f0       	brcs	.+8      	; 0x2860 <__udivmodsi4_ep>
    2858:	a2 1b       	sub	r26, r18
    285a:	b3 0b       	sbc	r27, r19
    285c:	e4 0b       	sbc	r30, r20
    285e:	f5 0b       	sbc	r31, r21

00002860 <__udivmodsi4_ep>:
    2860:	66 1f       	adc	r22, r22
    2862:	77 1f       	adc	r23, r23
    2864:	88 1f       	adc	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	1a 94       	dec	r1
    286a:	69 f7       	brne	.-38     	; 0x2846 <__udivmodsi4_loop>
    286c:	60 95       	com	r22
    286e:	70 95       	com	r23
    2870:	80 95       	com	r24
    2872:	90 95       	com	r25
    2874:	9b 01       	movw	r18, r22
    2876:	ac 01       	movw	r20, r24
    2878:	bd 01       	movw	r22, r26
    287a:	cf 01       	movw	r24, r30
    287c:	08 95       	ret

0000287e <__tablejump2__>:
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	88 1f       	adc	r24, r24
    2884:	8b bf       	out	0x3b, r24	; 59
    2886:	07 90       	elpm	r0, Z+
    2888:	f6 91       	elpm	r31, Z
    288a:	e0 2d       	mov	r30, r0
    288c:	19 94       	eijmp

0000288e <memcpy>:
    288e:	fb 01       	movw	r30, r22
    2890:	dc 01       	movw	r26, r24
    2892:	02 c0       	rjmp	.+4      	; 0x2898 <memcpy+0xa>
    2894:	01 90       	ld	r0, Z+
    2896:	0d 92       	st	X+, r0
    2898:	41 50       	subi	r20, 0x01	; 1
    289a:	50 40       	sbci	r21, 0x00	; 0
    289c:	d8 f7       	brcc	.-10     	; 0x2894 <memcpy+0x6>
    289e:	08 95       	ret

000028a0 <_exit>:
    28a0:	f8 94       	cli

000028a2 <__stop_program>:
    28a2:	ff cf       	rjmp	.-2      	; 0x28a2 <__stop_program>


DEVICE_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00802000  00002d86  00002e1a  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002e0  008020c0  008020c0  00002edc  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002eda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000588  00000000  00000000  00002f50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e449  00000000  00000000  000034d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004fc5  00000000  00000000  00011921  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007a6d  00000000  00000000  000168e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000eb4  00000000  00000000  0001e354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003944a  00000000  00000000  0001f208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000420c  00000000  00000000  00058652  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  0005c860  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000033ed  00000000  00000000  0005cd70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c1       	rjmp	.+550    	; 0x24c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c1       	rjmp	.+530    	; 0x24c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c1       	rjmp	.+526    	; 0x24c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c1       	rjmp	.+522    	; 0x24c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c1       	rjmp	.+518    	; 0x24c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c1       	rjmp	.+514    	; 0x24c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c0       	rjmp	.+510    	; 0x24c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c0       	rjmp	.+506    	; 0x24c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c0       	rjmp	.+502    	; 0x24c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c0       	rjmp	.+498    	; 0x24c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c0       	rjmp	.+494    	; 0x24c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__vector_25>
      68:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__vector_26>
      6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c0       	rjmp	.+450    	; 0x24c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
      96:	00 00       	nop
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c7 c0       	rjmp	.+398    	; 0x24c <__bad_interrupt>
      be:	00 00       	nop
      c0:	c5 c0       	rjmp	.+394    	; 0x24c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c3 c0       	rjmp	.+390    	; 0x24c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c1 c0       	rjmp	.+386    	; 0x24c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bf c0       	rjmp	.+382    	; 0x24c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bd c0       	rjmp	.+378    	; 0x24c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bb c0       	rjmp	.+374    	; 0x24c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b9 c0       	rjmp	.+370    	; 0x24c <__bad_interrupt>
      da:	00 00       	nop
      dc:	b7 c0       	rjmp	.+366    	; 0x24c <__bad_interrupt>
      de:	00 00       	nop
      e0:	b5 c0       	rjmp	.+362    	; 0x24c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b1 c0       	rjmp	.+354    	; 0x24c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	af c0       	rjmp	.+350    	; 0x24c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ad c0       	rjmp	.+346    	; 0x24c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ab c0       	rjmp	.+342    	; 0x24c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a9 c0       	rjmp	.+338    	; 0x24c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a7 c0       	rjmp	.+334    	; 0x24c <__bad_interrupt>
      fe:	00 00       	nop
     100:	a5 c0       	rjmp	.+330    	; 0x24c <__bad_interrupt>
     102:	00 00       	nop
     104:	a3 c0       	rjmp	.+326    	; 0x24c <__bad_interrupt>
     106:	00 00       	nop
     108:	a1 c0       	rjmp	.+322    	; 0x24c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9f c0       	rjmp	.+318    	; 0x24c <__bad_interrupt>
     10e:	00 00       	nop
     110:	9d c0       	rjmp	.+314    	; 0x24c <__bad_interrupt>
     112:	00 00       	nop
     114:	9b c0       	rjmp	.+310    	; 0x24c <__bad_interrupt>
     116:	00 00       	nop
     118:	99 c0       	rjmp	.+306    	; 0x24c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	97 c0       	rjmp	.+302    	; 0x24c <__bad_interrupt>
     11e:	00 00       	nop
     120:	95 c0       	rjmp	.+298    	; 0x24c <__bad_interrupt>
     122:	00 00       	nop
     124:	93 c0       	rjmp	.+294    	; 0x24c <__bad_interrupt>
     126:	00 00       	nop
     128:	91 c0       	rjmp	.+290    	; 0x24c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8f c0       	rjmp	.+286    	; 0x24c <__bad_interrupt>
     12e:	00 00       	nop
     130:	8d c0       	rjmp	.+282    	; 0x24c <__bad_interrupt>
     132:	00 00       	nop
     134:	8b c0       	rjmp	.+278    	; 0x24c <__bad_interrupt>
     136:	00 00       	nop
     138:	89 c0       	rjmp	.+274    	; 0x24c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	87 c0       	rjmp	.+270    	; 0x24c <__bad_interrupt>
     13e:	00 00       	nop
     140:	85 c0       	rjmp	.+266    	; 0x24c <__bad_interrupt>
     142:	00 00       	nop
     144:	83 c0       	rjmp	.+262    	; 0x24c <__bad_interrupt>
     146:	00 00       	nop
     148:	81 c0       	rjmp	.+258    	; 0x24c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7f c0       	rjmp	.+254    	; 0x24c <__bad_interrupt>
     14e:	00 00       	nop
     150:	7d c0       	rjmp	.+250    	; 0x24c <__bad_interrupt>
     152:	00 00       	nop
     154:	7b c0       	rjmp	.+246    	; 0x24c <__bad_interrupt>
     156:	00 00       	nop
     158:	79 c0       	rjmp	.+242    	; 0x24c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	77 c0       	rjmp	.+238    	; 0x24c <__bad_interrupt>
     15e:	00 00       	nop
     160:	75 c0       	rjmp	.+234    	; 0x24c <__bad_interrupt>
     162:	00 00       	nop
     164:	73 c0       	rjmp	.+230    	; 0x24c <__bad_interrupt>
     166:	00 00       	nop
     168:	71 c0       	rjmp	.+226    	; 0x24c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6f c0       	rjmp	.+222    	; 0x24c <__bad_interrupt>
     16e:	00 00       	nop
     170:	6d c0       	rjmp	.+218    	; 0x24c <__bad_interrupt>
     172:	00 00       	nop
     174:	6b c0       	rjmp	.+214    	; 0x24c <__bad_interrupt>
     176:	00 00       	nop
     178:	69 c0       	rjmp	.+210    	; 0x24c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	67 c0       	rjmp	.+206    	; 0x24c <__bad_interrupt>
     17e:	00 00       	nop
     180:	65 c0       	rjmp	.+202    	; 0x24c <__bad_interrupt>
     182:	00 00       	nop
     184:	63 c0       	rjmp	.+198    	; 0x24c <__bad_interrupt>
     186:	00 00       	nop
     188:	61 c0       	rjmp	.+194    	; 0x24c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5f c0       	rjmp	.+190    	; 0x24c <__bad_interrupt>
     18e:	00 00       	nop
     190:	5d c0       	rjmp	.+186    	; 0x24c <__bad_interrupt>
     192:	00 00       	nop
     194:	5b c0       	rjmp	.+182    	; 0x24c <__bad_interrupt>
     196:	00 00       	nop
     198:	59 c0       	rjmp	.+178    	; 0x24c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	57 c0       	rjmp	.+174    	; 0x24c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	55 c0       	rjmp	.+170    	; 0x24c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	53 c0       	rjmp	.+166    	; 0x24c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	51 c0       	rjmp	.+162    	; 0x24c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4f c0       	rjmp	.+158    	; 0x24c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4d c0       	rjmp	.+154    	; 0x24c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4b c0       	rjmp	.+150    	; 0x24c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	49 c0       	rjmp	.+146    	; 0x24c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	47 c0       	rjmp	.+142    	; 0x24c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	45 c0       	rjmp	.+138    	; 0x24c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	43 c0       	rjmp	.+134    	; 0x24c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	41 c0       	rjmp	.+130    	; 0x24c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3f c0       	rjmp	.+126    	; 0x24c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3d c0       	rjmp	.+122    	; 0x24c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3b c0       	rjmp	.+118    	; 0x24c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	39 c0       	rjmp	.+114    	; 0x24c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	37 c0       	rjmp	.+110    	; 0x24c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	35 c0       	rjmp	.+106    	; 0x24c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	33 c0       	rjmp	.+102    	; 0x24c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	31 c0       	rjmp	.+98     	; 0x24c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2f c0       	rjmp	.+94     	; 0x24c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2d c0       	rjmp	.+90     	; 0x24c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 45 13 	jmp	0x268a	; 0x268a <__vector_125>
     1f8:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__vector_126>
     1fc:	3a 0e       	add	r3, r26
     1fe:	3d 0e       	add	r3, r29
     200:	40 0e       	add	r4, r16
     202:	43 0e       	add	r4, r19
     204:	46 0e       	add	r4, r22
     206:	49 0e       	add	r4, r25
     208:	4c 0e       	add	r4, r28

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e5       	ldi	r29, 0x5F	; 95
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
     21a:	10 e2       	ldi	r17, 0x20	; 32
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	e6 e8       	ldi	r30, 0x86	; 134
     222:	fd e2       	ldi	r31, 0x2D	; 45
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	a0 3c       	cpi	r26, 0xC0	; 192
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	23 e2       	ldi	r18, 0x23	; 35
     236:	a0 ec       	ldi	r26, 0xC0	; 192
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	a0 3a       	cpi	r26, 0xA0	; 160
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <main>
     248:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <_exit>

0000024c <__bad_interrupt>:
     24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <ui_com_open>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
     254:	08 95       	ret

00000256 <ui_com_close>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
     25c:	08 95       	ret

0000025e <ui_com_rx_start>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     25e:	80 e2       	ldi	r24, 0x20	; 32
     260:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     264:	08 95       	ret

00000266 <ui_com_rx_stop>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     266:	80 e2       	ldi	r24, 0x20	; 32
     268:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     26c:	08 95       	ret

0000026e <ui_com_tx_start>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     26e:	80 e1       	ldi	r24, 0x10	; 16
     270:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     274:	08 95       	ret

00000276 <ui_com_tx_stop>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     276:	80 e1       	ldi	r24, 0x10	; 16
     278:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     27c:	08 95       	ret

0000027e <ui_com_error>:
{
	LED_Off(LED2_GPIO);
}

void ui_com_error(void)
{
     27e:	08 95       	ret

00000280 <ui_com_overflow>:

}

void ui_com_overflow(void)
{
     280:	08 95       	ret

00000282 <ui_process>:

}

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
     282:	00 97       	sbiw	r24, 0x00	; 0
     284:	21 f4       	brne	.+8      	; 0x28e <ui_process+0xc>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
     28c:	08 95       	ret
		LED_On(LED0_GPIO);
	}
	if (1000 == framenumber) {
     28e:	88 3e       	cpi	r24, 0xE8	; 232
     290:	93 40       	sbci	r25, 0x03	; 3
     292:	19 f4       	brne	.+6      	; 0x29a <ui_process+0x18>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
     29a:	08 95       	ret

0000029c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	27 97       	sbiw	r28, 0x07	; 7
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     2b4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     2b8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     2bc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     2c0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     2c4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     2c8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     2cc:	64 e0       	ldi	r22, 0x04	; 4
     2ce:	81 e4       	ldi	r24, 0x41	; 65
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 df 0a 	call	0x15be	; 0x15be <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     2d6:	6c e1       	ldi	r22, 0x1C	; 28
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
     2e0:	8a 83       	std	Y+2, r24	; 0x02
     2e2:	6d e1       	ldi	r22, 0x1D	; 29
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
     2ec:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	9a 81       	ldd	r25, Y+2	; 0x02
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	21 f4       	brne	.+8      	; 0x2fe <sysclk_init+0x62>
		cal = 0x2340;
     2f6:	80 e4       	ldi	r24, 0x40	; 64
     2f8:	93 e2       	ldi	r25, 0x23	; 35
     2fa:	89 83       	std	Y+1, r24	; 0x01
     2fc:	9a 83       	std	Y+2, r25	; 0x02
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	9a 81       	ldd	r25, Y+2	; 0x02
     302:	8b 83       	std	Y+3, r24	; 0x03
     304:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
     306:	e0 e6       	ldi	r30, 0x60	; 96
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
     30c:	8c 81       	ldd	r24, Y+4	; 0x04
     30e:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     310:	8f b7       	in	r24, 0x3f	; 63
     312:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
     314:	f8 94       	cli
	return flags;
     316:	9e 81       	ldd	r25, Y+6	; 0x06
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     318:	e0 e5       	ldi	r30, 0x50	; 80
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	82 60       	ori	r24, 0x02	; 2
     320:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     322:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     324:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     326:	81 ff       	sbrs	r24, 1
     328:	fd cf       	rjmp	.-6      	; 0x324 <sysclk_init+0x88>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     32a:	8f b7       	in	r24, 0x3f	; 63
     32c:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
     32e:	f8 94       	cli
	return flags;
     330:	9d 81       	ldd	r25, Y+5	; 0x05
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     332:	00 e5       	ldi	r16, 0x50	; 80
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	d8 01       	movw	r26, r16
     338:	16 96       	adiw	r26, 0x06	; 6
     33a:	8c 91       	ld	r24, X
     33c:	16 97       	sbiw	r26, 0x06	; 6
     33e:	89 7f       	andi	r24, 0xF9	; 249
     340:	16 96       	adiw	r26, 0x06	; 6
     342:	8c 93       	st	X, r24
     344:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     346:	e0 e6       	ldi	r30, 0x60	; 96
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	80 e8       	ldi	r24, 0x80	; 128
     34c:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     34e:	8b eb       	ldi	r24, 0xBB	; 187
     350:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     352:	16 96       	adiw	r26, 0x06	; 6
     354:	8c 91       	ld	r24, X
     356:	16 97       	sbiw	r26, 0x06	; 6
     358:	84 60       	ori	r24, 0x04	; 4
     35a:	16 96       	adiw	r26, 0x06	; 6
     35c:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     35e:	80 81       	ld	r24, Z
     360:	81 60       	ori	r24, 0x01	; 1
     362:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     364:	9f bf       	out	0x3f, r25	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	80 e4       	ldi	r24, 0x40	; 64
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 df 0a 	call	0x15be	; 0x15be <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     370:	8f b7       	in	r24, 0x3f	; 63
     372:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
     374:	f8 94       	cli
	return flags;
     376:	9f 81       	ldd	r25, Y+7	; 0x07
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     378:	f8 01       	movw	r30, r16
     37a:	80 81       	ld	r24, Z
     37c:	8e 7f       	andi	r24, 0xFE	; 254
     37e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     380:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     382:	27 96       	adiw	r28, 0x07	; 7
     384:	cd bf       	out	0x3d, r28	; 61
     386:	de bf       	out	0x3e, r29	; 62
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	1f 92       	push	r1
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     39c:	9f b7       	in	r25, 0x3f	; 63
     39e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     3a0:	f8 94       	cli
	return flags;
     3a2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     3a4:	e8 2f       	mov	r30, r24
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	e0 59       	subi	r30, 0x90	; 144
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	60 95       	com	r22
     3ae:	80 81       	ld	r24, Z
     3b0:	68 23       	and	r22, r24
     3b2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3b4:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     3b6:	0f 90       	pop	r0
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	1f 92       	push	r1
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3c8:	9f b7       	in	r25, 0x3f	; 63
     3ca:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     3cc:	f8 94       	cli
	return flags;
     3ce:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     3d0:	e8 2f       	mov	r30, r24
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	e0 59       	subi	r30, 0x90	; 144
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	68 2b       	or	r22, r24
     3dc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3de:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     3e0:	0f 90       	pop	r0
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	1f 92       	push	r1
     3ee:	1f 92       	push	r1
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     3f4:	86 30       	cpi	r24, 0x06	; 6
     3f6:	11 f0       	breq	.+4      	; 0x3fc <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     3fc:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     3fe:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     402:	81 fd       	sbrc	r24, 1
     404:	2a c0       	rjmp	.+84     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     406:	8f b7       	in	r24, 0x3f	; 63
     408:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     40a:	f8 94       	cli
	return flags;
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     40e:	e0 e5       	ldi	r30, 0x50	; 80
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
     414:	82 60       	ori	r24, 0x02	; 2
     416:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     418:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     41a:	81 81       	ldd	r24, Z+1	; 0x01
     41c:	81 ff       	sbrs	r24, 1
     41e:	fd cf       	rjmp	.-6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     420:	8f b7       	in	r24, 0x3f	; 63
     422:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     424:	f8 94       	cli
	return flags;
     426:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     428:	a0 e5       	ldi	r26, 0x50	; 80
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	16 96       	adiw	r26, 0x06	; 6
     42e:	8c 91       	ld	r24, X
     430:	16 97       	sbiw	r26, 0x06	; 6
     432:	89 7f       	andi	r24, 0xF9	; 249
     434:	16 96       	adiw	r26, 0x06	; 6
     436:	8c 93       	st	X, r24
     438:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     43a:	e0 e6       	ldi	r30, 0x60	; 96
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 e8       	ldi	r24, 0x80	; 128
     440:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     442:	8b eb       	ldi	r24, 0xBB	; 187
     444:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     446:	16 96       	adiw	r26, 0x06	; 6
     448:	8c 91       	ld	r24, X
     44a:	16 97       	sbiw	r26, 0x06	; 6
     44c:	84 60       	ori	r24, 0x04	; 4
     44e:	16 96       	adiw	r26, 0x06	; 6
     450:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     452:	80 81       	ld	r24, Z
     454:	81 60       	ori	r24, 0x01	; 1
     456:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     458:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     45a:	63 60       	ori	r22, 0x03	; 3
     45c:	84 e4       	ldi	r24, 0x44	; 68
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 df 0a 	call	0x15be	; 0x15be <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     464:	60 e4       	ldi	r22, 0x40	; 64
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	94 df       	rcall	.-216    	; 0x392 <sysclk_enable_module>
}
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	fc 01       	movw	r30, r24
     47a:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     480:	c6 2f       	mov	r28, r22
     482:	d0 e0       	ldi	r29, 0x00	; 0
     484:	de 01       	movw	r26, r28
     486:	02 2e       	mov	r0, r18
     488:	02 c0       	rjmp	.+4      	; 0x48e <ioport_configure_port_pin+0x1a>
     48a:	b5 95       	asr	r27
     48c:	a7 95       	ror	r26
     48e:	0a 94       	dec	r0
     490:	e2 f7       	brpl	.-8      	; 0x48a <ioport_configure_port_pin+0x16>
     492:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     494:	50 83       	st	Z, r21
     496:	2f 5f       	subi	r18, 0xFF	; 255
     498:	3f 4f       	sbci	r19, 0xFF	; 255
     49a:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     49c:	28 30       	cpi	r18, 0x08	; 8
     49e:	31 05       	cpc	r19, r1
     4a0:	89 f7       	brne	.-30     	; 0x484 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     4a2:	40 ff       	sbrs	r20, 0
     4a4:	0a c0       	rjmp	.+20     	; 0x4ba <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     4a6:	41 ff       	sbrs	r20, 1
     4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     4aa:	fc 01       	movw	r30, r24
     4ac:	65 83       	std	Z+5, r22	; 0x05
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     4b0:	fc 01       	movw	r30, r24
     4b2:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     4b4:	fc 01       	movw	r30, r24
     4b6:	61 83       	std	Z+1, r22	; 0x01
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     4ba:	fc 01       	movw	r30, r24
     4bc:	62 83       	std	Z+2, r22	; 0x02
	}
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
     4c4:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <udi_cdc_nb_comm_enabled>
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	80 93 d6 21 	sts	0x21D6, r24	; 0x8021d6 <udi_cdc_nb_comm_enabled>
     4ce:	08 95       	ret

000004d0 <udi_cdc_data_setup>:
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	08 95       	ret

000004d4 <udi_cdc_getsetting>:
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	08 95       	ret

000004d8 <udi_cdc_line_coding_received>:
     4d8:	66 ee       	ldi	r22, 0xE6	; 230
     4da:	71 e2       	ldi	r23, 0x21	; 33
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <uart_config>
     4e2:	08 95       	ret

000004e4 <udi_cdc_comm_enable>:
     4e4:	10 92 d6 21 	sts	0x21D6, r1	; 0x8021d6 <udi_cdc_nb_comm_enabled>
     4e8:	10 92 e2 21 	sts	0x21E2, r1	; 0x8021e2 <udi_cdc_state>
     4ec:	10 92 e3 21 	sts	0x21E3, r1	; 0x8021e3 <udi_cdc_state+0x1>
     4f0:	e8 ed       	ldi	r30, 0xD8	; 216
     4f2:	f1 e2       	ldi	r31, 0x21	; 33
     4f4:	81 ea       	ldi	r24, 0xA1	; 161
     4f6:	80 83       	st	Z, r24
     4f8:	80 e2       	ldi	r24, 0x20	; 32
     4fa:	81 83       	std	Z+1, r24	; 0x01
     4fc:	12 82       	std	Z+2, r1	; 0x02
     4fe:	13 82       	std	Z+3, r1	; 0x03
     500:	14 82       	std	Z+4, r1	; 0x04
     502:	15 82       	std	Z+5, r1	; 0x05
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	86 83       	std	Z+6, r24	; 0x06
     50a:	97 83       	std	Z+7, r25	; 0x07
     50c:	10 86       	std	Z+8, r1	; 0x08
     50e:	11 86       	std	Z+9, r1	; 0x09
     510:	e6 ee       	ldi	r30, 0xE6	; 230
     512:	f1 e2       	ldi	r31, 0x21	; 33
     514:	80 e8       	ldi	r24, 0x80	; 128
     516:	95 e2       	ldi	r25, 0x25	; 37
     518:	a0 e0       	ldi	r26, 0x00	; 0
     51a:	b0 e0       	ldi	r27, 0x00	; 0
     51c:	80 83       	st	Z, r24
     51e:	91 83       	std	Z+1, r25	; 0x01
     520:	a2 83       	std	Z+2, r26	; 0x02
     522:	b3 83       	std	Z+3, r27	; 0x03
     524:	14 82       	std	Z+4, r1	; 0x04
     526:	15 82       	std	Z+5, r1	; 0x05
     528:	88 e0       	ldi	r24, 0x08	; 8
     52a:	86 83       	std	Z+6, r24	; 0x06
     52c:	bf 01       	movw	r22, r30
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <uart_config>
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <main_cdc_enable>
     53a:	88 23       	and	r24, r24
     53c:	29 f0       	breq	.+10     	; 0x548 <udi_cdc_comm_enable+0x64>
     53e:	90 91 d6 21 	lds	r25, 0x21D6	; 0x8021d6 <udi_cdc_nb_comm_enabled>
     542:	9f 5f       	subi	r25, 0xFF	; 255
     544:	90 93 d6 21 	sts	0x21D6, r25	; 0x8021d6 <udi_cdc_nb_comm_enabled>
     548:	08 95       	ret

0000054a <udi_cdc_tx_send>:
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	1f 92       	push	r1
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <udi_cdc_tx_trans_ongoing>
     55e:	81 11       	cpse	r24, r1
     560:	9e c0       	rjmp	.+316    	; 0x69e <udi_cdc_tx_send+0x154>
     562:	0e 94 0b 11 	call	0x2216	; 0x2216 <udd_is_high_speed>
     566:	88 23       	and	r24, r24
     568:	51 f0       	breq	.+20     	; 0x57e <udi_cdc_tx_send+0x34>
     56a:	00 91 c4 20 	lds	r16, 0x20C4	; 0x8020c4 <udi_cdc_tx_sof_num>
     56e:	10 91 c5 20 	lds	r17, 0x20C5	; 0x8020c5 <udi_cdc_tx_sof_num+0x1>
     572:	0e 94 18 11 	call	0x2230	; 0x2230 <udd_get_micro_frame_number>
     576:	08 17       	cp	r16, r24
     578:	19 07       	cpc	r17, r25
     57a:	59 f4       	brne	.+22     	; 0x592 <udi_cdc_tx_send+0x48>
     57c:	90 c0       	rjmp	.+288    	; 0x69e <udi_cdc_tx_send+0x154>
     57e:	00 91 c4 20 	lds	r16, 0x20C4	; 0x8020c4 <udi_cdc_tx_sof_num>
     582:	10 91 c5 20 	lds	r17, 0x20C5	; 0x8020c5 <udi_cdc_tx_sof_num+0x1>
     586:	0e 94 13 11 	call	0x2226	; 0x2226 <udd_get_frame_number>
     58a:	08 17       	cp	r16, r24
     58c:	19 07       	cpc	r17, r25
     58e:	09 f4       	brne	.+2      	; 0x592 <udi_cdc_tx_send+0x48>
     590:	86 c0       	rjmp	.+268    	; 0x69e <udi_cdc_tx_send+0x154>
     592:	8f b7       	in	r24, 0x3f	; 63
     594:	89 83       	std	Y+1, r24	; 0x01
     596:	f8 94       	cli
     598:	19 81       	ldd	r17, Y+1	; 0x01
     59a:	00 91 c6 20 	lds	r16, 0x20C6	; 0x8020c6 <udi_cdc_tx_buf_sel>
     59e:	e0 2f       	mov	r30, r16
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	e9 53       	subi	r30, 0x39	; 57
     5a8:	ff 4d       	sbci	r31, 0xDF	; 223
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	89 2b       	or	r24, r25
     5b0:	09 f5       	brne	.+66     	; 0x5f4 <udi_cdc_tx_send+0xaa>
     5b2:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <__data_end>
     5b6:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <__data_end+0x1>
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <__data_end>
     5c0:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <__data_end+0x1>
     5c4:	0e 94 0b 11 	call	0x2216	; 0x2216 <udd_is_high_speed>
     5c8:	81 11       	cpse	r24, r1
     5ca:	07 c0       	rjmp	.+14     	; 0x5da <udi_cdc_tx_send+0x90>
     5cc:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <__data_end>
     5d0:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <__data_end+0x1>
     5d4:	84 36       	cpi	r24, 0x64	; 100
     5d6:	91 05       	cpc	r25, r1
     5d8:	58 f0       	brcs	.+22     	; 0x5f0 <udi_cdc_tx_send+0xa6>
     5da:	0e 94 0b 11 	call	0x2216	; 0x2216 <udd_is_high_speed>
     5de:	88 23       	and	r24, r24
     5e0:	49 f0       	breq	.+18     	; 0x5f4 <udi_cdc_tx_send+0xaa>
     5e2:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <__data_end>
     5e6:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <__data_end+0x1>
     5ea:	80 32       	cpi	r24, 0x20	; 32
     5ec:	93 40       	sbci	r25, 0x03	; 3
     5ee:	10 f4       	brcc	.+4      	; 0x5f4 <udi_cdc_tx_send+0xaa>
     5f0:	1f bf       	out	0x3f, r17	; 63
     5f2:	55 c0       	rjmp	.+170    	; 0x69e <udi_cdc_tx_send+0x154>
     5f4:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <__data_end>
     5f8:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <__data_end+0x1>
     5fc:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udi_cdc_tx_both_buf_to_send>
     600:	81 11       	cpse	r24, r1
     602:	06 c0       	rjmp	.+12     	; 0x610 <udi_cdc_tx_send+0xc6>
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	01 11       	cpse	r16, r1
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <udi_cdc_tx_buf_sel>
     60e:	04 c0       	rjmp	.+8      	; 0x618 <udi_cdc_tx_send+0xce>
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	01 11       	cpse	r16, r1
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	08 2f       	mov	r16, r24
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <udi_cdc_tx_trans_ongoing>
     61e:	1f bf       	out	0x3f, r17	; 63
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	f8 01       	movw	r30, r16
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	e9 53       	subi	r30, 0x39	; 57
     62a:	ff 4d       	sbci	r31, 0xDF	; 223
     62c:	ff 24       	eor	r15, r15
     62e:	f3 94       	inc	r15
     630:	80 81       	ld	r24, Z
     632:	91 81       	ldd	r25, Z+1	; 0x01
     634:	80 34       	cpi	r24, 0x40	; 64
     636:	91 05       	cpc	r25, r1
     638:	09 f4       	brne	.+2      	; 0x63c <udi_cdc_tx_send+0xf2>
     63a:	f1 2c       	mov	r15, r1
     63c:	ff 20       	and	r15, r15
     63e:	91 f0       	breq	.+36     	; 0x664 <udi_cdc_tx_send+0x11a>
     640:	0e 94 0b 11 	call	0x2216	; 0x2216 <udd_is_high_speed>
     644:	88 23       	and	r24, r24
     646:	39 f0       	breq	.+14     	; 0x656 <udi_cdc_tx_send+0x10c>
     648:	0e 94 18 11 	call	0x2230	; 0x2230 <udd_get_micro_frame_number>
     64c:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udi_cdc_tx_sof_num>
     650:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <udi_cdc_tx_sof_num+0x1>
     654:	0b c0       	rjmp	.+22     	; 0x66c <udi_cdc_tx_send+0x122>
     656:	0e 94 13 11 	call	0x2226	; 0x2226 <udd_get_frame_number>
     65a:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udi_cdc_tx_sof_num>
     65e:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <udi_cdc_tx_sof_num+0x1>
     662:	04 c0       	rjmp	.+8      	; 0x66c <udi_cdc_tx_send+0x122>
     664:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <udi_cdc_tx_sof_num>
     668:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <udi_cdc_tx_sof_num+0x1>
     66c:	f8 01       	movw	r30, r16
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	e9 53       	subi	r30, 0x39	; 57
     674:	ff 4d       	sbci	r31, 0xDF	; 223
     676:	20 81       	ld	r18, Z
     678:	31 81       	ldd	r19, Z+1	; 0x01
     67a:	a8 01       	movw	r20, r16
     67c:	00 24       	eor	r0, r0
     67e:	56 95       	lsr	r21
     680:	47 95       	ror	r20
     682:	07 94       	ror	r0
     684:	56 95       	lsr	r21
     686:	47 95       	ror	r20
     688:	07 94       	ror	r0
     68a:	54 2f       	mov	r21, r20
     68c:	40 2d       	mov	r20, r0
     68e:	44 53       	subi	r20, 0x34	; 52
     690:	5f 4d       	sbci	r21, 0xDF	; 223
     692:	06 e5       	ldi	r16, 0x56	; 86
     694:	13 e0       	ldi	r17, 0x03	; 3
     696:	6f 2d       	mov	r22, r15
     698:	81 e8       	ldi	r24, 0x81	; 129
     69a:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <udd_ep_run>
     69e:	0f 90       	pop	r0
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	08 95       	ret

000006ac <udi_cdc_data_sent>:
     6ac:	81 11       	cpse	r24, r1
     6ae:	15 c0       	rjmp	.+42     	; 0x6da <udi_cdc_data_sent+0x2e>
     6b0:	20 91 c6 20 	lds	r18, 0x20C6	; 0x8020c6 <udi_cdc_tx_buf_sel>
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	22 23       	and	r18, r18
     6ba:	11 f0       	breq	.+4      	; 0x6c0 <udi_cdc_data_sent+0x14>
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	fc 01       	movw	r30, r24
     6c6:	e9 53       	subi	r30, 0x39	; 57
     6c8:	ff 4d       	sbci	r31, 0xDF	; 223
     6ca:	10 82       	st	Z, r1
     6cc:	11 82       	std	Z+1, r1	; 0x01
     6ce:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udi_cdc_tx_both_buf_to_send>
     6d2:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <udi_cdc_tx_trans_ongoing>
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	38 cf       	rjmp	.-400    	; 0x54a <udi_cdc_tx_send>
     6da:	08 95       	ret

000006dc <udi_cdc_data_sof_notify>:
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	35 cf       	rjmp	.-406    	; 0x54a <udi_cdc_tx_send>
     6e0:	08 95       	ret

000006e2 <udi_cdc_ctrl_state_notify>:
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <udi_cdc_serial_state_msg_ongoing>
     6ea:	81 11       	cpse	r24, r1
     6ec:	1f c0       	rjmp	.+62     	; 0x72c <udi_cdc_ctrl_state_notify+0x4a>
     6ee:	20 91 e2 21 	lds	r18, 0x21E2	; 0x8021e2 <udi_cdc_state>
     6f2:	30 91 e3 21 	lds	r19, 0x21E3	; 0x8021e3 <udi_cdc_state+0x1>
     6f6:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <uid_cdc_state_msg+0x8>
     6fa:	90 91 e1 21 	lds	r25, 0x21E1	; 0x8021e1 <uid_cdc_state_msg+0x9>
     6fe:	28 17       	cp	r18, r24
     700:	39 07       	cpc	r19, r25
     702:	a1 f0       	breq	.+40     	; 0x72c <udi_cdc_ctrl_state_notify+0x4a>
     704:	86 2f       	mov	r24, r22
     706:	20 91 e2 21 	lds	r18, 0x21E2	; 0x8021e2 <udi_cdc_state>
     70a:	30 91 e3 21 	lds	r19, 0x21E3	; 0x8021e3 <udi_cdc_state+0x1>
     70e:	20 93 e0 21 	sts	0x21E0, r18	; 0x8021e0 <uid_cdc_state_msg+0x8>
     712:	30 93 e1 21 	sts	0x21E1, r19	; 0x8021e1 <uid_cdc_state_msg+0x9>
     716:	03 ec       	ldi	r16, 0xC3	; 195
     718:	13 e0       	ldi	r17, 0x03	; 3
     71a:	2a e0       	ldi	r18, 0x0A	; 10
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	48 ed       	ldi	r20, 0xD8	; 216
     720:	51 e2       	ldi	r21, 0x21	; 33
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <udd_ep_run>
     728:	80 93 e4 21 	sts	0x21E4, r24	; 0x8021e4 <udi_cdc_serial_state_msg_ongoing>
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	08 95       	ret

00000732 <udi_cdc_ctrl_state_change>:
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	1f 92       	push	r1
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	8f b7       	in	r24, 0x3f	; 63
     73e:	89 83       	std	Y+1, r24	; 0x01
     740:	f8 94       	cli
     742:	29 81       	ldd	r18, Y+1	; 0x01
     744:	66 23       	and	r22, r22
     746:	59 f0       	breq	.+22     	; 0x75e <udi_cdc_ctrl_state_change+0x2c>
     748:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <udi_cdc_state>
     74c:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <udi_cdc_state+0x1>
     750:	48 2b       	or	r20, r24
     752:	59 2b       	or	r21, r25
     754:	40 93 e2 21 	sts	0x21E2, r20	; 0x8021e2 <udi_cdc_state>
     758:	50 93 e3 21 	sts	0x21E3, r21	; 0x8021e3 <udi_cdc_state+0x1>
     75c:	0c c0       	rjmp	.+24     	; 0x776 <udi_cdc_ctrl_state_change+0x44>
     75e:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <udi_cdc_state>
     762:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <udi_cdc_state+0x1>
     766:	40 95       	com	r20
     768:	50 95       	com	r21
     76a:	48 23       	and	r20, r24
     76c:	59 23       	and	r21, r25
     76e:	40 93 e2 21 	sts	0x21E2, r20	; 0x8021e2 <udi_cdc_state>
     772:	50 93 e3 21 	sts	0x21E3, r21	; 0x8021e3 <udi_cdc_state+0x1>
     776:	2f bf       	out	0x3f, r18	; 63
     778:	62 e8       	ldi	r22, 0x82	; 130
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	b2 df       	rcall	.-156    	; 0x6e2 <udi_cdc_ctrl_state_notify>
     77e:	0f 90       	pop	r0
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <udi_cdc_serial_state_msg_sent>:
     786:	10 92 e4 21 	sts	0x21E4, r1	; 0x8021e4 <udi_cdc_serial_state_msg_ongoing>
     78a:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <udi_cdc_state>
     78e:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <udi_cdc_state+0x1>
     792:	83 78       	andi	r24, 0x83	; 131
     794:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <udi_cdc_state>
     798:	90 93 e3 21 	sts	0x21E3, r25	; 0x8021e3 <udi_cdc_state+0x1>
     79c:	e8 ed       	ldi	r30, 0xD8	; 216
     79e:	f1 e2       	ldi	r31, 0x21	; 33
     7a0:	80 85       	ldd	r24, Z+8	; 0x08
     7a2:	91 85       	ldd	r25, Z+9	; 0x09
     7a4:	83 78       	andi	r24, 0x83	; 131
     7a6:	80 87       	std	Z+8, r24	; 0x08
     7a8:	91 87       	std	Z+9, r25	; 0x09
     7aa:	64 2f       	mov	r22, r20
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	99 cf       	rjmp	.-206    	; 0x6e2 <udi_cdc_ctrl_state_notify>
     7b0:	08 95       	ret

000007b2 <udi_cdc_data_disable>:
     7b2:	80 91 d5 21 	lds	r24, 0x21D5	; 0x8021d5 <udi_cdc_nb_data_enabled>
     7b6:	81 50       	subi	r24, 0x01	; 1
     7b8:	80 93 d5 21 	sts	0x21D5, r24	; 0x8021d5 <udi_cdc_nb_data_enabled>
     7bc:	80 91 d5 21 	lds	r24, 0x21D5	; 0x8021d5 <udi_cdc_nb_data_enabled>
     7c0:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <main_cdc_disable>
     7c4:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <udi_cdc_data_running>
     7c8:	08 95       	ret

000007ca <udi_cdc_comm_setup>:
     7ca:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <udd_g_ctrlreq>
     7ce:	88 23       	and	r24, r24
     7d0:	cc f4       	brge	.+50     	; 0x804 <udi_cdc_comm_setup+0x3a>
     7d2:	80 76       	andi	r24, 0x60	; 96
     7d4:	80 32       	cpi	r24, 0x20	; 32
     7d6:	f1 f5       	brne	.+124    	; 0x854 <udi_cdc_comm_setup+0x8a>
     7d8:	80 91 91 23 	lds	r24, 0x2391	; 0x802391 <udd_g_ctrlreq+0x1>
     7dc:	81 32       	cpi	r24, 0x21	; 33
     7de:	e1 f5       	brne	.+120    	; 0x858 <udi_cdc_comm_setup+0x8e>
     7e0:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
     7e4:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
     7e8:	07 97       	sbiw	r24, 0x07	; 7
     7ea:	c1 f5       	brne	.+112    	; 0x85c <udi_cdc_comm_setup+0x92>
     7ec:	e0 e9       	ldi	r30, 0x90	; 144
     7ee:	f3 e2       	ldi	r31, 0x23	; 35
     7f0:	86 ee       	ldi	r24, 0xE6	; 230
     7f2:	91 e2       	ldi	r25, 0x21	; 33
     7f4:	80 87       	std	Z+8, r24	; 0x08
     7f6:	91 87       	std	Z+9, r25	; 0x09
     7f8:	87 e0       	ldi	r24, 0x07	; 7
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	82 87       	std	Z+10, r24	; 0x0a
     7fe:	93 87       	std	Z+11, r25	; 0x0b
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	08 95       	ret
     804:	80 76       	andi	r24, 0x60	; 96
     806:	80 32       	cpi	r24, 0x20	; 32
     808:	59 f5       	brne	.+86     	; 0x860 <udi_cdc_comm_setup+0x96>
     80a:	80 91 91 23 	lds	r24, 0x2391	; 0x802391 <udd_g_ctrlreq+0x1>
     80e:	80 32       	cpi	r24, 0x20	; 32
     810:	19 f0       	breq	.+6      	; 0x818 <udi_cdc_comm_setup+0x4e>
     812:	82 32       	cpi	r24, 0x22	; 34
     814:	b9 f0       	breq	.+46     	; 0x844 <udi_cdc_comm_setup+0x7a>
     816:	26 c0       	rjmp	.+76     	; 0x864 <udi_cdc_comm_setup+0x9a>
     818:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
     81c:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
     820:	07 97       	sbiw	r24, 0x07	; 7
     822:	11 f5       	brne	.+68     	; 0x868 <udi_cdc_comm_setup+0x9e>
     824:	e0 e9       	ldi	r30, 0x90	; 144
     826:	f3 e2       	ldi	r31, 0x23	; 35
     828:	8c e6       	ldi	r24, 0x6C	; 108
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	84 87       	std	Z+12, r24	; 0x0c
     82e:	95 87       	std	Z+13, r25	; 0x0d
     830:	86 ee       	ldi	r24, 0xE6	; 230
     832:	91 e2       	ldi	r25, 0x21	; 33
     834:	80 87       	std	Z+8, r24	; 0x08
     836:	91 87       	std	Z+9, r25	; 0x09
     838:	87 e0       	ldi	r24, 0x07	; 7
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 87       	std	Z+10, r24	; 0x0a
     83e:	93 87       	std	Z+11, r25	; 0x0b
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 95       	ret
     844:	60 91 92 23 	lds	r22, 0x2392	; 0x802392 <udd_g_ctrlreq+0x2>
     848:	61 70       	andi	r22, 0x01	; 1
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <main_cdc_set_dtr>
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	08 95       	ret
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	08 95       	ret
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	08 95       	ret
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	08 95       	ret
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	08 95       	ret
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	08 95       	ret
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	08 95       	ret

0000086c <udi_cdc_signal_framing_error>:
     86c:	40 e1       	ldi	r20, 0x10	; 16
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	5e cf       	rjmp	.-324    	; 0x732 <udi_cdc_ctrl_state_change>
     876:	08 95       	ret

00000878 <udi_cdc_signal_overrun>:
     878:	40 e4       	ldi	r20, 0x40	; 64
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	58 cf       	rjmp	.-336    	; 0x732 <udi_cdc_ctrl_state_change>
     882:	08 95       	ret

00000884 <udi_cdc_multi_get_nb_received_data>:
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	1f 92       	push	r1
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	8f b7       	in	r24, 0x3f	; 63
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	f8 94       	cli
     894:	49 81       	ldd	r20, Y+1	; 0x01
     896:	20 91 4d 21 	lds	r18, 0x214D	; 0x80214d <udi_cdc_rx_pos>
     89a:	30 91 4e 21 	lds	r19, 0x214E	; 0x80214e <udi_cdc_rx_pos+0x1>
     89e:	e0 91 4f 21 	lds	r30, 0x214F	; 0x80214f <udi_cdc_rx_buf_sel>
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	ee 0f       	add	r30, r30
     8a6:	ff 1f       	adc	r31, r31
     8a8:	e0 5b       	subi	r30, 0xB0	; 176
     8aa:	fe 4d       	sbci	r31, 0xDE	; 222
     8ac:	80 81       	ld	r24, Z
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
     8b0:	4f bf       	out	0x3f, r20	; 63
     8b2:	82 1b       	sub	r24, r18
     8b4:	93 0b       	sbc	r25, r19
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <udi_cdc_multi_is_rx_ready>:
     8be:	e2 df       	rcall	.-60     	; 0x884 <udi_cdc_multi_get_nb_received_data>
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	89 2b       	or	r24, r25
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <udi_cdc_multi_is_rx_ready+0xa>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	82 2f       	mov	r24, r18
     8ca:	08 95       	ret

000008cc <udi_cdc_rx_start>:
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	1f 92       	push	r1
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	8f b7       	in	r24, 0x3f	; 63
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	f8 94       	cli
     8e0:	99 81       	ldd	r25, Y+1	; 0x01
     8e2:	20 91 4f 21 	lds	r18, 0x214F	; 0x80214f <udi_cdc_rx_buf_sel>
     8e6:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <udi_cdc_rx_trans_ongoing>
     8ea:	81 11       	cpse	r24, r1
     8ec:	10 c0       	rjmp	.+32     	; 0x90e <udi_cdc_rx_start+0x42>
     8ee:	60 91 4d 21 	lds	r22, 0x214D	; 0x80214d <udi_cdc_rx_pos>
     8f2:	70 91 4e 21 	lds	r23, 0x214E	; 0x80214e <udi_cdc_rx_pos+0x1>
     8f6:	02 2f       	mov	r16, r18
     8f8:	10 e0       	ldi	r17, 0x00	; 0
     8fa:	f8 01       	movw	r30, r16
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	e0 5b       	subi	r30, 0xB0	; 176
     902:	fe 4d       	sbci	r31, 0xDE	; 222
     904:	40 81       	ld	r20, Z
     906:	51 81       	ldd	r21, Z+1	; 0x01
     908:	64 17       	cp	r22, r20
     90a:	75 07       	cpc	r23, r21
     90c:	18 f4       	brcc	.+6      	; 0x914 <udi_cdc_rx_start+0x48>
     90e:	9f bf       	out	0x3f, r25	; 63
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	28 c0       	rjmp	.+80     	; 0x964 <udi_cdc_rx_start+0x98>
     914:	10 92 4d 21 	sts	0x214D, r1	; 0x80214d <udi_cdc_rx_pos>
     918:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <udi_cdc_rx_pos+0x1>
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	21 11       	cpse	r18, r1
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <udi_cdc_rx_buf_sel>
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <udi_cdc_rx_trans_ongoing>
     92c:	9f bf       	out	0x3f, r25	; 63
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	c6 df       	rcall	.-116    	; 0x8be <udi_cdc_multi_is_rx_ready>
     932:	88 23       	and	r24, r24
     934:	19 f0       	breq	.+6      	; 0x93c <udi_cdc_rx_start+0x70>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <uart_rx_notify>
     93c:	a8 01       	movw	r20, r16
     93e:	00 24       	eor	r0, r0
     940:	56 95       	lsr	r21
     942:	47 95       	ror	r20
     944:	07 94       	ror	r0
     946:	56 95       	lsr	r21
     948:	47 95       	ror	r20
     94a:	07 94       	ror	r0
     94c:	54 2f       	mov	r21, r20
     94e:	40 2d       	mov	r20, r0
     950:	4c 5a       	subi	r20, 0xAC	; 172
     952:	5e 4d       	sbci	r21, 0xDE	; 222
     954:	0a ee       	ldi	r16, 0xEA	; 234
     956:	14 e0       	ldi	r17, 0x04	; 4
     958:	20 e4       	ldi	r18, 0x40	; 64
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <udd_ep_run>
     964:	0f 90       	pop	r0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	08 95       	ret

00000970 <udi_cdc_data_enable>:
     970:	10 92 d5 21 	sts	0x21D5, r1	; 0x8021d5 <udi_cdc_nb_data_enabled>
     974:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <udi_cdc_tx_trans_ongoing>
     978:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udi_cdc_tx_both_buf_to_send>
     97c:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <udi_cdc_tx_buf_sel>
     980:	e7 ec       	ldi	r30, 0xC7	; 199
     982:	f0 e2       	ldi	r31, 0x20	; 32
     984:	10 82       	st	Z, r1
     986:	11 82       	std	Z+1, r1	; 0x01
     988:	12 82       	std	Z+2, r1	; 0x02
     98a:	13 82       	std	Z+3, r1	; 0x03
     98c:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <udi_cdc_tx_sof_num>
     990:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <udi_cdc_tx_sof_num+0x1>
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	d9 dd       	rcall	.-1102   	; 0x54a <udi_cdc_tx_send>
     998:	10 92 4c 21 	sts	0x214C, r1	; 0x80214c <udi_cdc_rx_trans_ongoing>
     99c:	10 92 4f 21 	sts	0x214F, r1	; 0x80214f <udi_cdc_rx_buf_sel>
     9a0:	e0 e5       	ldi	r30, 0x50	; 80
     9a2:	f1 e2       	ldi	r31, 0x21	; 33
     9a4:	10 82       	st	Z, r1
     9a6:	11 82       	std	Z+1, r1	; 0x01
     9a8:	12 82       	std	Z+2, r1	; 0x02
     9aa:	13 82       	std	Z+3, r1	; 0x03
     9ac:	10 92 4d 21 	sts	0x214D, r1	; 0x80214d <udi_cdc_rx_pos>
     9b0:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <udi_cdc_rx_pos+0x1>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	8a df       	rcall	.-236    	; 0x8cc <udi_cdc_rx_start>
     9b8:	88 23       	and	r24, r24
     9ba:	59 f0       	breq	.+22     	; 0x9d2 <udi_cdc_data_enable+0x62>
     9bc:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <udi_cdc_nb_data_enabled>
     9c0:	9f 5f       	subi	r25, 0xFF	; 255
     9c2:	90 93 d5 21 	sts	0x21D5, r25	; 0x8021d5 <udi_cdc_nb_data_enabled>
     9c6:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <udi_cdc_nb_data_enabled>
     9ca:	91 30       	cpi	r25, 0x01	; 1
     9cc:	11 f4       	brne	.+4      	; 0x9d2 <udi_cdc_data_enable+0x62>
     9ce:	90 93 d4 21 	sts	0x21D4, r25	; 0x8021d4 <udi_cdc_data_running>
     9d2:	08 95       	ret

000009d4 <udi_cdc_data_received>:
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	81 11       	cpse	r24, r1
     9da:	29 c0       	rjmp	.+82     	; 0xa2e <udi_cdc_data_received+0x5a>
     9dc:	80 91 4f 21 	lds	r24, 0x214F	; 0x80214f <udi_cdc_rx_buf_sel>
     9e0:	e1 e0       	ldi	r30, 0x01	; 1
     9e2:	81 11       	cpse	r24, r1
     9e4:	e0 e0       	ldi	r30, 0x00	; 0
     9e6:	84 2f       	mov	r24, r20
     9e8:	61 15       	cp	r22, r1
     9ea:	71 05       	cpc	r23, r1
     9ec:	a9 f4       	brne	.+42     	; 0xa18 <udi_cdc_data_received+0x44>
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	00 24       	eor	r0, r0
     9f2:	f6 95       	lsr	r31
     9f4:	e7 95       	ror	r30
     9f6:	07 94       	ror	r0
     9f8:	f6 95       	lsr	r31
     9fa:	e7 95       	ror	r30
     9fc:	07 94       	ror	r0
     9fe:	fe 2f       	mov	r31, r30
     a00:	e0 2d       	mov	r30, r0
     a02:	af 01       	movw	r20, r30
     a04:	4c 5a       	subi	r20, 0xAC	; 172
     a06:	5e 4d       	sbci	r21, 0xDE	; 222
     a08:	0a ee       	ldi	r16, 0xEA	; 234
     a0a:	14 e0       	ldi	r17, 0x04	; 4
     a0c:	20 e4       	ldi	r18, 0x40	; 64
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <udd_ep_run>
     a16:	0b c0       	rjmp	.+22     	; 0xa2e <udi_cdc_data_received+0x5a>
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	e0 5b       	subi	r30, 0xB0	; 176
     a20:	fe 4d       	sbci	r31, 0xDE	; 222
     a22:	60 83       	st	Z, r22
     a24:	71 83       	std	Z+1, r23	; 0x01
     a26:	10 92 4c 21 	sts	0x214C, r1	; 0x80214c <udi_cdc_rx_trans_ongoing>
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	4f df       	rcall	.-354    	; 0x8cc <udi_cdc_rx_start>
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <udi_cdc_is_rx_ready>:
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	43 cf       	rjmp	.-378    	; 0x8be <udi_cdc_multi_is_rx_ready>
     a38:	08 95       	ret

00000a3a <udi_cdc_multi_getc>:
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	1f 92       	push	r1
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	11 e0       	ldi	r17, 0x01	; 1
     a4c:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udi_cdc_line_coding+0x6>
     a50:	89 30       	cpi	r24, 0x09	; 9
     a52:	09 f0       	breq	.+2      	; 0xa56 <udi_cdc_multi_getc+0x1c>
     a54:	10 e0       	ldi	r17, 0x00	; 0
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	8f b7       	in	r24, 0x3f	; 63
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	f8 94       	cli
     a60:	a9 81       	ldd	r26, Y+1	; 0x01
     a62:	20 91 4d 21 	lds	r18, 0x214D	; 0x80214d <udi_cdc_rx_pos>
     a66:	30 91 4e 21 	lds	r19, 0x214E	; 0x80214e <udi_cdc_rx_pos+0x1>
     a6a:	80 91 4f 21 	lds	r24, 0x214F	; 0x80214f <udi_cdc_rx_buf_sel>
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	fc 01       	movw	r30, r24
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	e0 5b       	subi	r30, 0xB0	; 176
     a78:	fe 4d       	sbci	r31, 0xDE	; 222
     a7a:	60 81       	ld	r22, Z
     a7c:	71 81       	ldd	r23, Z+1	; 0x01
     a7e:	af bf       	out	0x3f, r26	; 63
     a80:	26 17       	cp	r18, r22
     a82:	37 07       	cpc	r19, r23
     a84:	30 f0       	brcs	.+12     	; 0xa92 <udi_cdc_multi_getc+0x58>
     a86:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <udi_cdc_data_running>
     a8a:	81 11       	cpse	r24, r1
     a8c:	e6 cf       	rjmp	.-52     	; 0xa5a <udi_cdc_multi_getc+0x20>
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	21 c0       	rjmp	.+66     	; 0xad4 <udi_cdc_multi_getc+0x9a>
     a92:	fc 01       	movw	r30, r24
     a94:	00 24       	eor	r0, r0
     a96:	f6 95       	lsr	r31
     a98:	e7 95       	ror	r30
     a9a:	07 94       	ror	r0
     a9c:	f6 95       	lsr	r31
     a9e:	e7 95       	ror	r30
     aa0:	07 94       	ror	r0
     aa2:	fe 2f       	mov	r31, r30
     aa4:	e0 2d       	mov	r30, r0
     aa6:	e2 0f       	add	r30, r18
     aa8:	f3 1f       	adc	r31, r19
     aaa:	ec 5a       	subi	r30, 0xAC	; 172
     aac:	fe 4d       	sbci	r31, 0xDE	; 222
     aae:	80 81       	ld	r24, Z
     ab0:	7a 01       	movw	r14, r20
     ab2:	e8 2a       	or	r14, r24
     ab4:	2f 5f       	subi	r18, 0xFF	; 255
     ab6:	3f 4f       	sbci	r19, 0xFF	; 255
     ab8:	20 93 4d 21 	sts	0x214D, r18	; 0x80214d <udi_cdc_rx_pos>
     abc:	30 93 4e 21 	sts	0x214E, r19	; 0x80214e <udi_cdc_rx_pos+0x1>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	04 df       	rcall	.-504    	; 0x8cc <udi_cdc_rx_start>
     ac4:	11 23       	and	r17, r17
     ac6:	21 f0       	breq	.+8      	; 0xad0 <udi_cdc_multi_getc+0x96>
     ac8:	5e 2d       	mov	r21, r14
     aca:	44 27       	eor	r20, r20
     acc:	10 e0       	ldi	r17, 0x00	; 0
     ace:	c5 cf       	rjmp	.-118    	; 0xa5a <udi_cdc_multi_getc+0x20>
     ad0:	8e 2d       	mov	r24, r14
     ad2:	9f 2d       	mov	r25, r15
     ad4:	0f 90       	pop	r0
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <udi_cdc_getc>:
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	aa cf       	rjmp	.-172    	; 0xa3a <udi_cdc_multi_getc>
     ae6:	08 95       	ret

00000ae8 <udi_cdc_multi_read_buf>:
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	1f 92       	push	r1
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	6b 01       	movw	r12, r22
     b00:	7a 01       	movw	r14, r20
     b02:	8f b7       	in	r24, 0x3f	; 63
     b04:	89 83       	std	Y+1, r24	; 0x01
     b06:	f8 94       	cli
     b08:	49 81       	ldd	r20, Y+1	; 0x01
     b0a:	60 91 4d 21 	lds	r22, 0x214D	; 0x80214d <udi_cdc_rx_pos>
     b0e:	70 91 4e 21 	lds	r23, 0x214E	; 0x80214e <udi_cdc_rx_pos+0x1>
     b12:	20 91 4f 21 	lds	r18, 0x214F	; 0x80214f <udi_cdc_rx_buf_sel>
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	f9 01       	movw	r30, r18
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	e0 5b       	subi	r30, 0xB0	; 176
     b20:	fe 4d       	sbci	r31, 0xDE	; 222
     b22:	80 81       	ld	r24, Z
     b24:	91 81       	ldd	r25, Z+1	; 0x01
     b26:	4f bf       	out	0x3f, r20	; 63
     b28:	68 17       	cp	r22, r24
     b2a:	79 07       	cpc	r23, r25
     b2c:	38 f0       	brcs	.+14     	; 0xb3c <udi_cdc_multi_read_buf+0x54>
     b2e:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <udi_cdc_data_running>
     b32:	81 11       	cpse	r24, r1
     b34:	e6 cf       	rjmp	.-52     	; 0xb02 <udi_cdc_multi_read_buf+0x1a>
     b36:	8e 2d       	mov	r24, r14
     b38:	9f 2d       	mov	r25, r15
     b3a:	35 c0       	rjmp	.+106    	; 0xba6 <udi_cdc_multi_read_buf+0xbe>
     b3c:	f9 01       	movw	r30, r18
     b3e:	ee 0f       	add	r30, r30
     b40:	ff 1f       	adc	r31, r31
     b42:	e0 5b       	subi	r30, 0xB0	; 176
     b44:	fe 4d       	sbci	r31, 0xDE	; 222
     b46:	80 81       	ld	r24, Z
     b48:	91 81       	ldd	r25, Z+1	; 0x01
     b4a:	86 1b       	sub	r24, r22
     b4c:	97 0b       	sbc	r25, r23
     b4e:	87 01       	movw	r16, r14
     b50:	8e 15       	cp	r24, r14
     b52:	9f 05       	cpc	r25, r15
     b54:	08 f4       	brcc	.+2      	; 0xb58 <udi_cdc_multi_read_buf+0x70>
     b56:	8c 01       	movw	r16, r24
     b58:	00 24       	eor	r0, r0
     b5a:	36 95       	lsr	r19
     b5c:	27 95       	ror	r18
     b5e:	07 94       	ror	r0
     b60:	36 95       	lsr	r19
     b62:	27 95       	ror	r18
     b64:	07 94       	ror	r0
     b66:	32 2f       	mov	r19, r18
     b68:	20 2d       	mov	r18, r0
     b6a:	62 0f       	add	r22, r18
     b6c:	73 1f       	adc	r23, r19
     b6e:	6c 5a       	subi	r22, 0xAC	; 172
     b70:	7e 4d       	sbci	r23, 0xDE	; 222
     b72:	a8 01       	movw	r20, r16
     b74:	c6 01       	movw	r24, r12
     b76:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <memcpy>
     b7a:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <udi_cdc_rx_pos>
     b7e:	90 91 4e 21 	lds	r25, 0x214E	; 0x80214e <udi_cdc_rx_pos+0x1>
     b82:	80 0f       	add	r24, r16
     b84:	91 1f       	adc	r25, r17
     b86:	80 93 4d 21 	sts	0x214D, r24	; 0x80214d <udi_cdc_rx_pos>
     b8a:	90 93 4e 21 	sts	0x214E, r25	; 0x80214e <udi_cdc_rx_pos+0x1>
     b8e:	c0 0e       	add	r12, r16
     b90:	d1 1e       	adc	r13, r17
     b92:	e0 1a       	sub	r14, r16
     b94:	f1 0a       	sbc	r15, r17
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	99 de       	rcall	.-718    	; 0x8cc <udi_cdc_rx_start>
     b9a:	e1 14       	cp	r14, r1
     b9c:	f1 04       	cpc	r15, r1
     b9e:	09 f0       	breq	.+2      	; 0xba2 <udi_cdc_multi_read_buf+0xba>
     ba0:	b0 cf       	rjmp	.-160    	; 0xb02 <udi_cdc_multi_read_buf+0x1a>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0f 90       	pop	r0
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	08 95       	ret

00000bba <udi_cdc_read_buf>:
     bba:	ab 01       	movw	r20, r22
     bbc:	bc 01       	movw	r22, r24
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	93 cf       	rjmp	.-218    	; 0xae8 <udi_cdc_multi_read_buf>
     bc2:	08 95       	ret

00000bc4 <udi_cdc_multi_get_free_tx_buffer>:
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	1f 92       	push	r1
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	8f b7       	in	r24, 0x3f	; 63
     bd0:	89 83       	std	Y+1, r24	; 0x01
     bd2:	f8 94       	cli
     bd4:	99 81       	ldd	r25, Y+1	; 0x01
     bd6:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <udi_cdc_tx_buf_sel>
     bda:	e8 2f       	mov	r30, r24
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	e9 53       	subi	r30, 0x39	; 57
     be4:	ff 4d       	sbci	r31, 0xDF	; 223
     be6:	20 81       	ld	r18, Z
     be8:	31 81       	ldd	r19, Z+1	; 0x01
     bea:	20 34       	cpi	r18, 0x40	; 64
     bec:	31 05       	cpc	r19, r1
     bee:	89 f4       	brne	.+34     	; 0xc12 <udi_cdc_multi_get_free_tx_buffer+0x4e>
     bf0:	40 91 c3 20 	lds	r20, 0x20C3	; 0x8020c3 <udi_cdc_tx_trans_ongoing>
     bf4:	41 11       	cpse	r20, r1
     bf6:	0d c0       	rjmp	.+26     	; 0xc12 <udi_cdc_multi_get_free_tx_buffer+0x4e>
     bf8:	40 91 c2 20 	lds	r20, 0x20C2	; 0x8020c2 <udi_cdc_tx_both_buf_to_send>
     bfc:	41 11       	cpse	r20, r1
     bfe:	09 c0       	rjmp	.+18     	; 0xc12 <udi_cdc_multi_get_free_tx_buffer+0x4e>
     c00:	21 e0       	ldi	r18, 0x01	; 1
     c02:	20 93 c2 20 	sts	0x20C2, r18	; 0x8020c2 <udi_cdc_tx_both_buf_to_send>
     c06:	81 11       	cpse	r24, r1
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	20 93 c6 20 	sts	0x20C6, r18	; 0x8020c6 <udi_cdc_tx_buf_sel>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	9f bf       	out	0x3f, r25	; 63
     c14:	80 e4       	ldi	r24, 0x40	; 64
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	82 1b       	sub	r24, r18
     c1a:	93 0b       	sbc	r25, r19
     c1c:	0f 90       	pop	r0
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     c24:	cf df       	rcall	.-98     	; 0xbc4 <udi_cdc_multi_get_free_tx_buffer>
     c26:	21 e0       	ldi	r18, 0x01	; 1
     c28:	89 2b       	or	r24, r25
     c2a:	09 f4       	brne	.+2      	; 0xc2e <udi_cdc_multi_is_tx_ready+0xa>
     c2c:	20 e0       	ldi	r18, 0x00	; 0
}
     c2e:	82 2f       	mov	r24, r18
     c30:	08 95       	ret

00000c32 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	f7 cf       	rjmp	.-18     	; 0xc24 <udi_cdc_multi_is_tx_ready>
}
     c36:	08 95       	ret

00000c38 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	1f 92       	push	r1
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	f6 2e       	mov	r15, r22
     c4a:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     c4c:	01 e0       	ldi	r16, 0x01	; 1
     c4e:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udi_cdc_line_coding+0x6>
     c52:	89 30       	cpi	r24, 0x09	; 9
     c54:	09 f0       	breq	.+2      	; 0xc58 <udi_cdc_multi_putc+0x20>
     c56:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	e4 df       	rcall	.-56     	; 0xc24 <udi_cdc_multi_is_tx_ready>
     c5c:	81 11       	cpse	r24, r1
     c5e:	07 c0       	rjmp	.+14     	; 0xc6e <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
     c60:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <udi_cdc_data_running>
     c64:	81 11       	cpse	r24, r1
     c66:	f8 cf       	rjmp	.-16     	; 0xc58 <udi_cdc_multi_putc+0x20>
			return false;
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	2d c0       	rjmp	.+90     	; 0xcc8 <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c6e:	8f b7       	in	r24, 0x3f	; 63
     c70:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c72:	f8 94       	cli
	return flags;
     c74:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     c76:	e0 91 c6 20 	lds	r30, 0x20C6	; 0x8020c6 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	df 01       	movw	r26, r30
     c7e:	aa 0f       	add	r26, r26
     c80:	bb 1f       	adc	r27, r27
     c82:	a9 53       	subi	r26, 0x39	; 57
     c84:	bf 4d       	sbci	r27, 0xDF	; 223
     c86:	8d 91       	ld	r24, X+
     c88:	9c 91       	ld	r25, X
     c8a:	11 97       	sbiw	r26, 0x01	; 1
     c8c:	ac 01       	movw	r20, r24
     c8e:	4f 5f       	subi	r20, 0xFF	; 255
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	4d 93       	st	X+, r20
     c94:	5c 93       	st	X, r21
     c96:	00 24       	eor	r0, r0
     c98:	f6 95       	lsr	r31
     c9a:	e7 95       	ror	r30
     c9c:	07 94       	ror	r0
     c9e:	f6 95       	lsr	r31
     ca0:	e7 95       	ror	r30
     ca2:	07 94       	ror	r0
     ca4:	fe 2f       	mov	r31, r30
     ca6:	e0 2d       	mov	r30, r0
     ca8:	8e 0f       	add	r24, r30
     caa:	9f 1f       	adc	r25, r31
     cac:	fc 01       	movw	r30, r24
     cae:	e4 53       	subi	r30, 0x34	; 52
     cb0:	ff 4d       	sbci	r31, 0xDF	; 223
     cb2:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cb4:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     cb6:	00 23       	and	r16, r16
     cb8:	29 f0       	breq	.+10     	; 0xcc4 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     cba:	f1 2e       	mov	r15, r17
     cbc:	11 0f       	add	r17, r17
     cbe:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     cc0:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     cc2:	ca cf       	rjmp	.-108    	; 0xc58 <udi_cdc_multi_putc+0x20>
	}
	return true;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
}
     cc8:	0f 90       	pop	r0
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	08 95       	ret

00000cd6 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     cd6:	bc 01       	movw	r22, r24
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	ae cf       	rjmp	.-164    	; 0xc38 <udi_cdc_multi_putc>
}
     cdc:	08 95       	ret

00000cde <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
     cde:	5f 92       	push	r5
     ce0:	6f 92       	push	r6
     ce2:	7f 92       	push	r7
     ce4:	8f 92       	push	r8
     ce6:	9f 92       	push	r9
     ce8:	af 92       	push	r10
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	1f 92       	push	r1
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	4b 01       	movw	r8, r22
     d04:	5a 01       	movw	r10, r20

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
     d06:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udi_cdc_line_coding+0x6>
     d0a:	89 30       	cpi	r24, 0x09	; 9
     d0c:	11 f4       	brne	.+4      	; 0xd12 <udi_cdc_multi_write_buf+0x34>
		size *=2;
     d0e:	aa 0c       	add	r10, r10
     d10:	bb 1c       	adc	r11, r11

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
     d12:	68 94       	set
     d14:	66 24       	eor	r6, r6
     d16:	66 f8       	bld	r6, 6
     d18:	71 2c       	mov	r7, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	83 df       	rcall	.-250    	; 0xc24 <udi_cdc_multi_is_tx_ready>
     d1e:	81 11       	cpse	r24, r1
     d20:	07 c0       	rjmp	.+14     	; 0xd30 <udi_cdc_multi_write_buf+0x52>
		if (!udi_cdc_data_running) {
     d22:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <udi_cdc_data_running>
     d26:	81 11       	cpse	r24, r1
     d28:	f8 cf       	rjmp	.-16     	; 0xd1a <udi_cdc_multi_write_buf+0x3c>
     d2a:	8a 2d       	mov	r24, r10
     d2c:	9b 2d       	mov	r25, r11
     d2e:	3a c0       	rjmp	.+116    	; 0xda4 <udi_cdc_multi_write_buf+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d30:	8f b7       	in	r24, 0x3f	; 63
     d32:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d34:	f8 94       	cli
	return flags;
     d36:	59 80       	ldd	r5, Y+1	; 0x01
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     d38:	00 91 c6 20 	lds	r16, 0x20C6	; 0x8020c6 <udi_cdc_tx_buf_sel>
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     d3c:	10 e0       	ldi	r17, 0x00	; 0
     d3e:	f8 01       	movw	r30, r16
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	e9 53       	subi	r30, 0x39	; 57
     d46:	ff 4d       	sbci	r31, 0xDF	; 223
     d48:	e0 80       	ld	r14, Z
     d4a:	f1 80       	ldd	r15, Z+1	; 0x01
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
     d4c:	c3 01       	movw	r24, r6
     d4e:	8e 19       	sub	r24, r14
     d50:	9f 09       	sbc	r25, r15
     d52:	65 01       	movw	r12, r10
     d54:	8a 15       	cp	r24, r10
     d56:	9b 05       	cpc	r25, r11
     d58:	08 f4       	brcc	.+2      	; 0xd5c <udi_cdc_multi_write_buf+0x7e>
     d5a:	6c 01       	movw	r12, r24
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
     d5c:	c8 01       	movw	r24, r16
     d5e:	00 24       	eor	r0, r0
     d60:	96 95       	lsr	r25
     d62:	87 95       	ror	r24
     d64:	07 94       	ror	r0
     d66:	96 95       	lsr	r25
     d68:	87 95       	ror	r24
     d6a:	07 94       	ror	r0
     d6c:	98 2f       	mov	r25, r24
     d6e:	80 2d       	mov	r24, r0
     d70:	8e 0d       	add	r24, r14
     d72:	9f 1d       	adc	r25, r15
     d74:	a6 01       	movw	r20, r12
     d76:	b4 01       	movw	r22, r8
     d78:	84 53       	subi	r24, 0x34	; 52
     d7a:	9f 4d       	sbci	r25, 0xDF	; 223
     d7c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <memcpy>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
     d80:	00 0f       	add	r16, r16
     d82:	11 1f       	adc	r17, r17
     d84:	f8 01       	movw	r30, r16
     d86:	e9 53       	subi	r30, 0x39	; 57
     d88:	ff 4d       	sbci	r31, 0xDF	; 223
     d8a:	ec 0c       	add	r14, r12
     d8c:	fd 1c       	adc	r15, r13
     d8e:	e0 82       	st	Z, r14
     d90:	f1 82       	std	Z+1, r15	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d92:	5f be       	out	0x3f, r5	; 63
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
     d94:	8c 0c       	add	r8, r12
     d96:	9d 1c       	adc	r9, r13
	size -= copy_nb;
     d98:	ac 18       	sub	r10, r12
     d9a:	bd 08       	sbc	r11, r13

	if (size) {
     d9c:	09 f0       	breq	.+2      	; 0xda0 <udi_cdc_multi_write_buf+0xc2>
     d9e:	bd cf       	rjmp	.-134    	; 0xd1a <udi_cdc_multi_write_buf+0x3c>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
}
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	df 90       	pop	r13
     db4:	cf 90       	pop	r12
     db6:	bf 90       	pop	r11
     db8:	af 90       	pop	r10
     dba:	9f 90       	pop	r9
     dbc:	8f 90       	pop	r8
     dbe:	7f 90       	pop	r7
     dc0:	6f 90       	pop	r6
     dc2:	5f 90       	pop	r5
     dc4:	08 95       	ret

00000dc6 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
     dc6:	ab 01       	movw	r20, r22
	return udi_cdc_multi_write_buf(0, buf, size);
     dc8:	bc 01       	movw	r22, r24
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	88 cf       	rjmp	.-240    	; 0xcde <udi_cdc_multi_write_buf>
}
     dce:	08 95       	ret

00000dd0 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     dd0:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <udc_ptr_conf>
     dd4:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
     dd8:	01 90       	ld	r0, Z+
     dda:	f0 81       	ld	r31, Z
     ddc:	e0 2d       	mov	r30, r0
     dde:	22 81       	ldd	r18, Z+2	; 0x02
     de0:	33 81       	ldd	r19, Z+3	; 0x03
     de2:	2e 0f       	add	r18, r30
     de4:	3f 1f       	adc	r19, r31
     de6:	fc 01       	movw	r30, r24
     de8:	40 81       	ld	r20, Z
     dea:	e4 0f       	add	r30, r20
     dec:	f1 1d       	adc	r31, r1
     dee:	e2 17       	cp	r30, r18
     df0:	f3 07       	cpc	r31, r19
     df2:	b8 f4       	brcc	.+46     	; 0xe22 <udc_next_desc_in_iface+0x52>
     df4:	81 81       	ldd	r24, Z+1	; 0x01
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	b9 f0       	breq	.+46     	; 0xe28 <udc_next_desc_in_iface+0x58>
     dfa:	86 13       	cpse	r24, r22
     dfc:	09 c0       	rjmp	.+18     	; 0xe10 <udc_next_desc_in_iface+0x40>
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <udc_next_desc_in_iface+0x3a>
     e00:	81 81       	ldd	r24, Z+1	; 0x01
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	a1 f0       	breq	.+40     	; 0xe2e <udc_next_desc_in_iface+0x5e>
     e06:	86 13       	cpse	r24, r22
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <udc_next_desc_in_iface+0x40>
     e0a:	8e 2f       	mov	r24, r30
     e0c:	9f 2f       	mov	r25, r31
     e0e:	08 95       	ret
     e10:	80 81       	ld	r24, Z
     e12:	e8 0f       	add	r30, r24
     e14:	f1 1d       	adc	r31, r1
     e16:	e2 17       	cp	r30, r18
     e18:	f3 07       	cpc	r31, r19
     e1a:	90 f3       	brcs	.-28     	; 0xe00 <udc_next_desc_in_iface+0x30>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	08 95       	ret
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	08 95       	ret
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	08 95       	ret
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	08 95       	ret

00000e34 <udc_valid_address>:
     e34:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x2>
     e38:	8f 77       	andi	r24, 0x7F	; 127
     e3a:	0c 94 0d 11 	jmp	0x221a	; 0x221a <udd_set_address>
     e3e:	08 95       	ret

00000e40 <udc_update_iface_desc>:
     e40:	90 91 f4 21 	lds	r25, 0x21F4	; 0x8021f4 <udc_num_configuration>
     e44:	99 23       	and	r25, r25
     e46:	81 f1       	breq	.+96     	; 0xea8 <udc_update_iface_desc+0x68>
     e48:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <udc_ptr_conf>
     e4c:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
     e50:	01 90       	ld	r0, Z+
     e52:	f0 81       	ld	r31, Z
     e54:	e0 2d       	mov	r30, r0
     e56:	94 81       	ldd	r25, Z+4	; 0x04
     e58:	89 17       	cp	r24, r25
     e5a:	40 f5       	brcc	.+80     	; 0xeac <udc_update_iface_desc+0x6c>
     e5c:	e0 93 f0 21 	sts	0x21F0, r30	; 0x8021f0 <udc_ptr_iface>
     e60:	f0 93 f1 21 	sts	0x21F1, r31	; 0x8021f1 <udc_ptr_iface+0x1>
     e64:	22 81       	ldd	r18, Z+2	; 0x02
     e66:	33 81       	ldd	r19, Z+3	; 0x03
     e68:	2e 0f       	add	r18, r30
     e6a:	3f 1f       	adc	r19, r31
     e6c:	e2 17       	cp	r30, r18
     e6e:	f3 07       	cpc	r31, r19
     e70:	f8 f4       	brcc	.+62     	; 0xeb0 <udc_update_iface_desc+0x70>
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	94 30       	cpi	r25, 0x04	; 4
     e76:	61 f4       	brne	.+24     	; 0xe90 <udc_update_iface_desc+0x50>
     e78:	92 81       	ldd	r25, Z+2	; 0x02
     e7a:	98 13       	cpse	r25, r24
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <udc_update_iface_desc+0x50>
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	96 13       	cpse	r25, r22
     e82:	06 c0       	rjmp	.+12     	; 0xe90 <udc_update_iface_desc+0x50>
     e84:	e0 93 f0 21 	sts	0x21F0, r30	; 0x8021f0 <udc_ptr_iface>
     e88:	f0 93 f1 21 	sts	0x21F1, r31	; 0x8021f1 <udc_ptr_iface+0x1>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	08 95       	ret
     e90:	90 81       	ld	r25, Z
     e92:	e9 0f       	add	r30, r25
     e94:	f1 1d       	adc	r31, r1
     e96:	e2 17       	cp	r30, r18
     e98:	f3 07       	cpc	r31, r19
     e9a:	58 f3       	brcs	.-42     	; 0xe72 <udc_update_iface_desc+0x32>
     e9c:	e0 93 f0 21 	sts	0x21F0, r30	; 0x8021f0 <udc_ptr_iface>
     ea0:	f0 93 f1 21 	sts	0x21F1, r31	; 0x8021f1 <udc_ptr_iface+0x1>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	08 95       	ret
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	08 95       	ret
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	08 95       	ret
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	08 95       	ret

00000eb4 <udc_iface_disable>:
     eb4:	ef 92       	push	r14
     eb6:	ff 92       	push	r15
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	c8 2f       	mov	r28, r24
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	be df       	rcall	.-132    	; 0xe40 <udc_update_iface_desc>
     ec4:	18 2f       	mov	r17, r24
     ec6:	88 23       	and	r24, r24
     ec8:	81 f1       	breq	.+96     	; 0xf2a <udc_iface_disable+0x76>
     eca:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
     ece:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
     ed2:	ec 2f       	mov	r30, r28
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	ee 0f       	add	r30, r30
     ed8:	ff 1f       	adc	r31, r31
     eda:	12 96       	adiw	r26, 0x02	; 2
     edc:	8d 91       	ld	r24, X+
     ede:	9c 91       	ld	r25, X
     ee0:	13 97       	sbiw	r26, 0x03	; 3
     ee2:	e8 0f       	add	r30, r24
     ee4:	f9 1f       	adc	r31, r25
     ee6:	e0 80       	ld	r14, Z
     ee8:	f1 80       	ldd	r15, Z+1	; 0x01
     eea:	d7 01       	movw	r26, r14
     eec:	16 96       	adiw	r26, 0x06	; 6
     eee:	ed 91       	ld	r30, X+
     ef0:	fc 91       	ld	r31, X
     ef2:	17 97       	sbiw	r26, 0x07	; 7
     ef4:	19 95       	eicall
     ef6:	68 2f       	mov	r22, r24
     ef8:	8c 2f       	mov	r24, r28
     efa:	a2 df       	rcall	.-188    	; 0xe40 <udc_update_iface_desc>
     efc:	18 2f       	mov	r17, r24
     efe:	88 23       	and	r24, r24
     f00:	a1 f0       	breq	.+40     	; 0xf2a <udc_iface_disable+0x76>
     f02:	c0 91 f0 21 	lds	r28, 0x21F0	; 0x8021f0 <udc_ptr_iface>
     f06:	d0 91 f1 21 	lds	r29, 0x21F1	; 0x8021f1 <udc_ptr_iface+0x1>
     f0a:	65 e0       	ldi	r22, 0x05	; 5
     f0c:	ce 01       	movw	r24, r28
     f0e:	60 df       	rcall	.-320    	; 0xdd0 <udc_next_desc_in_iface>
     f10:	ec 01       	movw	r28, r24
     f12:	89 2b       	or	r24, r25
     f14:	21 f0       	breq	.+8      	; 0xf1e <udc_iface_disable+0x6a>
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	0e 94 0c 13 	call	0x2618	; 0x2618 <udd_ep_free>
     f1c:	f6 cf       	rjmp	.-20     	; 0xf0a <udc_iface_disable+0x56>
     f1e:	d7 01       	movw	r26, r14
     f20:	12 96       	adiw	r26, 0x02	; 2
     f22:	ed 91       	ld	r30, X+
     f24:	fc 91       	ld	r31, X
     f26:	13 97       	sbiw	r26, 0x03	; 3
     f28:	19 95       	eicall
     f2a:	81 2f       	mov	r24, r17
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	08 95       	ret

00000f38 <udc_iface_enable>:
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	18 2f       	mov	r17, r24
     f40:	7f df       	rcall	.-258    	; 0xe40 <udc_update_iface_desc>
     f42:	88 23       	and	r24, r24
     f44:	41 f1       	breq	.+80     	; 0xf96 <udc_iface_enable+0x5e>
     f46:	c0 91 f0 21 	lds	r28, 0x21F0	; 0x8021f0 <udc_ptr_iface>
     f4a:	d0 91 f1 21 	lds	r29, 0x21F1	; 0x8021f1 <udc_ptr_iface+0x1>
     f4e:	65 e0       	ldi	r22, 0x05	; 5
     f50:	ce 01       	movw	r24, r28
     f52:	3e df       	rcall	.-388    	; 0xdd0 <udc_next_desc_in_iface>
     f54:	ec 01       	movw	r28, r24
     f56:	89 2b       	or	r24, r25
     f58:	49 f0       	breq	.+18     	; 0xf6c <udc_iface_enable+0x34>
     f5a:	4c 81       	ldd	r20, Y+4	; 0x04
     f5c:	5d 81       	ldd	r21, Y+5	; 0x05
     f5e:	6b 81       	ldd	r22, Y+3	; 0x03
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	0e 94 22 11 	call	0x2244	; 0x2244 <udd_ep_alloc>
     f66:	81 11       	cpse	r24, r1
     f68:	f2 cf       	rjmp	.-28     	; 0xf4e <udc_iface_enable+0x16>
     f6a:	15 c0       	rjmp	.+42     	; 0xf96 <udc_iface_enable+0x5e>
     f6c:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
     f70:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
     f74:	e1 2f       	mov	r30, r17
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	12 96       	adiw	r26, 0x02	; 2
     f7e:	8d 91       	ld	r24, X+
     f80:	9c 91       	ld	r25, X
     f82:	13 97       	sbiw	r26, 0x03	; 3
     f84:	e8 0f       	add	r30, r24
     f86:	f9 1f       	adc	r31, r25
     f88:	01 90       	ld	r0, Z+
     f8a:	f0 81       	ld	r31, Z
     f8c:	e0 2d       	mov	r30, r0
     f8e:	01 90       	ld	r0, Z+
     f90:	f0 81       	ld	r31, Z
     f92:	e0 2d       	mov	r30, r0
     f94:	19 95       	eicall
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	08 95       	ret

00000f9e <udc_start>:
     f9e:	0c 94 88 10 	jmp	0x2110	; 0x2110 <udd_enable>
     fa2:	08 95       	ret

00000fa4 <udc_reset>:
     fa4:	cf 93       	push	r28
     fa6:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
     faa:	88 23       	and	r24, r24
     fac:	c1 f0       	breq	.+48     	; 0xfde <udc_reset+0x3a>
     fae:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <udc_ptr_conf>
     fb2:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
     fb6:	01 90       	ld	r0, Z+
     fb8:	f0 81       	ld	r31, Z
     fba:	e0 2d       	mov	r30, r0
     fbc:	84 81       	ldd	r24, Z+4	; 0x04
     fbe:	88 23       	and	r24, r24
     fc0:	71 f0       	breq	.+28     	; 0xfde <udc_reset+0x3a>
     fc2:	c0 e0       	ldi	r28, 0x00	; 0
     fc4:	8c 2f       	mov	r24, r28
     fc6:	76 df       	rcall	.-276    	; 0xeb4 <udc_iface_disable>
     fc8:	cf 5f       	subi	r28, 0xFF	; 255
     fca:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <udc_ptr_conf>
     fce:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
     fd2:	01 90       	ld	r0, Z+
     fd4:	f0 81       	ld	r31, Z
     fd6:	e0 2d       	mov	r30, r0
     fd8:	84 81       	ldd	r24, Z+4	; 0x04
     fda:	c8 17       	cp	r28, r24
     fdc:	98 f3       	brcs	.-26     	; 0xfc4 <udc_reset+0x20>
     fde:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <udc_num_configuration>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	80 93 f8 21 	sts	0x21F8, r24	; 0x8021f8 <udc_device_status>
     fea:	90 93 f9 21 	sts	0x21F9, r25	; 0x8021f9 <udc_device_status+0x1>
     fee:	cf 91       	pop	r28
     ff0:	08 95       	ret

00000ff2 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     ff2:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     ff4:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
     ff8:	88 23       	and	r24, r24
     ffa:	49 f1       	breq	.+82     	; 0x104e <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ffc:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1000:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1004:	ed 91       	ld	r30, X+
    1006:	fc 91       	ld	r31, X
    1008:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    100a:	84 81       	ldd	r24, Z+4	; 0x04
    100c:	88 23       	and	r24, r24
    100e:	f9 f0       	breq	.+62     	; 0x104e <udc_sof_notify+0x5c>
    1010:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1012:	ec 2f       	mov	r30, r28
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	12 96       	adiw	r26, 0x02	; 2
    101c:	8d 91       	ld	r24, X+
    101e:	9c 91       	ld	r25, X
    1020:	13 97       	sbiw	r26, 0x03	; 3
    1022:	e8 0f       	add	r30, r24
    1024:	f9 1f       	adc	r31, r25
    1026:	01 90       	ld	r0, Z+
    1028:	f0 81       	ld	r31, Z
    102a:	e0 2d       	mov	r30, r0
    102c:	00 84       	ldd	r0, Z+8	; 0x08
    102e:	f1 85       	ldd	r31, Z+9	; 0x09
    1030:	e0 2d       	mov	r30, r0
    1032:	30 97       	sbiw	r30, 0x00	; 0
    1034:	09 f0       	breq	.+2      	; 0x1038 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1036:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1038:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    103a:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    103e:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1042:	ed 91       	ld	r30, X+
    1044:	fc 91       	ld	r31, X
    1046:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1048:	84 81       	ldd	r24, Z+4	; 0x04
    104a:	c8 17       	cp	r28, r24
    104c:	10 f3       	brcs	.-60     	; 0x1012 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    105a:	e0 e9       	ldi	r30, 0x90	; 144
    105c:	f3 e2       	ldi	r31, 0x23	; 35
    105e:	12 86       	std	Z+10, r1	; 0x0a
    1060:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1062:	14 86       	std	Z+12, r1	; 0x0c
    1064:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1066:	16 86       	std	Z+14, r1	; 0x0e
    1068:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    106a:	80 81       	ld	r24, Z
    106c:	88 23       	and	r24, r24
    106e:	0c f0       	brlt	.+2      	; 0x1072 <udc_process_setup+0x20>
    1070:	64 c2       	rjmp	.+1224   	; 0x153a <udc_process_setup+0x4e8>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1072:	20 91 96 23 	lds	r18, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
    1076:	30 91 97 23 	lds	r19, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
    107a:	21 15       	cp	r18, r1
    107c:	31 05       	cpc	r19, r1
    107e:	09 f0       	breq	.+2      	; 0x1082 <udc_process_setup+0x30>
    1080:	61 c2       	rjmp	.+1218   	; 0x1544 <udc_process_setup+0x4f2>
    1082:	57 c2       	rjmp	.+1198   	; 0x1532 <udc_process_setup+0x4e0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1084:	8f 71       	andi	r24, 0x1F	; 31
    1086:	09 f0       	breq	.+2      	; 0x108a <udc_process_setup+0x38>
    1088:	aa c0       	rjmp	.+340    	; 0x11de <udc_process_setup+0x18c>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    108a:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <udd_g_ctrlreq+0x1>
    108e:	96 30       	cpi	r25, 0x06	; 6
    1090:	81 f0       	breq	.+32     	; 0x10b2 <udc_process_setup+0x60>
    1092:	98 30       	cpi	r25, 0x08	; 8
    1094:	09 f4       	brne	.+2      	; 0x1098 <udc_process_setup+0x46>
    1096:	98 c0       	rjmp	.+304    	; 0x11c8 <udc_process_setup+0x176>
    1098:	91 11       	cpse	r25, r1
    109a:	a1 c0       	rjmp	.+322    	; 0x11de <udc_process_setup+0x18c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <udc_process_setup+0x52>
    10a2:	d0 c1       	rjmp	.+928    	; 0x1444 <udc_process_setup+0x3f2>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    10a4:	62 e0       	ldi	r22, 0x02	; 2
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	88 ef       	ldi	r24, 0xF8	; 248
    10aa:	91 e2       	ldi	r25, 0x21	; 33
    10ac:	0e 94 1b 11 	call	0x2236	; 0x2236 <udd_set_setup_payload>
    10b0:	4e c2       	rjmp	.+1180   	; 0x154e <udc_process_setup+0x4fc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    10b2:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x2>
    10b6:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    10ba:	29 2f       	mov	r18, r25
    10bc:	33 27       	eor	r19, r19
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	b1 f0       	breq	.+44     	; 0x10f0 <udc_process_setup+0x9e>
    10c4:	24 f4       	brge	.+8      	; 0x10ce <udc_process_setup+0x7c>
    10c6:	21 30       	cpi	r18, 0x01	; 1
    10c8:	31 05       	cpc	r19, r1
    10ca:	41 f0       	breq	.+16     	; 0x10dc <udc_process_setup+0x8a>
    10cc:	b2 c1       	rjmp	.+868    	; 0x1432 <udc_process_setup+0x3e0>
    10ce:	23 30       	cpi	r18, 0x03	; 3
    10d0:	31 05       	cpc	r19, r1
    10d2:	f1 f1       	breq	.+124    	; 0x1150 <udc_process_setup+0xfe>
    10d4:	2f 30       	cpi	r18, 0x0F	; 15
    10d6:	31 05       	cpc	r19, r1
    10d8:	61 f1       	breq	.+88     	; 0x1132 <udc_process_setup+0xe0>
    10da:	ab c1       	rjmp	.+854    	; 0x1432 <udc_process_setup+0x3e0>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    10dc:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config>
    10e0:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    10e4:	dc 01       	movw	r26, r24
    10e6:	6c 91       	ld	r22, X
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	0e 94 1b 11 	call	0x2236	; 0x2236 <udd_set_setup_payload>
    10ee:	5d c0       	rjmp	.+186    	; 0x11aa <udc_process_setup+0x158>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    10f0:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    10f4:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
    10f8:	21 89       	ldd	r18, Z+17	; 0x11
    10fa:	82 17       	cp	r24, r18
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <udc_process_setup+0xae>
    10fe:	a2 c1       	rjmp	.+836    	; 0x1444 <udc_process_setup+0x3f2>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1100:	99 27       	eor	r25, r25
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    110e:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    1112:	e8 0f       	add	r30, r24
    1114:	f9 1f       	adc	r31, r25
    1116:	80 81       	ld	r24, Z
    1118:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    111a:	fc 01       	movw	r30, r24
    111c:	62 81       	ldd	r22, Z+2	; 0x02
    111e:	73 81       	ldd	r23, Z+3	; 0x03
    1120:	0e 94 1b 11 	call	0x2236	; 0x2236 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1124:	e0 91 98 23 	lds	r30, 0x2398	; 0x802398 <udd_g_ctrlreq+0x8>
    1128:	f0 91 99 23 	lds	r31, 0x2399	; 0x802399 <udd_g_ctrlreq+0x9>
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	81 83       	std	Z+1, r24	; 0x01
    1130:	3c c0       	rjmp	.+120    	; 0x11aa <udc_process_setup+0x158>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1132:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <udc_config+0x4>
    1136:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <udc_config+0x5>
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	09 f4       	brne	.+2      	; 0x1140 <udc_process_setup+0xee>
    113e:	82 c1       	rjmp	.+772    	; 0x1444 <udc_process_setup+0x3f2>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1140:	dc 01       	movw	r26, r24
    1142:	12 96       	adiw	r26, 0x02	; 2
    1144:	6d 91       	ld	r22, X+
    1146:	7c 91       	ld	r23, X
    1148:	13 97       	sbiw	r26, 0x03	; 3
    114a:	0e 94 1b 11 	call	0x2236	; 0x2236 <udd_set_setup_payload>
    114e:	2d c0       	rjmp	.+90     	; 0x11aa <udc_process_setup+0x158>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1150:	99 27       	eor	r25, r25
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	79 f0       	breq	.+30     	; 0x1176 <udc_process_setup+0x124>
    1158:	38 f0       	brcs	.+14     	; 0x1168 <udc_process_setup+0x116>
    115a:	02 97       	sbiw	r24, 0x02	; 2
    115c:	09 f0       	breq	.+2      	; 0x1160 <udc_process_setup+0x10e>
    115e:	72 c1       	rjmp	.+740    	; 0x1444 <udc_process_setup+0x3f2>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1160:	88 e9       	ldi	r24, 0x98	; 152
    1162:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1164:	2f e0       	ldi	r18, 0x0F	; 15
    1166:	0a c0       	rjmp	.+20     	; 0x117c <udc_process_setup+0x12a>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1168:	64 e0       	ldi	r22, 0x04	; 4
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	82 eb       	ldi	r24, 0xB2	; 178
    116e:	90 e2       	ldi	r25, 0x20	; 32
    1170:	0e 94 1b 11 	call	0x2236	; 0x2236 <udd_set_setup_payload>
    1174:	1a c0       	rjmp	.+52     	; 0x11aa <udc_process_setup+0x158>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1176:	88 ea       	ldi	r24, 0xA8	; 168
    1178:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    117a:	29 e0       	ldi	r18, 0x09	; 9
    117c:	38 2f       	mov	r19, r24
    117e:	aa e7       	ldi	r26, 0x7A	; 122
    1180:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1182:	e8 2f       	mov	r30, r24
    1184:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1186:	81 91       	ld	r24, Z+
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	8d 93       	st	X+, r24
    118c:	9d 93       	st	X+, r25
    118e:	8e 2f       	mov	r24, r30
    1190:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1192:	82 17       	cp	r24, r18
    1194:	c0 f3       	brcs	.-16     	; 0x1186 <udc_process_setup+0x134>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1196:	62 2f       	mov	r22, r18
    1198:	66 0f       	add	r22, r22
    119a:	6e 5f       	subi	r22, 0xFE	; 254
    119c:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <udc_string_desc>
		udd_set_setup_payload(
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	88 e7       	ldi	r24, 0x78	; 120
    11a4:	90 e2       	ldi	r25, 0x20	; 32
    11a6:	0e 94 1b 11 	call	0x2236	; 0x2236 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    11aa:	e0 e9       	ldi	r30, 0x90	; 144
    11ac:	f3 e2       	ldi	r31, 0x23	; 35
    11ae:	86 81       	ldd	r24, Z+6	; 0x06
    11b0:	97 81       	ldd	r25, Z+7	; 0x07
    11b2:	22 85       	ldd	r18, Z+10	; 0x0a
    11b4:	33 85       	ldd	r19, Z+11	; 0x0b
    11b6:	82 17       	cp	r24, r18
    11b8:	93 07       	cpc	r25, r19
    11ba:	08 f0       	brcs	.+2      	; 0x11be <udc_process_setup+0x16c>
    11bc:	c8 c1       	rjmp	.+912    	; 0x154e <udc_process_setup+0x4fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    11be:	80 93 9a 23 	sts	0x239A, r24	; 0x80239a <udd_g_ctrlreq+0xa>
    11c2:	90 93 9b 23 	sts	0x239B, r25	; 0x80239b <udd_g_ctrlreq+0xb>
    11c6:	c3 c1       	rjmp	.+902    	; 0x154e <udc_process_setup+0x4fc>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    11c8:	21 30       	cpi	r18, 0x01	; 1
    11ca:	31 05       	cpc	r19, r1
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <udc_process_setup+0x17e>
    11ce:	3a c1       	rjmp	.+628    	; 0x1444 <udc_process_setup+0x3f2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    11d0:	61 e0       	ldi	r22, 0x01	; 1
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	84 ef       	ldi	r24, 0xF4	; 244
    11d6:	91 e2       	ldi	r25, 0x21	; 33
    11d8:	0e 94 1b 11 	call	0x2236	; 0x2236 <udd_set_setup_payload>
    11dc:	b8 c1       	rjmp	.+880    	; 0x154e <udc_process_setup+0x4fc>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	e1 f5       	brne	.+120    	; 0x125a <udc_process_setup+0x208>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    11e2:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <udd_g_ctrlreq+0x1>
    11e6:	9a 30       	cpi	r25, 0x0A	; 10
    11e8:	c1 f5       	brne	.+112    	; 0x125a <udc_process_setup+0x208>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    11ea:	21 30       	cpi	r18, 0x01	; 1
    11ec:	31 05       	cpc	r19, r1
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <udc_process_setup+0x1a0>
    11f0:	29 c1       	rjmp	.+594    	; 0x1444 <udc_process_setup+0x3f2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    11f2:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
    11f6:	88 23       	and	r24, r24
    11f8:	09 f4       	brne	.+2      	; 0x11fc <udc_process_setup+0x1aa>
    11fa:	24 c1       	rjmp	.+584    	; 0x1444 <udc_process_setup+0x3f2>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    11fc:	c0 91 94 23 	lds	r28, 0x2394	; 0x802394 <udd_g_ctrlreq+0x4>
    1200:	d0 91 95 23 	lds	r29, 0x2395	; 0x802395 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1204:	00 91 f2 21 	lds	r16, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1208:	10 91 f3 21 	lds	r17, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    120c:	d8 01       	movw	r26, r16
    120e:	ed 91       	ld	r30, X+
    1210:	fc 91       	ld	r31, X
    1212:	84 81       	ldd	r24, Z+4	; 0x04
    1214:	c8 17       	cp	r28, r24
    1216:	08 f0       	brcs	.+2      	; 0x121a <udc_process_setup+0x1c8>
    1218:	15 c1       	rjmp	.+554    	; 0x1444 <udc_process_setup+0x3f2>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	8c 2f       	mov	r24, r28
    121e:	10 de       	rcall	.-992    	; 0xe40 <udc_update_iface_desc>
    1220:	88 23       	and	r24, r24
    1222:	09 f4       	brne	.+2      	; 0x1226 <udc_process_setup+0x1d4>
    1224:	0f c1       	rjmp	.+542    	; 0x1444 <udc_process_setup+0x3f2>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1226:	ce 01       	movw	r24, r28
    1228:	99 27       	eor	r25, r25
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	d8 01       	movw	r26, r16
    1230:	12 96       	adiw	r26, 0x02	; 2
    1232:	ed 91       	ld	r30, X+
    1234:	fc 91       	ld	r31, X
    1236:	13 97       	sbiw	r26, 0x03	; 3
    1238:	e8 0f       	add	r30, r24
    123a:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    123c:	01 90       	ld	r0, Z+
    123e:	f0 81       	ld	r31, Z
    1240:	e0 2d       	mov	r30, r0
    1242:	86 81       	ldd	r24, Z+6	; 0x06
    1244:	97 81       	ldd	r25, Z+7	; 0x07
    1246:	fc 01       	movw	r30, r24
    1248:	19 95       	eicall
    124a:	80 93 f6 21 	sts	0x21F6, r24	; 0x8021f6 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	86 ef       	ldi	r24, 0xF6	; 246
    1254:	91 e2       	ldi	r25, 0x21	; 33
    1256:	ef d7       	rcall	.+4062   	; 0x2236 <udd_set_setup_payload>
    1258:	7a c1       	rjmp	.+756    	; 0x154e <udc_process_setup+0x4fc>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	09 f0       	breq	.+2      	; 0x1260 <udc_process_setup+0x20e>
    125e:	f2 c0       	rjmp	.+484    	; 0x1444 <udc_process_setup+0x3f2>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1260:	80 91 91 23 	lds	r24, 0x2391	; 0x802391 <udd_g_ctrlreq+0x1>
    1264:	81 11       	cpse	r24, r1
    1266:	e7 c0       	rjmp	.+462    	; 0x1436 <udc_process_setup+0x3e4>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	09 f0       	breq	.+2      	; 0x1270 <udc_process_setup+0x21e>
    126e:	ea c0       	rjmp	.+468    	; 0x1444 <udc_process_setup+0x3f2>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1270:	80 91 94 23 	lds	r24, 0x2394	; 0x802394 <udd_g_ctrlreq+0x4>
    1274:	0e 94 aa 11 	call	0x2354	; 0x2354 <udd_ep_is_halted>
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <udc_ep_status.4575>
    127e:	90 93 ef 21 	sts	0x21EF, r25	; 0x8021ef <udc_ep_status.4575+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1282:	62 e0       	ldi	r22, 0x02	; 2
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	8e ee       	ldi	r24, 0xEE	; 238
    1288:	91 e2       	ldi	r25, 0x21	; 33
    128a:	d5 d7       	rcall	.+4010   	; 0x2236 <udd_set_setup_payload>
    128c:	60 c1       	rjmp	.+704    	; 0x154e <udc_process_setup+0x4fc>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    128e:	8f 71       	andi	r24, 0x1F	; 31
    1290:	09 f0       	breq	.+2      	; 0x1294 <udc_process_setup+0x242>
    1292:	83 c0       	rjmp	.+262    	; 0x139a <udc_process_setup+0x348>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1294:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <udd_g_ctrlreq+0x1>
    1298:	93 30       	cpi	r25, 0x03	; 3
    129a:	09 f4       	brne	.+2      	; 0x129e <udc_process_setup+0x24c>
    129c:	ce c0       	rjmp	.+412    	; 0x143a <udc_process_setup+0x3e8>
    129e:	18 f4       	brcc	.+6      	; 0x12a6 <udc_process_setup+0x254>
    12a0:	91 30       	cpi	r25, 0x01	; 1
    12a2:	a1 f0       	breq	.+40     	; 0x12cc <udc_process_setup+0x27a>
    12a4:	7a c0       	rjmp	.+244    	; 0x139a <udc_process_setup+0x348>
    12a6:	95 30       	cpi	r25, 0x05	; 5
    12a8:	19 f0       	breq	.+6      	; 0x12b0 <udc_process_setup+0x25e>
    12aa:	99 30       	cpi	r25, 0x09	; 9
    12ac:	39 f1       	breq	.+78     	; 0x12fc <udc_process_setup+0x2aa>
    12ae:	75 c0       	rjmp	.+234    	; 0x139a <udc_process_setup+0x348>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    12b0:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
    12b4:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
    12b8:	89 2b       	or	r24, r25
    12ba:	09 f0       	breq	.+2      	; 0x12be <udc_process_setup+0x26c>
    12bc:	c3 c0       	rjmp	.+390    	; 0x1444 <udc_process_setup+0x3f2>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    12be:	8a e1       	ldi	r24, 0x1A	; 26
    12c0:	97 e0       	ldi	r25, 0x07	; 7
    12c2:	80 93 9c 23 	sts	0x239C, r24	; 0x80239c <udd_g_ctrlreq+0xc>
    12c6:	90 93 9d 23 	sts	0x239D, r25	; 0x80239d <udd_g_ctrlreq+0xd>
    12ca:	41 c1       	rjmp	.+642    	; 0x154e <udc_process_setup+0x4fc>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    12cc:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
    12d0:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
    12d4:	89 2b       	or	r24, r25
    12d6:	09 f0       	breq	.+2      	; 0x12da <udc_process_setup+0x288>
    12d8:	b5 c0       	rjmp	.+362    	; 0x1444 <udc_process_setup+0x3f2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    12da:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x2>
    12de:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x3>
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <udc_process_setup+0x296>
    12e6:	ae c0       	rjmp	.+348    	; 0x1444 <udc_process_setup+0x3f2>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    12e8:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udc_device_status>
    12ec:	90 91 f9 21 	lds	r25, 0x21F9	; 0x8021f9 <udc_device_status+0x1>
    12f0:	8d 7f       	andi	r24, 0xFD	; 253
    12f2:	80 93 f8 21 	sts	0x21F8, r24	; 0x8021f8 <udc_device_status>
    12f6:	90 93 f9 21 	sts	0x21F9, r25	; 0x8021f9 <udc_device_status+0x1>
    12fa:	29 c1       	rjmp	.+594    	; 0x154e <udc_process_setup+0x4fc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    12fc:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
    1300:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
    1304:	89 2b       	or	r24, r25
    1306:	09 f0       	breq	.+2      	; 0x130a <udc_process_setup+0x2b8>
    1308:	9d c0       	rjmp	.+314    	; 0x1444 <udc_process_setup+0x3f2>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    130a:	8a d7       	rcall	.+3860   	; 0x2220 <udd_getaddress>
    130c:	88 23       	and	r24, r24
    130e:	09 f4       	brne	.+2      	; 0x1312 <udc_process_setup+0x2c0>
    1310:	99 c0       	rjmp	.+306    	; 0x1444 <udc_process_setup+0x3f2>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1312:	20 91 92 23 	lds	r18, 0x2392	; 0x802392 <udd_g_ctrlreq+0x2>
    1316:	30 91 93 23 	lds	r19, 0x2393	; 0x802393 <udd_g_ctrlreq+0x3>
    131a:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    131c:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    1320:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1324:	81 89       	ldd	r24, Z+17	; 0x11
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	82 17       	cp	r24, r18
    132a:	93 07       	cpc	r25, r19
    132c:	08 f4       	brcc	.+2      	; 0x1330 <udc_process_setup+0x2de>
    132e:	8a c0       	rjmp	.+276    	; 0x1444 <udc_process_setup+0x3f2>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1330:	39 de       	rcall	.-910    	; 0xfa4 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1332:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x2>
    1336:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x3>
    133a:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    133e:	88 23       	and	r24, r24
    1340:	09 f4       	brne	.+2      	; 0x1344 <udc_process_setup+0x2f2>
    1342:	05 c1       	rjmp	.+522    	; 0x154e <udc_process_setup+0x4fc>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1344:	99 27       	eor	r25, r25
    1346:	81 50       	subi	r24, 0x01	; 1
    1348:	90 4c       	sbci	r25, 0xC0	; 192
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    1356:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    135a:	e8 0f       	add	r30, r24
    135c:	f9 1f       	adc	r31, r25
    135e:	e0 93 f2 21 	sts	0x21F2, r30	; 0x8021f2 <udc_ptr_conf>
    1362:	f0 93 f3 21 	sts	0x21F3, r31	; 0x8021f3 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1366:	01 90       	ld	r0, Z+
    1368:	f0 81       	ld	r31, Z
    136a:	e0 2d       	mov	r30, r0
    136c:	84 81       	ldd	r24, Z+4	; 0x04
    136e:	88 23       	and	r24, r24
    1370:	09 f4       	brne	.+2      	; 0x1374 <udc_process_setup+0x322>
    1372:	ed c0       	rjmp	.+474    	; 0x154e <udc_process_setup+0x4fc>
    1374:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	8c 2f       	mov	r24, r28
    137a:	de dd       	rcall	.-1092   	; 0xf38 <udc_iface_enable>
    137c:	88 23       	and	r24, r24
    137e:	09 f4       	brne	.+2      	; 0x1382 <udc_process_setup+0x330>
    1380:	61 c0       	rjmp	.+194    	; 0x1444 <udc_process_setup+0x3f2>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1382:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1384:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1388:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    138c:	01 90       	ld	r0, Z+
    138e:	f0 81       	ld	r31, Z
    1390:	e0 2d       	mov	r30, r0
    1392:	84 81       	ldd	r24, Z+4	; 0x04
    1394:	c8 17       	cp	r28, r24
    1396:	78 f3       	brcs	.-34     	; 0x1376 <udc_process_setup+0x324>
    1398:	da c0       	rjmp	.+436    	; 0x154e <udc_process_setup+0x4fc>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	e1 f4       	brne	.+56     	; 0x13d6 <udc_process_setup+0x384>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    139e:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <udd_g_ctrlreq+0x1>
    13a2:	9b 30       	cpi	r25, 0x0B	; 11
    13a4:	c1 f4       	brne	.+48     	; 0x13d6 <udc_process_setup+0x384>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    13a6:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
    13aa:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
    13ae:	89 2b       	or	r24, r25
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <udc_process_setup+0x362>
    13b2:	48 c0       	rjmp	.+144    	; 0x1444 <udc_process_setup+0x3f2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    13b4:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
    13b8:	88 23       	and	r24, r24
    13ba:	09 f4       	brne	.+2      	; 0x13be <udc_process_setup+0x36c>
    13bc:	43 c0       	rjmp	.+134    	; 0x1444 <udc_process_setup+0x3f2>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    13be:	e0 e9       	ldi	r30, 0x90	; 144
    13c0:	f3 e2       	ldi	r31, 0x23	; 35
    13c2:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    13c4:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    13c6:	8c 2f       	mov	r24, r28
    13c8:	75 dd       	rcall	.-1302   	; 0xeb4 <udc_iface_disable>
    13ca:	88 23       	and	r24, r24
    13cc:	d9 f1       	breq	.+118    	; 0x1444 <udc_process_setup+0x3f2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    13ce:	6d 2f       	mov	r22, r29
    13d0:	8c 2f       	mov	r24, r28
    13d2:	b2 dd       	rcall	.-1180   	; 0xf38 <udc_iface_enable>
    13d4:	35 c0       	rjmp	.+106    	; 0x1440 <udc_process_setup+0x3ee>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	a9 f5       	brne	.+106    	; 0x1444 <udc_process_setup+0x3f2>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    13da:	80 91 91 23 	lds	r24, 0x2391	; 0x802391 <udd_g_ctrlreq+0x1>
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	19 f0       	breq	.+6      	; 0x13e8 <udc_process_setup+0x396>
    13e2:	83 30       	cpi	r24, 0x03	; 3
    13e4:	89 f0       	breq	.+34     	; 0x1408 <udc_process_setup+0x3b6>
    13e6:	2b c0       	rjmp	.+86     	; 0x143e <udc_process_setup+0x3ec>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    13e8:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
    13ec:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
    13f0:	89 2b       	or	r24, r25
    13f2:	41 f5       	brne	.+80     	; 0x1444 <udc_process_setup+0x3f2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    13f4:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x2>
    13f8:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x3>
    13fc:	89 2b       	or	r24, r25
    13fe:	11 f5       	brne	.+68     	; 0x1444 <udc_process_setup+0x3f2>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1400:	80 91 94 23 	lds	r24, 0x2394	; 0x802394 <udd_g_ctrlreq+0x4>
    1404:	c2 d7       	rcall	.+3972   	; 0x238a <udd_ep_clear_halt>
    1406:	1c c0       	rjmp	.+56     	; 0x1440 <udc_process_setup+0x3ee>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1408:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
    140c:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
    1410:	89 2b       	or	r24, r25
    1412:	c1 f4       	brne	.+48     	; 0x1444 <udc_process_setup+0x3f2>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1414:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x2>
    1418:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x3>
    141c:	89 2b       	or	r24, r25
    141e:	91 f4       	brne	.+36     	; 0x1444 <udc_process_setup+0x3f2>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1420:	c0 e9       	ldi	r28, 0x90	; 144
    1422:	d3 e2       	ldi	r29, 0x23	; 35
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	0e 94 c3 12 	call	0x2586	; 0x2586 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	0e 94 28 13 	call	0x2650	; 0x2650 <udd_ep_set_halt>
    1430:	07 c0       	rjmp	.+14     	; 0x1440 <udc_process_setup+0x3ee>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <udc_process_setup+0x3ee>
				break;
			}
		}
#endif
	}
	return false;
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <udc_process_setup+0x3ee>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <udc_process_setup+0x3ee>
				break;
			}
		}
#endif
	}
	return false;
    143e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1440:	81 11       	cpse	r24, r1
    1442:	86 c0       	rjmp	.+268    	; 0x1550 <udc_process_setup+0x4fe>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1444:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <udd_g_ctrlreq>
    1448:	8f 71       	andi	r24, 0x1F	; 31
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	71 f5       	brne	.+92     	; 0x14aa <udc_process_setup+0x458>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    144e:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
    1452:	88 23       	and	r24, r24
    1454:	51 f1       	breq	.+84     	; 0x14aa <udc_process_setup+0x458>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1456:	00 91 94 23 	lds	r16, 0x2394	; 0x802394 <udd_g_ctrlreq+0x4>
    145a:	10 91 95 23 	lds	r17, 0x2395	; 0x802395 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    145e:	c0 91 f2 21 	lds	r28, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1462:	d0 91 f3 21 	lds	r29, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1466:	e8 81       	ld	r30, Y
    1468:	f9 81       	ldd	r31, Y+1	; 0x01
    146a:	84 81       	ldd	r24, Z+4	; 0x04
    146c:	08 17       	cp	r16, r24
    146e:	e8 f4       	brcc	.+58     	; 0x14aa <udc_process_setup+0x458>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	80 2f       	mov	r24, r16
    1474:	e5 dc       	rcall	.-1590   	; 0xe40 <udc_update_iface_desc>
    1476:	88 23       	and	r24, r24
    1478:	c1 f0       	breq	.+48     	; 0x14aa <udc_process_setup+0x458>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    147a:	f8 01       	movw	r30, r16
    147c:	ff 27       	eor	r31, r31
    147e:	cf 01       	movw	r24, r30
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	ea 81       	ldd	r30, Y+2	; 0x02
    1486:	fb 81       	ldd	r31, Y+3	; 0x03
    1488:	e8 0f       	add	r30, r24
    148a:	f9 1f       	adc	r31, r25
    148c:	c0 81       	ld	r28, Z
    148e:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1490:	ee 81       	ldd	r30, Y+6	; 0x06
    1492:	ff 81       	ldd	r31, Y+7	; 0x07
    1494:	19 95       	eicall
    1496:	68 2f       	mov	r22, r24
    1498:	80 2f       	mov	r24, r16
    149a:	d2 dc       	rcall	.-1628   	; 0xe40 <udc_update_iface_desc>
    149c:	88 23       	and	r24, r24
    149e:	29 f0       	breq	.+10     	; 0x14aa <udc_process_setup+0x458>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    14a0:	ec 81       	ldd	r30, Y+4	; 0x04
    14a2:	fd 81       	ldd	r31, Y+5	; 0x05
    14a4:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    14a6:	81 11       	cpse	r24, r1
    14a8:	53 c0       	rjmp	.+166    	; 0x1550 <udc_process_setup+0x4fe>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    14aa:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <udd_g_ctrlreq>
    14ae:	8f 71       	andi	r24, 0x1F	; 31
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <udc_process_setup+0x464>
    14b4:	40 c0       	rjmp	.+128    	; 0x1536 <udc_process_setup+0x4e4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    14b6:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
    14ba:	88 23       	and	r24, r24
    14bc:	b1 f1       	breq	.+108    	; 0x152a <udc_process_setup+0x4d8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14be:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    14c2:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    14c6:	ed 91       	ld	r30, X+
    14c8:	fc 91       	ld	r31, X
    14ca:	11 97       	sbiw	r26, 0x01	; 1
    14cc:	84 81       	ldd	r24, Z+4	; 0x04
    14ce:	88 23       	and	r24, r24
    14d0:	71 f1       	breq	.+92     	; 0x152e <udc_process_setup+0x4dc>
    14d2:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    14d4:	ec 2f       	mov	r30, r28
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	12 96       	adiw	r26, 0x02	; 2
    14de:	8d 91       	ld	r24, X+
    14e0:	9c 91       	ld	r25, X
    14e2:	13 97       	sbiw	r26, 0x03	; 3
    14e4:	e8 0f       	add	r30, r24
    14e6:	f9 1f       	adc	r31, r25
    14e8:	00 81       	ld	r16, Z
    14ea:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    14ec:	d8 01       	movw	r26, r16
    14ee:	16 96       	adiw	r26, 0x06	; 6
    14f0:	ed 91       	ld	r30, X+
    14f2:	fc 91       	ld	r31, X
    14f4:	17 97       	sbiw	r26, 0x07	; 7
    14f6:	19 95       	eicall
    14f8:	68 2f       	mov	r22, r24
    14fa:	8c 2f       	mov	r24, r28
    14fc:	a1 dc       	rcall	.-1726   	; 0xe40 <udc_update_iface_desc>
    14fe:	88 23       	and	r24, r24
    1500:	39 f1       	breq	.+78     	; 0x1550 <udc_process_setup+0x4fe>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1502:	d8 01       	movw	r26, r16
    1504:	14 96       	adiw	r26, 0x04	; 4
    1506:	ed 91       	ld	r30, X+
    1508:	fc 91       	ld	r31, X
    150a:	15 97       	sbiw	r26, 0x05	; 5
    150c:	19 95       	eicall
    150e:	81 11       	cpse	r24, r1
    1510:	1f c0       	rjmp	.+62     	; 0x1550 <udc_process_setup+0x4fe>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1512:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1514:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1518:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    151c:	ed 91       	ld	r30, X+
    151e:	fc 91       	ld	r31, X
    1520:	11 97       	sbiw	r26, 0x01	; 1
    1522:	94 81       	ldd	r25, Z+4	; 0x04
    1524:	c9 17       	cp	r28, r25
    1526:	b0 f2       	brcs	.-84     	; 0x14d4 <udc_process_setup+0x482>
    1528:	13 c0       	rjmp	.+38     	; 0x1550 <udc_process_setup+0x4fe>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	11 c0       	rjmp	.+34     	; 0x1550 <udc_process_setup+0x4fe>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	0f c0       	rjmp	.+30     	; 0x1550 <udc_process_setup+0x4fe>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	0d c0       	rjmp	.+26     	; 0x1550 <udc_process_setup+0x4fe>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	0b c0       	rjmp	.+22     	; 0x1550 <udc_process_setup+0x4fe>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    153a:	98 2f       	mov	r25, r24
    153c:	90 76       	andi	r25, 0x60	; 96
    153e:	09 f0       	breq	.+2      	; 0x1542 <udc_process_setup+0x4f0>
    1540:	81 cf       	rjmp	.-254    	; 0x1444 <udc_process_setup+0x3f2>
    1542:	a5 ce       	rjmp	.-694    	; 0x128e <udc_process_setup+0x23c>
    1544:	98 2f       	mov	r25, r24
    1546:	90 76       	andi	r25, 0x60	; 96
    1548:	09 f0       	breq	.+2      	; 0x154c <udc_process_setup+0x4fa>
    154a:	7c cf       	rjmp	.-264    	; 0x1444 <udc_process_setup+0x3f2>
    154c:	9b cd       	rjmp	.-1226   	; 0x1084 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    154e:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	08 95       	ret

0000155a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    155a:	43 e0       	ldi	r20, 0x03	; 3
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	61 e0       	ldi	r22, 0x01	; 1
    1560:	80 ee       	ldi	r24, 0xE0	; 224
    1562:	97 e0       	ldi	r25, 0x07	; 7
    1564:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    1568:	43 e0       	ldi	r20, 0x03	; 3
    156a:	50 e0       	ldi	r21, 0x00	; 0
    156c:	62 e0       	ldi	r22, 0x02	; 2
    156e:	80 ee       	ldi	r24, 0xE0	; 224
    1570:	97 e0       	ldi	r25, 0x07	; 7
    1572:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    1576:	43 e0       	ldi	r20, 0x03	; 3
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	60 e1       	ldi	r22, 0x10	; 16
    157c:	80 e6       	ldi	r24, 0x60	; 96
    157e:	96 e0       	ldi	r25, 0x06	; 6
    1580:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	50 e4       	ldi	r21, 0x40	; 64
    1588:	60 e2       	ldi	r22, 0x20	; 32
    158a:	80 e6       	ldi	r24, 0x60	; 96
    158c:	96 e0       	ldi	r25, 0x06	; 6
    158e:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	5b e1       	ldi	r21, 0x1B	; 27
    1596:	60 e2       	ldi	r22, 0x20	; 32
    1598:	80 e8       	ldi	r24, 0x80	; 128
    159a:	96 e0       	ldi	r25, 0x06	; 6
    159c:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	5b e1       	ldi	r21, 0x1B	; 27
    15a4:	62 e0       	ldi	r22, 0x02	; 2
    15a6:	80 ea       	ldi	r24, 0xA0	; 160
    15a8:	96 e0       	ldi	r25, 0x06	; 6
    15aa:	0e 94 3a 02 	call	0x474	; 0x474 <ioport_configure_port_pin>
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	5b e1       	ldi	r21, 0x1B	; 27
    15b2:	64 e0       	ldi	r22, 0x04	; 4
    15b4:	80 ea       	ldi	r24, 0xA0	; 160
    15b6:	96 e0       	ldi	r25, 0x06	; 6
    15b8:	0c 94 3a 02 	jmp	0x474	; 0x474 <ioport_configure_port_pin>
    15bc:	08 95       	ret

000015be <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    15be:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    15c0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    15c2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    15c4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    15c6:	60 83       	st	Z, r22
	ret                             // Return to caller
    15c8:	08 95       	ret

000015ca <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    15ca:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    15ce:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    15d0:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    15d2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    15d6:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    15d8:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    15dc:	08 95       	ret

000015de <usart_getchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    15de:	fc 01       	movw	r30, r24
    15e0:	91 81       	ldd	r25, Z+1	; 0x01
    15e2:	99 23       	and	r25, r25
    15e4:	ec f7       	brge	.-6      	; 0x15e0 <usart_getchar+0x2>
    15e6:	80 81       	ld	r24, Z
    15e8:	08 95       	ret

000015ea <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    15ea:	2f 92       	push	r2
    15ec:	3f 92       	push	r3
    15ee:	4f 92       	push	r4
    15f0:	5f 92       	push	r5
    15f2:	6f 92       	push	r6
    15f4:	7f 92       	push	r7
    15f6:	8f 92       	push	r8
    15f8:	9f 92       	push	r9
    15fa:	af 92       	push	r10
    15fc:	bf 92       	push	r11
    15fe:	cf 92       	push	r12
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	1c 01       	movw	r2, r24
    160e:	2a 01       	movw	r4, r20
    1610:	3b 01       	movw	r6, r22
    1612:	48 01       	movw	r8, r16
    1614:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1616:	d9 01       	movw	r26, r18
    1618:	c8 01       	movw	r24, r16
    161a:	68 94       	set
    161c:	12 f8       	bld	r1, 2
    161e:	b6 95       	lsr	r27
    1620:	a7 95       	ror	r26
    1622:	97 95       	ror	r25
    1624:	87 95       	ror	r24
    1626:	16 94       	lsr	r1
    1628:	d1 f7       	brne	.-12     	; 0x161e <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    162a:	b9 01       	movw	r22, r18
    162c:	a8 01       	movw	r20, r16
    162e:	03 2e       	mov	r0, r19
    1630:	36 e1       	ldi	r19, 0x16	; 22
    1632:	76 95       	lsr	r23
    1634:	67 95       	ror	r22
    1636:	57 95       	ror	r21
    1638:	47 95       	ror	r20
    163a:	3a 95       	dec	r19
    163c:	d1 f7       	brne	.-12     	; 0x1632 <usart_set_baudrate+0x48>
    163e:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1640:	f1 01       	movw	r30, r2
    1642:	24 81       	ldd	r18, Z+4	; 0x04
    1644:	22 fd       	sbrc	r18, 2
    1646:	08 c0       	rjmp	.+16     	; 0x1658 <usart_set_baudrate+0x6e>
		max_rate /= 2;
    1648:	b6 95       	lsr	r27
    164a:	a7 95       	ror	r26
    164c:	97 95       	ror	r25
    164e:	87 95       	ror	r24
		min_rate /= 2;
    1650:	76 95       	lsr	r23
    1652:	67 95       	ror	r22
    1654:	57 95       	ror	r21
    1656:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1658:	84 15       	cp	r24, r4
    165a:	95 05       	cpc	r25, r5
    165c:	a6 05       	cpc	r26, r6
    165e:	b7 05       	cpc	r27, r7
    1660:	08 f4       	brcc	.+2      	; 0x1664 <usart_set_baudrate+0x7a>
    1662:	ae c0       	rjmp	.+348    	; 0x17c0 <usart_set_baudrate+0x1d6>
    1664:	44 16       	cp	r4, r20
    1666:	55 06       	cpc	r5, r21
    1668:	66 06       	cpc	r6, r22
    166a:	77 06       	cpc	r7, r23
    166c:	08 f4       	brcc	.+2      	; 0x1670 <usart_set_baudrate+0x86>
    166e:	aa c0       	rjmp	.+340    	; 0x17c4 <usart_set_baudrate+0x1da>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1670:	f1 01       	movw	r30, r2
    1672:	84 81       	ldd	r24, Z+4	; 0x04
    1674:	82 fd       	sbrc	r24, 2
    1676:	04 c0       	rjmp	.+8      	; 0x1680 <usart_set_baudrate+0x96>
		baud *= 2;
    1678:	44 0c       	add	r4, r4
    167a:	55 1c       	adc	r5, r5
    167c:	66 1c       	adc	r6, r6
    167e:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1680:	c5 01       	movw	r24, r10
    1682:	b4 01       	movw	r22, r8
    1684:	a3 01       	movw	r20, r6
    1686:	92 01       	movw	r18, r4
    1688:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    168c:	2f 3f       	cpi	r18, 0xFF	; 255
    168e:	31 05       	cpc	r19, r1
    1690:	41 05       	cpc	r20, r1
    1692:	51 05       	cpc	r21, r1
    1694:	08 f4       	brcc	.+2      	; 0x1698 <usart_set_baudrate+0xae>
    1696:	98 c0       	rjmp	.+304    	; 0x17c8 <usart_set_baudrate+0x1de>
    1698:	c1 2c       	mov	r12, r1
    169a:	d1 2c       	mov	r13, r1
    169c:	76 01       	movw	r14, r12
    169e:	ca 94       	dec	r12
    16a0:	c9 ef       	ldi	r28, 0xF9	; 249
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <usart_set_baudrate+0xc4>
    16a4:	2c 15       	cp	r18, r12
    16a6:	3d 05       	cpc	r19, r13
    16a8:	4e 05       	cpc	r20, r14
    16aa:	5f 05       	cpc	r21, r15
    16ac:	68 f0       	brcs	.+26     	; 0x16c8 <usart_set_baudrate+0xde>
			break;
		}

		limit <<= 1;
    16ae:	cc 0c       	add	r12, r12
    16b0:	dd 1c       	adc	r13, r13
    16b2:	ee 1c       	adc	r14, r14
    16b4:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    16b6:	cd 3f       	cpi	r28, 0xFD	; 253
    16b8:	14 f4       	brge	.+4      	; 0x16be <usart_set_baudrate+0xd4>
			limit |= 1;
    16ba:	68 94       	set
    16bc:	c0 f8       	bld	r12, 0
    16be:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    16c0:	c7 30       	cpi	r28, 0x07	; 7
    16c2:	81 f7       	brne	.-32     	; 0x16a4 <usart_set_baudrate+0xba>
    16c4:	8c 2f       	mov	r24, r28
    16c6:	56 c0       	rjmp	.+172    	; 0x1774 <usart_set_baudrate+0x18a>
    16c8:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    16ca:	cc 23       	and	r28, r28
    16cc:	0c f0       	brlt	.+2      	; 0x16d0 <usart_set_baudrate+0xe6>
    16ce:	52 c0       	rjmp	.+164    	; 0x1774 <usart_set_baudrate+0x18a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    16d0:	d3 01       	movw	r26, r6
    16d2:	c2 01       	movw	r24, r4
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	aa 1f       	adc	r26, r26
    16da:	bb 1f       	adc	r27, r27
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	aa 1f       	adc	r26, r26
    16e2:	bb 1f       	adc	r27, r27
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	aa 1f       	adc	r26, r26
    16ea:	bb 1f       	adc	r27, r27
    16ec:	85 01       	movw	r16, r10
    16ee:	74 01       	movw	r14, r8
    16f0:	e8 1a       	sub	r14, r24
    16f2:	f9 0a       	sbc	r15, r25
    16f4:	0a 0b       	sbc	r16, r26
    16f6:	1b 0b       	sbc	r17, r27
    16f8:	d8 01       	movw	r26, r16
    16fa:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    16fc:	ce 3f       	cpi	r28, 0xFE	; 254
    16fe:	f4 f4       	brge	.+60     	; 0x173c <usart_set_baudrate+0x152>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1700:	2d ef       	ldi	r18, 0xFD	; 253
    1702:	3f ef       	ldi	r19, 0xFF	; 255
    1704:	2c 1b       	sub	r18, r28
    1706:	31 09       	sbc	r19, r1
    1708:	c7 fd       	sbrc	r28, 7
    170a:	33 95       	inc	r19
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <usart_set_baudrate+0x12c>
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	aa 1f       	adc	r26, r26
    1714:	bb 1f       	adc	r27, r27
    1716:	2a 95       	dec	r18
    1718:	d2 f7       	brpl	.-12     	; 0x170e <usart_set_baudrate+0x124>
    171a:	73 01       	movw	r14, r6
    171c:	62 01       	movw	r12, r4
    171e:	f6 94       	lsr	r15
    1720:	e7 94       	ror	r14
    1722:	d7 94       	ror	r13
    1724:	c7 94       	ror	r12
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	6c 0d       	add	r22, r12
    172c:	7d 1d       	adc	r23, r13
    172e:	8e 1d       	adc	r24, r14
    1730:	9f 1d       	adc	r25, r15
    1732:	a3 01       	movw	r20, r6
    1734:	92 01       	movw	r18, r4
    1736:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__udivmodsi4>
    173a:	38 c0       	rjmp	.+112    	; 0x17ac <usart_set_baudrate+0x1c2>
		} else {
			baud <<= exp + 3;
    173c:	23 e0       	ldi	r18, 0x03	; 3
    173e:	2c 0f       	add	r18, r28
    1740:	83 01       	movw	r16, r6
    1742:	72 01       	movw	r14, r4
    1744:	04 c0       	rjmp	.+8      	; 0x174e <usart_set_baudrate+0x164>
    1746:	ee 0c       	add	r14, r14
    1748:	ff 1c       	adc	r15, r15
    174a:	00 1f       	adc	r16, r16
    174c:	11 1f       	adc	r17, r17
    174e:	2a 95       	dec	r18
    1750:	d2 f7       	brpl	.-12     	; 0x1746 <usart_set_baudrate+0x15c>
    1752:	a8 01       	movw	r20, r16
    1754:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
    1756:	67 01       	movw	r12, r14
    1758:	78 01       	movw	r14, r16
    175a:	f6 94       	lsr	r15
    175c:	e7 94       	ror	r14
    175e:	d7 94       	ror	r13
    1760:	c7 94       	ror	r12
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	6c 0d       	add	r22, r12
    1768:	7d 1d       	adc	r23, r13
    176a:	8e 1d       	adc	r24, r14
    176c:	9f 1d       	adc	r25, r15
    176e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__udivmodsi4>
    1772:	1c c0       	rjmp	.+56     	; 0x17ac <usart_set_baudrate+0x1c2>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1774:	8d 5f       	subi	r24, 0xFD	; 253
    1776:	a3 01       	movw	r20, r6
    1778:	92 01       	movw	r18, r4
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <usart_set_baudrate+0x19a>
    177c:	22 0f       	add	r18, r18
    177e:	33 1f       	adc	r19, r19
    1780:	44 1f       	adc	r20, r20
    1782:	55 1f       	adc	r21, r21
    1784:	8a 95       	dec	r24
    1786:	d2 f7       	brpl	.-12     	; 0x177c <usart_set_baudrate+0x192>
		div = (cpu_hz + baud / 2) / baud - 1;
    1788:	da 01       	movw	r26, r20
    178a:	c9 01       	movw	r24, r18
    178c:	b6 95       	lsr	r27
    178e:	a7 95       	ror	r26
    1790:	97 95       	ror	r25
    1792:	87 95       	ror	r24
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	68 0d       	add	r22, r8
    179a:	79 1d       	adc	r23, r9
    179c:	8a 1d       	adc	r24, r10
    179e:	9b 1d       	adc	r25, r11
    17a0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__udivmodsi4>
    17a4:	21 50       	subi	r18, 0x01	; 1
    17a6:	31 09       	sbc	r19, r1
    17a8:	41 09       	sbc	r20, r1
    17aa:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    17ac:	83 2f       	mov	r24, r19
    17ae:	8f 70       	andi	r24, 0x0F	; 15
    17b0:	c2 95       	swap	r28
    17b2:	c0 7f       	andi	r28, 0xF0	; 240
    17b4:	c8 2b       	or	r28, r24
    17b6:	f1 01       	movw	r30, r2
    17b8:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    17ba:	26 83       	std	Z+6, r18	; 0x06

	return true;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	1c c0       	rjmp	.+56     	; 0x17f8 <usart_set_baudrate+0x20e>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	1a c0       	rjmp	.+52     	; 0x17f8 <usart_set_baudrate+0x20e>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	18 c0       	rjmp	.+48     	; 0x17f8 <usart_set_baudrate+0x20e>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    17c8:	d3 01       	movw	r26, r6
    17ca:	c2 01       	movw	r24, r4
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	aa 1f       	adc	r26, r26
    17d2:	bb 1f       	adc	r27, r27
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	aa 1f       	adc	r26, r26
    17da:	bb 1f       	adc	r27, r27
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	aa 1f       	adc	r26, r26
    17e2:	bb 1f       	adc	r27, r27
    17e4:	85 01       	movw	r16, r10
    17e6:	74 01       	movw	r14, r8
    17e8:	e8 1a       	sub	r14, r24
    17ea:	f9 0a       	sbc	r15, r25
    17ec:	0a 0b       	sbc	r16, r26
    17ee:	1b 0b       	sbc	r17, r27
    17f0:	d8 01       	movw	r26, r16
    17f2:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    17f4:	c9 ef       	ldi	r28, 0xF9	; 249
    17f6:	84 cf       	rjmp	.-248    	; 0x1700 <usart_set_baudrate+0x116>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ff 90       	pop	r15
    1800:	ef 90       	pop	r14
    1802:	df 90       	pop	r13
    1804:	cf 90       	pop	r12
    1806:	bf 90       	pop	r11
    1808:	af 90       	pop	r10
    180a:	9f 90       	pop	r9
    180c:	8f 90       	pop	r8
    180e:	7f 90       	pop	r7
    1810:	6f 90       	pop	r6
    1812:	5f 90       	pop	r5
    1814:	4f 90       	pop	r4
    1816:	3f 90       	pop	r3
    1818:	2f 90       	pop	r2
    181a:	08 95       	ret

0000181c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	ec 01       	movw	r28, r24
    1826:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	09 f4       	brne	.+2      	; 0x182e <usart_init_rs232+0x12>
    182c:	03 c1       	rjmp	.+518    	; 0x1a34 <usart_init_rs232+0x218>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    182e:	80 3c       	cpi	r24, 0xC0	; 192
    1830:	91 05       	cpc	r25, r1
    1832:	29 f4       	brne	.+10     	; 0x183e <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1834:	60 e1       	ldi	r22, 0x10	; 16
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    183c:	fb c0       	rjmp	.+502    	; 0x1a34 <usart_init_rs232+0x218>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    183e:	c0 38       	cpi	r28, 0x80	; 128
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	d8 07       	cpc	r29, r24
    1844:	29 f4       	brne	.+10     	; 0x1850 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1846:	62 e0       	ldi	r22, 0x02	; 2
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    184e:	f2 c0       	rjmp	.+484    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1850:	c1 15       	cp	r28, r1
    1852:	e1 e0       	ldi	r30, 0x01	; 1
    1854:	de 07       	cpc	r29, r30
    1856:	29 f4       	brne	.+10     	; 0x1862 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1860:	e9 c0       	rjmp	.+466    	; 0x1a34 <usart_init_rs232+0x218>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1862:	c0 38       	cpi	r28, 0x80	; 128
    1864:	f3 e0       	ldi	r31, 0x03	; 3
    1866:	df 07       	cpc	r29, r31
    1868:	29 f4       	brne	.+10     	; 0x1874 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1872:	e0 c0       	rjmp	.+448    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1874:	c0 39       	cpi	r28, 0x90	; 144
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	d8 07       	cpc	r29, r24
    187a:	29 f4       	brne	.+10     	; 0x1886 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    187c:	61 e0       	ldi	r22, 0x01	; 1
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1884:	d7 c0       	rjmp	.+430    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1886:	c1 15       	cp	r28, r1
    1888:	e2 e0       	ldi	r30, 0x02	; 2
    188a:	de 07       	cpc	r29, r30
    188c:	29 f4       	brne	.+10     	; 0x1898 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    188e:	62 e0       	ldi	r22, 0x02	; 2
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1896:	ce c0       	rjmp	.+412    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1898:	c0 34       	cpi	r28, 0x40	; 64
    189a:	f2 e0       	ldi	r31, 0x02	; 2
    189c:	df 07       	cpc	r29, r31
    189e:	29 f4       	brne	.+10     	; 0x18aa <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    18a0:	62 e0       	ldi	r22, 0x02	; 2
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    18a8:	c5 c0       	rjmp	.+394    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    18aa:	c0 32       	cpi	r28, 0x20	; 32
    18ac:	83 e0       	ldi	r24, 0x03	; 3
    18ae:	d8 07       	cpc	r29, r24
    18b0:	29 f4       	brne	.+10     	; 0x18bc <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    18b2:	64 e0       	ldi	r22, 0x04	; 4
    18b4:	82 e0       	ldi	r24, 0x02	; 2
    18b6:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    18ba:	bc c0       	rjmp	.+376    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    18bc:	c1 15       	cp	r28, r1
    18be:	e8 e0       	ldi	r30, 0x08	; 8
    18c0:	de 07       	cpc	r29, r30
    18c2:	29 f4       	brne	.+10     	; 0x18ce <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    18c4:	61 e0       	ldi	r22, 0x01	; 1
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    18cc:	b3 c0       	rjmp	.+358    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    18ce:	c1 15       	cp	r28, r1
    18d0:	f9 e0       	ldi	r31, 0x09	; 9
    18d2:	df 07       	cpc	r29, r31
    18d4:	29 f4       	brne	.+10     	; 0x18e0 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	84 e0       	ldi	r24, 0x04	; 4
    18da:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    18de:	aa c0       	rjmp	.+340    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    18e0:	c1 15       	cp	r28, r1
    18e2:	8a e0       	ldi	r24, 0x0A	; 10
    18e4:	d8 07       	cpc	r29, r24
    18e6:	29 f4       	brne	.+10     	; 0x18f2 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	85 e0       	ldi	r24, 0x05	; 5
    18ec:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    18f0:	a1 c0       	rjmp	.+322    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    18f2:	c1 15       	cp	r28, r1
    18f4:	eb e0       	ldi	r30, 0x0B	; 11
    18f6:	de 07       	cpc	r29, r30
    18f8:	29 f4       	brne	.+10     	; 0x1904 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	86 e0       	ldi	r24, 0x06	; 6
    18fe:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1902:	98 c0       	rjmp	.+304    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1904:	c0 34       	cpi	r28, 0x40	; 64
    1906:	f8 e0       	ldi	r31, 0x08	; 8
    1908:	df 07       	cpc	r29, r31
    190a:	29 f4       	brne	.+10     	; 0x1916 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    190c:	62 e0       	ldi	r22, 0x02	; 2
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1914:	8f c0       	rjmp	.+286    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1916:	c0 34       	cpi	r28, 0x40	; 64
    1918:	89 e0       	ldi	r24, 0x09	; 9
    191a:	d8 07       	cpc	r29, r24
    191c:	29 f4       	brne	.+10     	; 0x1928 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    191e:	62 e0       	ldi	r22, 0x02	; 2
    1920:	84 e0       	ldi	r24, 0x04	; 4
    1922:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1926:	86 c0       	rjmp	.+268    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1928:	c0 34       	cpi	r28, 0x40	; 64
    192a:	ea e0       	ldi	r30, 0x0A	; 10
    192c:	de 07       	cpc	r29, r30
    192e:	29 f4       	brne	.+10     	; 0x193a <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1930:	62 e0       	ldi	r22, 0x02	; 2
    1932:	85 e0       	ldi	r24, 0x05	; 5
    1934:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1938:	7d c0       	rjmp	.+250    	; 0x1a34 <usart_init_rs232+0x218>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    193a:	c0 39       	cpi	r28, 0x90	; 144
    193c:	f8 e0       	ldi	r31, 0x08	; 8
    193e:	df 07       	cpc	r29, r31
    1940:	29 f4       	brne	.+10     	; 0x194c <usart_init_rs232+0x130>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1942:	64 e0       	ldi	r22, 0x04	; 4
    1944:	83 e0       	ldi	r24, 0x03	; 3
    1946:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    194a:	74 c0       	rjmp	.+232    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    194c:	c0 39       	cpi	r28, 0x90	; 144
    194e:	89 e0       	ldi	r24, 0x09	; 9
    1950:	d8 07       	cpc	r29, r24
    1952:	29 f4       	brne	.+10     	; 0x195e <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1954:	64 e0       	ldi	r22, 0x04	; 4
    1956:	84 e0       	ldi	r24, 0x04	; 4
    1958:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    195c:	6b c0       	rjmp	.+214    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    195e:	c0 39       	cpi	r28, 0x90	; 144
    1960:	ea e0       	ldi	r30, 0x0A	; 10
    1962:	de 07       	cpc	r29, r30
    1964:	29 f4       	brne	.+10     	; 0x1970 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1966:	64 e0       	ldi	r22, 0x04	; 4
    1968:	85 e0       	ldi	r24, 0x05	; 5
    196a:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    196e:	62 c0       	rjmp	.+196    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1970:	c0 39       	cpi	r28, 0x90	; 144
    1972:	fb e0       	ldi	r31, 0x0B	; 11
    1974:	df 07       	cpc	r29, r31
    1976:	29 f4       	brne	.+10     	; 0x1982 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1978:	64 e0       	ldi	r22, 0x04	; 4
    197a:	86 e0       	ldi	r24, 0x06	; 6
    197c:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1980:	59 c0       	rjmp	.+178    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1982:	c0 3c       	cpi	r28, 0xC0	; 192
    1984:	88 e0       	ldi	r24, 0x08	; 8
    1986:	d8 07       	cpc	r29, r24
    1988:	29 f4       	brne	.+10     	; 0x1994 <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    198a:	68 e0       	ldi	r22, 0x08	; 8
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1992:	50 c0       	rjmp	.+160    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1994:	c0 3c       	cpi	r28, 0xC0	; 192
    1996:	e9 e0       	ldi	r30, 0x09	; 9
    1998:	de 07       	cpc	r29, r30
    199a:	29 f4       	brne	.+10     	; 0x19a6 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    199c:	68 e0       	ldi	r22, 0x08	; 8
    199e:	84 e0       	ldi	r24, 0x04	; 4
    19a0:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    19a4:	47 c0       	rjmp	.+142    	; 0x1a34 <usart_init_rs232+0x218>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    19a6:	c0 3a       	cpi	r28, 0xA0	; 160
    19a8:	f8 e0       	ldi	r31, 0x08	; 8
    19aa:	df 07       	cpc	r29, r31
    19ac:	29 f4       	brne	.+10     	; 0x19b8 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    19ae:	60 e1       	ldi	r22, 0x10	; 16
    19b0:	83 e0       	ldi	r24, 0x03	; 3
    19b2:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    19b6:	3e c0       	rjmp	.+124    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    19b8:	c0 3a       	cpi	r28, 0xA0	; 160
    19ba:	89 e0       	ldi	r24, 0x09	; 9
    19bc:	d8 07       	cpc	r29, r24
    19be:	29 f4       	brne	.+10     	; 0x19ca <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    19c0:	60 e1       	ldi	r22, 0x10	; 16
    19c2:	84 e0       	ldi	r24, 0x04	; 4
    19c4:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    19c8:	35 c0       	rjmp	.+106    	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    19ca:	c0 3a       	cpi	r28, 0xA0	; 160
    19cc:	ea e0       	ldi	r30, 0x0A	; 10
    19ce:	de 07       	cpc	r29, r30
    19d0:	29 f4       	brne	.+10     	; 0x19dc <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    19d2:	60 e1       	ldi	r22, 0x10	; 16
    19d4:	85 e0       	ldi	r24, 0x05	; 5
    19d6:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    19da:	2c c0       	rjmp	.+88     	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    19dc:	c0 3a       	cpi	r28, 0xA0	; 160
    19de:	fb e0       	ldi	r31, 0x0B	; 11
    19e0:	df 07       	cpc	r29, r31
    19e2:	29 f4       	brne	.+10     	; 0x19ee <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    19e4:	60 e1       	ldi	r22, 0x10	; 16
    19e6:	86 e0       	ldi	r24, 0x06	; 6
    19e8:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    19ec:	23 c0       	rjmp	.+70     	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    19ee:	c0 3b       	cpi	r28, 0xB0	; 176
    19f0:	88 e0       	ldi	r24, 0x08	; 8
    19f2:	d8 07       	cpc	r29, r24
    19f4:	29 f4       	brne	.+10     	; 0x1a00 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    19f6:	60 e2       	ldi	r22, 0x20	; 32
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    19fe:	1a c0       	rjmp	.+52     	; 0x1a34 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1a00:	c0 3b       	cpi	r28, 0xB0	; 176
    1a02:	e9 e0       	ldi	r30, 0x09	; 9
    1a04:	de 07       	cpc	r29, r30
    1a06:	29 f4       	brne	.+10     	; 0x1a12 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1a08:	60 e2       	ldi	r22, 0x20	; 32
    1a0a:	84 e0       	ldi	r24, 0x04	; 4
    1a0c:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1a10:	11 c0       	rjmp	.+34     	; 0x1a34 <usart_init_rs232+0x218>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1a12:	c0 38       	cpi	r28, 0x80	; 128
    1a14:	f4 e0       	ldi	r31, 0x04	; 4
    1a16:	df 07       	cpc	r29, r31
    1a18:	29 f4       	brne	.+10     	; 0x1a24 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1a1a:	60 e4       	ldi	r22, 0x40	; 64
    1a1c:	83 e0       	ldi	r24, 0x03	; 3
    1a1e:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
    1a22:	08 c0       	rjmp	.+16     	; 0x1a34 <usart_init_rs232+0x218>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1a24:	c0 3a       	cpi	r28, 0xA0	; 160
    1a26:	84 e0       	ldi	r24, 0x04	; 4
    1a28:	d8 07       	cpc	r29, r24
    1a2a:	21 f4       	brne	.+8      	; 0x1a34 <usart_init_rs232+0x218>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1a2c:	60 e4       	ldi	r22, 0x40	; 64
    1a2e:	85 e0       	ldi	r24, 0x05	; 5
    1a30:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	8f 73       	andi	r24, 0x3F	; 63
    1a38:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	94 81       	ldd	r25, Z+4	; 0x04
    1a3e:	85 81       	ldd	r24, Z+5	; 0x05
    1a40:	89 2b       	or	r24, r25
    1a42:	96 81       	ldd	r25, Z+6	; 0x06
    1a44:	91 11       	cpse	r25, r1
    1a46:	98 e0       	ldi	r25, 0x08	; 8
    1a48:	89 2b       	or	r24, r25
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	40 81       	ld	r20, Z
    1a50:	51 81       	ldd	r21, Z+1	; 0x01
    1a52:	62 81       	ldd	r22, Z+2	; 0x02
    1a54:	73 81       	ldd	r23, Z+3	; 0x03
    1a56:	00 e0       	ldi	r16, 0x00	; 0
    1a58:	16 e3       	ldi	r17, 0x36	; 54
    1a5a:	2e e6       	ldi	r18, 0x6E	; 110
    1a5c:	31 e0       	ldi	r19, 0x01	; 1
    1a5e:	ce 01       	movw	r24, r28
    1a60:	c4 dd       	rcall	.-1144   	; 0x15ea <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	98 60       	ori	r25, 0x08	; 8
    1a66:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	90 61       	ori	r25, 0x10	; 16
    1a6c:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	08 95       	ret

00001a78 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	1f 92       	push	r1
    1a7e:	1f 92       	push	r1
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	81 11       	cpse	r24, r1
    1a86:	26 c0       	rjmp	.+76     	; 0x1ad4 <udd_sleep_mode+0x5c>
    1a88:	90 91 24 23 	lds	r25, 0x2324	; 0x802324 <udd_b_idle>
    1a8c:	99 23       	and	r25, r25
    1a8e:	f9 f0       	breq	.+62     	; 0x1ace <udd_sleep_mode+0x56>
    1a90:	90 91 8b 23 	lds	r25, 0x238B	; 0x80238b <sleepmgr_locks+0x1>
    1a94:	91 11       	cpse	r25, r1
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <udd_sleep_mode+0x22>
    1a98:	ff cf       	rjmp	.-2      	; 0x1a98 <udd_sleep_mode+0x20>
    1a9a:	9f b7       	in	r25, 0x3f	; 63
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	f8 94       	cli
    1aa0:	2a 81       	ldd	r18, Y+2	; 0x02
    1aa2:	ea e8       	ldi	r30, 0x8A	; 138
    1aa4:	f3 e2       	ldi	r31, 0x23	; 35
    1aa6:	91 81       	ldd	r25, Z+1	; 0x01
    1aa8:	91 50       	subi	r25, 0x01	; 1
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	2f bf       	out	0x3f, r18	; 63
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <udd_sleep_mode+0x56>
    1ab0:	90 91 8b 23 	lds	r25, 0x238B	; 0x80238b <sleepmgr_locks+0x1>
    1ab4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <udd_sleep_mode+0x42>
    1ab8:	ff cf       	rjmp	.-2      	; 0x1ab8 <udd_sleep_mode+0x40>
    1aba:	9f b7       	in	r25, 0x3f	; 63
    1abc:	99 83       	std	Y+1, r25	; 0x01
    1abe:	f8 94       	cli
    1ac0:	29 81       	ldd	r18, Y+1	; 0x01
    1ac2:	ea e8       	ldi	r30, 0x8A	; 138
    1ac4:	f3 e2       	ldi	r31, 0x23	; 35
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	9f 5f       	subi	r25, 0xFF	; 255
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	2f bf       	out	0x3f, r18	; 63
    1ace:	80 93 24 23 	sts	0x2324, r24	; 0x802324 <udd_b_idle>
    1ad2:	05 c0       	rjmp	.+10     	; 0x1ade <udd_sleep_mode+0x66>
    1ad4:	90 91 24 23 	lds	r25, 0x2324	; 0x802324 <udd_b_idle>
    1ad8:	99 23       	and	r25, r25
    1ada:	51 f3       	breq	.-44     	; 0x1ab0 <udd_sleep_mode+0x38>
    1adc:	f8 cf       	rjmp	.-16     	; 0x1ace <udd_sleep_mode+0x56>
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	08 95       	ret

00001ae8 <udd_ctrl_init>:
    1ae8:	0f 93       	push	r16
    1aea:	e8 ec       	ldi	r30, 0xC8	; 200
    1aec:	f4 e0       	ldi	r31, 0x04	; 4
    1aee:	80 81       	ld	r24, Z
    1af0:	8f 7d       	andi	r24, 0xDF	; 223
    1af2:	80 83       	st	Z, r24
    1af4:	80 81       	ld	r24, Z
    1af6:	8f 7d       	andi	r24, 0xDF	; 223
    1af8:	80 83       	st	Z, r24
    1afa:	e8 ef       	ldi	r30, 0xF8	; 248
    1afc:	f2 e2       	ldi	r31, 0x22	; 34
    1afe:	02 e0       	ldi	r16, 0x02	; 2
    1b00:	05 93       	las	Z, r16
    1b02:	10 92 fa 22 	sts	0x22FA, r1	; 0x8022fa <udd_sram+0x16>
    1b06:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <udd_sram+0x17>
    1b0a:	00 e2       	ldi	r16, 0x20	; 32
    1b0c:	06 93       	lac	Z, r16
    1b0e:	00 e4       	ldi	r16, 0x40	; 64
    1b10:	06 93       	lac	Z, r16
    1b12:	e0 ef       	ldi	r30, 0xF0	; 240
    1b14:	f2 e2       	ldi	r31, 0x22	; 34
    1b16:	00 e4       	ldi	r16, 0x40	; 64
    1b18:	06 93       	lac	Z, r16
    1b1a:	e0 e9       	ldi	r30, 0x90	; 144
    1b1c:	f3 e2       	ldi	r31, 0x23	; 35
    1b1e:	14 86       	std	Z+12, r1	; 0x0c
    1b20:	15 86       	std	Z+13, r1	; 0x0d
    1b22:	16 86       	std	Z+14, r1	; 0x0e
    1b24:	17 86       	std	Z+15, r1	; 0x0f
    1b26:	12 86       	std	Z+10, r1	; 0x0a
    1b28:	13 86       	std	Z+11, r1	; 0x0b
    1b2a:	10 92 e3 22 	sts	0x22E3, r1	; 0x8022e3 <udd_ep_control_state>
    1b2e:	0f 91       	pop	r16
    1b30:	08 95       	ret

00001b32 <udd_ctrl_stall_data>:
    1b32:	0f 93       	push	r16
    1b34:	85 e0       	ldi	r24, 0x05	; 5
    1b36:	80 93 e3 22 	sts	0x22E3, r24	; 0x8022e3 <udd_ep_control_state>
    1b3a:	e9 ef       	ldi	r30, 0xF9	; 249
    1b3c:	f2 e2       	ldi	r31, 0x22	; 34
    1b3e:	04 e0       	ldi	r16, 0x04	; 4
    1b40:	05 93       	las	Z, r16
    1b42:	e1 ef       	ldi	r30, 0xF1	; 241
    1b44:	f2 e2       	ldi	r31, 0x22	; 34
    1b46:	04 e0       	ldi	r16, 0x04	; 4
    1b48:	05 93       	las	Z, r16
    1b4a:	0f 91       	pop	r16
    1b4c:	08 95       	ret

00001b4e <udd_ctrl_send_zlp_in>:
    1b4e:	0f 93       	push	r16
    1b50:	83 e0       	ldi	r24, 0x03	; 3
    1b52:	80 93 e3 22 	sts	0x22E3, r24	; 0x8022e3 <udd_ep_control_state>
    1b56:	10 92 fa 22 	sts	0x22FA, r1	; 0x8022fa <udd_sram+0x16>
    1b5a:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <udd_sram+0x17>
    1b5e:	e8 ef       	ldi	r30, 0xF8	; 248
    1b60:	f2 e2       	ldi	r31, 0x22	; 34
    1b62:	02 e0       	ldi	r16, 0x02	; 2
    1b64:	06 93       	lac	Z, r16
    1b66:	0f 91       	pop	r16
    1b68:	08 95       	ret

00001b6a <udd_ctrl_endofrequest>:
    1b6a:	e0 91 9c 23 	lds	r30, 0x239C	; 0x80239c <udd_g_ctrlreq+0xc>
    1b6e:	f0 91 9d 23 	lds	r31, 0x239D	; 0x80239d <udd_g_ctrlreq+0xd>
    1b72:	30 97       	sbiw	r30, 0x00	; 0
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <udd_ctrl_endofrequest+0xe>
    1b76:	19 95       	eicall
    1b78:	08 95       	ret

00001b7a <udd_ctrl_in_sent>:
    1b7a:	0f 93       	push	r16
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <udd_ep_control_state>
    1b84:	83 30       	cpi	r24, 0x03	; 3
    1b86:	19 f4       	brne	.+6      	; 0x1b8e <udd_ctrl_in_sent+0x14>
    1b88:	f0 df       	rcall	.-32     	; 0x1b6a <udd_ctrl_endofrequest>
    1b8a:	ae df       	rcall	.-164    	; 0x1ae8 <udd_ctrl_init>
    1b8c:	5e c0       	rjmp	.+188    	; 0x1c4a <udd_ctrl_in_sent+0xd0>
    1b8e:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <udd_ctrl_payload_nb_trans>
    1b92:	90 91 e0 22 	lds	r25, 0x22E0	; 0x8022e0 <udd_ctrl_payload_nb_trans+0x1>
    1b96:	c0 91 9a 23 	lds	r28, 0x239A	; 0x80239a <udd_g_ctrlreq+0xa>
    1b9a:	d0 91 9b 23 	lds	r29, 0x239B	; 0x80239b <udd_g_ctrlreq+0xb>
    1b9e:	c8 1b       	sub	r28, r24
    1ba0:	d9 0b       	sbc	r29, r25
    1ba2:	71 f5       	brne	.+92     	; 0x1c00 <udd_ctrl_in_sent+0x86>
    1ba4:	20 91 e1 22 	lds	r18, 0x22E1	; 0x8022e1 <udd_ctrl_prev_payload_nb_trans>
    1ba8:	30 91 e2 22 	lds	r19, 0x22E2	; 0x8022e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    1bac:	82 0f       	add	r24, r18
    1bae:	93 1f       	adc	r25, r19
    1bb0:	80 93 e1 22 	sts	0x22E1, r24	; 0x8022e1 <udd_ctrl_prev_payload_nb_trans>
    1bb4:	90 93 e2 22 	sts	0x22E2, r25	; 0x8022e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    1bb8:	20 91 96 23 	lds	r18, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
    1bbc:	30 91 97 23 	lds	r19, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
    1bc0:	82 17       	cp	r24, r18
    1bc2:	93 07       	cpc	r25, r19
    1bc4:	21 f0       	breq	.+8      	; 0x1bce <udd_ctrl_in_sent+0x54>
    1bc6:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <b_shortpacket.5289>
    1bca:	88 23       	and	r24, r24
    1bcc:	41 f0       	breq	.+16     	; 0x1bde <udd_ctrl_in_sent+0x64>
    1bce:	84 e0       	ldi	r24, 0x04	; 4
    1bd0:	80 93 e3 22 	sts	0x22E3, r24	; 0x8022e3 <udd_ep_control_state>
    1bd4:	e0 ef       	ldi	r30, 0xF0	; 240
    1bd6:	f2 e2       	ldi	r31, 0x22	; 34
    1bd8:	02 e0       	ldi	r16, 0x02	; 2
    1bda:	06 93       	lac	Z, r16
    1bdc:	36 c0       	rjmp	.+108    	; 0x1c4a <udd_ctrl_in_sent+0xd0>
    1bde:	e0 91 9e 23 	lds	r30, 0x239E	; 0x80239e <udd_g_ctrlreq+0xe>
    1be2:	f0 91 9f 23 	lds	r31, 0x239F	; 0x80239f <udd_g_ctrlreq+0xf>
    1be6:	30 97       	sbiw	r30, 0x00	; 0
    1be8:	99 f0       	breq	.+38     	; 0x1c10 <udd_ctrl_in_sent+0x96>
    1bea:	19 95       	eicall
    1bec:	88 23       	and	r24, r24
    1bee:	81 f0       	breq	.+32     	; 0x1c10 <udd_ctrl_in_sent+0x96>
    1bf0:	10 92 df 22 	sts	0x22DF, r1	; 0x8022df <udd_ctrl_payload_nb_trans>
    1bf4:	10 92 e0 22 	sts	0x22E0, r1	; 0x8022e0 <udd_ctrl_payload_nb_trans+0x1>
    1bf8:	c0 91 9a 23 	lds	r28, 0x239A	; 0x80239a <udd_g_ctrlreq+0xa>
    1bfc:	d0 91 9b 23 	lds	r29, 0x239B	; 0x80239b <udd_g_ctrlreq+0xb>
    1c00:	c0 34       	cpi	r28, 0x40	; 64
    1c02:	d1 05       	cpc	r29, r1
    1c04:	28 f0       	brcs	.+10     	; 0x1c10 <udd_ctrl_in_sent+0x96>
    1c06:	10 92 fa 21 	sts	0x21FA, r1	; 0x8021fa <b_shortpacket.5289>
    1c0a:	c0 e4       	ldi	r28, 0x40	; 64
    1c0c:	d0 e0       	ldi	r29, 0x00	; 0
    1c0e:	03 c0       	rjmp	.+6      	; 0x1c16 <udd_ctrl_in_sent+0x9c>
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <b_shortpacket.5289>
    1c16:	e4 ee       	ldi	r30, 0xE4	; 228
    1c18:	f2 e2       	ldi	r31, 0x22	; 34
    1c1a:	c6 8b       	std	Z+22, r28	; 0x16
    1c1c:	d7 8b       	std	Z+23, r29	; 0x17
    1c1e:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <udd_ctrl_payload_nb_trans>
    1c22:	90 91 e0 22 	lds	r25, 0x22E0	; 0x8022e0 <udd_ctrl_payload_nb_trans+0x1>
    1c26:	20 91 98 23 	lds	r18, 0x2398	; 0x802398 <udd_g_ctrlreq+0x8>
    1c2a:	30 91 99 23 	lds	r19, 0x2399	; 0x802399 <udd_g_ctrlreq+0x9>
    1c2e:	28 0f       	add	r18, r24
    1c30:	39 1f       	adc	r19, r25
    1c32:	20 8f       	std	Z+24, r18	; 0x18
    1c34:	31 8f       	std	Z+25, r19	; 0x19
    1c36:	c8 0f       	add	r28, r24
    1c38:	d9 1f       	adc	r29, r25
    1c3a:	c0 93 df 22 	sts	0x22DF, r28	; 0x8022df <udd_ctrl_payload_nb_trans>
    1c3e:	d0 93 e0 22 	sts	0x22E0, r29	; 0x8022e0 <udd_ctrl_payload_nb_trans+0x1>
    1c42:	e8 ef       	ldi	r30, 0xF8	; 248
    1c44:	f2 e2       	ldi	r31, 0x22	; 34
    1c46:	02 e0       	ldi	r16, 0x02	; 2
    1c48:	06 93       	lac	Z, r16
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	0f 91       	pop	r16
    1c50:	08 95       	ret

00001c52 <udd_ep_get_size>:
    1c52:	fc 01       	movw	r30, r24
    1c54:	81 81       	ldd	r24, Z+1	; 0x01
    1c56:	e8 2f       	mov	r30, r24
    1c58:	e7 70       	andi	r30, 0x07	; 7
    1c5a:	8e 2f       	mov	r24, r30
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	fc 01       	movw	r30, r24
    1c60:	31 97       	sbiw	r30, 0x01	; 1
    1c62:	e7 30       	cpi	r30, 0x07	; 7
    1c64:	f1 05       	cpc	r31, r1
    1c66:	d8 f4       	brcc	.+54     	; 0x1c9e <udd_ep_get_size+0x4c>
    1c68:	88 27       	eor	r24, r24
    1c6a:	e2 50       	subi	r30, 0x02	; 2
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c70:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__tablejump2__>
    1c74:	80 e1       	ldi	r24, 0x10	; 16
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	08 95       	ret
    1c7a:	80 e2       	ldi	r24, 0x20	; 32
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	08 95       	ret
    1c80:	80 e4       	ldi	r24, 0x40	; 64
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	08 95       	ret
    1c86:	80 e8       	ldi	r24, 0x80	; 128
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	08 95       	ret
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	91 e0       	ldi	r25, 0x01	; 1
    1c90:	08 95       	ret
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	92 e0       	ldi	r25, 0x02	; 2
    1c96:	08 95       	ret
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	93 e0       	ldi	r25, 0x03	; 3
    1c9c:	08 95       	ret
    1c9e:	88 e0       	ldi	r24, 0x08	; 8
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	08 95       	ret

00001ca4 <udd_ep_get_job>:
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	2f 70       	andi	r18, 0x0F	; 15
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	22 0f       	add	r18, r18
    1cac:	33 1f       	adc	r19, r19
    1cae:	08 2e       	mov	r0, r24
    1cb0:	00 0c       	add	r0, r0
    1cb2:	99 0b       	sbc	r25, r25
    1cb4:	88 27       	eor	r24, r24
    1cb6:	99 0f       	add	r25, r25
    1cb8:	88 1f       	adc	r24, r24
    1cba:	99 27       	eor	r25, r25
    1cbc:	82 0f       	add	r24, r18
    1cbe:	93 1f       	adc	r25, r19
    1cc0:	02 97       	sbiw	r24, 0x02	; 2
    1cc2:	9c 01       	movw	r18, r24
    1cc4:	22 0f       	add	r18, r18
    1cc6:	33 1f       	adc	r19, r19
    1cc8:	22 0f       	add	r18, r18
    1cca:	33 1f       	adc	r19, r19
    1ccc:	22 0f       	add	r18, r18
    1cce:	33 1f       	adc	r19, r19
    1cd0:	82 0f       	add	r24, r18
    1cd2:	93 1f       	adc	r25, r19
    1cd4:	85 58       	subi	r24, 0x85	; 133
    1cd6:	9d 4d       	sbci	r25, 0xDD	; 221
    1cd8:	08 95       	ret

00001cda <udd_ctrl_interrupt_tc_setup>:
    1cda:	0f 93       	push	r16
    1cdc:	cf 93       	push	r28
    1cde:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1ce2:	80 ff       	sbrs	r24, 0
    1ce4:	64 c0       	rjmp	.+200    	; 0x1dae <udd_ctrl_interrupt_tc_setup+0xd4>
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1cec:	e0 ef       	ldi	r30, 0xF0	; 240
    1cee:	f2 e2       	ldi	r31, 0x22	; 34
    1cf0:	00 e8       	ldi	r16, 0x80	; 128
    1cf2:	06 93       	lac	Z, r16
    1cf4:	e8 ef       	ldi	r30, 0xF8	; 248
    1cf6:	f2 e2       	ldi	r31, 0x22	; 34
    1cf8:	00 e8       	ldi	r16, 0x80	; 128
    1cfa:	06 93       	lac	Z, r16
    1cfc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1d00:	e0 ef       	ldi	r30, 0xF0	; 240
    1d02:	f2 e2       	ldi	r31, 0x22	; 34
    1d04:	00 e1       	ldi	r16, 0x10	; 16
    1d06:	06 93       	lac	Z, r16
    1d08:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <udd_ep_control_state>
    1d0c:	88 23       	and	r24, r24
    1d0e:	29 f0       	breq	.+10     	; 0x1d1a <udd_ctrl_interrupt_tc_setup+0x40>
    1d10:	83 50       	subi	r24, 0x03	; 3
    1d12:	82 30       	cpi	r24, 0x02	; 2
    1d14:	08 f4       	brcc	.+2      	; 0x1d18 <udd_ctrl_interrupt_tc_setup+0x3e>
    1d16:	29 df       	rcall	.-430    	; 0x1b6a <udd_ctrl_endofrequest>
    1d18:	e7 de       	rcall	.-562    	; 0x1ae8 <udd_ctrl_init>
    1d1a:	80 91 f2 22 	lds	r24, 0x22F2	; 0x8022f2 <udd_sram+0xe>
    1d1e:	90 91 f3 22 	lds	r25, 0x22F3	; 0x8022f3 <udd_sram+0xf>
    1d22:	08 97       	sbiw	r24, 0x08	; 8
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <udd_ctrl_interrupt_tc_setup+0x4e>
    1d26:	45 c0       	rjmp	.+138    	; 0x1db2 <udd_ctrl_interrupt_tc_setup+0xd8>
    1d28:	88 e0       	ldi	r24, 0x08	; 8
    1d2a:	ef e9       	ldi	r30, 0x9F	; 159
    1d2c:	f2 e2       	ldi	r31, 0x22	; 34
    1d2e:	a0 e9       	ldi	r26, 0x90	; 144
    1d30:	b3 e2       	ldi	r27, 0x23	; 35
    1d32:	01 90       	ld	r0, Z+
    1d34:	0d 92       	st	X+, r0
    1d36:	8a 95       	dec	r24
    1d38:	e1 f7       	brne	.-8      	; 0x1d32 <udd_ctrl_interrupt_tc_setup+0x58>
    1d3a:	e8 ec       	ldi	r30, 0xC8	; 200
    1d3c:	f4 e0       	ldi	r31, 0x04	; 4
    1d3e:	80 81       	ld	r24, Z
    1d40:	80 62       	ori	r24, 0x20	; 32
    1d42:	80 83       	st	Z, r24
    1d44:	80 81       	ld	r24, Z
    1d46:	80 62       	ori	r24, 0x20	; 32
    1d48:	80 83       	st	Z, r24
    1d4a:	83 d9       	rcall	.-3322   	; 0x1052 <udc_process_setup>
    1d4c:	c8 2f       	mov	r28, r24
    1d4e:	81 11       	cpse	r24, r1
    1d50:	03 c0       	rjmp	.+6      	; 0x1d58 <udd_ctrl_interrupt_tc_setup+0x7e>
    1d52:	ef de       	rcall	.-546    	; 0x1b32 <udd_ctrl_stall_data>
    1d54:	c1 e0       	ldi	r28, 0x01	; 1
    1d56:	2e c0       	rjmp	.+92     	; 0x1db4 <udd_ctrl_interrupt_tc_setup+0xda>
    1d58:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <udd_g_ctrlreq>
    1d5c:	88 23       	and	r24, r24
    1d5e:	6c f4       	brge	.+26     	; 0x1d7a <udd_ctrl_interrupt_tc_setup+0xa0>
    1d60:	10 92 e1 22 	sts	0x22E1, r1	; 0x8022e1 <udd_ctrl_prev_payload_nb_trans>
    1d64:	10 92 e2 22 	sts	0x22E2, r1	; 0x8022e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d68:	10 92 df 22 	sts	0x22DF, r1	; 0x8022df <udd_ctrl_payload_nb_trans>
    1d6c:	10 92 e0 22 	sts	0x22E0, r1	; 0x8022e0 <udd_ctrl_payload_nb_trans+0x1>
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	80 93 e3 22 	sts	0x22E3, r24	; 0x8022e3 <udd_ep_control_state>
    1d76:	01 df       	rcall	.-510    	; 0x1b7a <udd_ctrl_in_sent>
    1d78:	1d c0       	rjmp	.+58     	; 0x1db4 <udd_ctrl_interrupt_tc_setup+0xda>
    1d7a:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
    1d7e:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
    1d82:	89 2b       	or	r24, r25
    1d84:	11 f4       	brne	.+4      	; 0x1d8a <udd_ctrl_interrupt_tc_setup+0xb0>
    1d86:	e3 de       	rcall	.-570    	; 0x1b4e <udd_ctrl_send_zlp_in>
    1d88:	15 c0       	rjmp	.+42     	; 0x1db4 <udd_ctrl_interrupt_tc_setup+0xda>
    1d8a:	10 92 e1 22 	sts	0x22E1, r1	; 0x8022e1 <udd_ctrl_prev_payload_nb_trans>
    1d8e:	10 92 e2 22 	sts	0x22E2, r1	; 0x8022e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d92:	10 92 df 22 	sts	0x22DF, r1	; 0x8022df <udd_ctrl_payload_nb_trans>
    1d96:	10 92 e0 22 	sts	0x22E0, r1	; 0x8022e0 <udd_ctrl_payload_nb_trans+0x1>
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	80 93 e3 22 	sts	0x22E3, r24	; 0x8022e3 <udd_ep_control_state>
    1da0:	e0 ef       	ldi	r30, 0xF0	; 240
    1da2:	f2 e2       	ldi	r31, 0x22	; 34
    1da4:	02 e0       	ldi	r16, 0x02	; 2
    1da6:	06 93       	lac	Z, r16
    1da8:	00 e2       	ldi	r16, 0x20	; 32
    1daa:	06 93       	lac	Z, r16
    1dac:	03 c0       	rjmp	.+6      	; 0x1db4 <udd_ctrl_interrupt_tc_setup+0xda>
    1dae:	c0 e0       	ldi	r28, 0x00	; 0
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <udd_ctrl_interrupt_tc_setup+0xda>
    1db2:	c1 e0       	ldi	r28, 0x01	; 1
    1db4:	8c 2f       	mov	r24, r28
    1db6:	cf 91       	pop	r28
    1db8:	0f 91       	pop	r16
    1dba:	08 95       	ret

00001dbc <udd_ep_trans_complet>:
    1dbc:	8f 92       	push	r8
    1dbe:	9f 92       	push	r9
    1dc0:	af 92       	push	r10
    1dc2:	bf 92       	push	r11
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	d8 2e       	mov	r13, r24
    1dd4:	67 df       	rcall	.-306    	; 0x1ca4 <udd_ep_get_job>
    1dd6:	8c 01       	movw	r16, r24
    1dd8:	bd 2c       	mov	r11, r13
    1dda:	bb 1c       	adc	r11, r11
    1ddc:	bb 24       	eor	r11, r11
    1dde:	bb 1c       	adc	r11, r11
    1de0:	cd 2d       	mov	r28, r13
    1de2:	cf 70       	andi	r28, 0x0F	; 15
    1de4:	d0 e0       	ldi	r29, 0x00	; 0
    1de6:	cc 0f       	add	r28, r28
    1de8:	dd 1f       	adc	r29, r29
    1dea:	cb 0d       	add	r28, r11
    1dec:	d1 1d       	adc	r29, r1
    1dee:	ce 01       	movw	r24, r28
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	20 51       	subi	r18, 0x10	; 16
    1e00:	3d 4d       	sbci	r19, 0xDD	; 221
    1e02:	79 01       	movw	r14, r18
    1e04:	c9 01       	movw	r24, r18
    1e06:	25 df       	rcall	.-438    	; 0x1c52 <udd_ep_get_size>
    1e08:	4c 01       	movw	r8, r24
    1e0a:	bb 20       	and	r11, r11
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <udd_ep_trans_complet+0x54>
    1e0e:	79 c0       	rjmp	.+242    	; 0x1f02 <udd_ep_trans_complet+0x146>
    1e10:	fe 01       	movw	r30, r28
    1e12:	ee 0f       	add	r30, r30
    1e14:	ff 1f       	adc	r31, r31
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	ee 0f       	add	r30, r30
    1e1c:	ff 1f       	adc	r31, r31
    1e1e:	ec 51       	subi	r30, 0x1C	; 28
    1e20:	fd 4d       	sbci	r31, 0xDD	; 221
    1e22:	22 89       	ldd	r18, Z+18	; 0x12
    1e24:	33 89       	ldd	r19, Z+19	; 0x13
    1e26:	d8 01       	movw	r26, r16
    1e28:	15 96       	adiw	r26, 0x05	; 5
    1e2a:	8d 91       	ld	r24, X+
    1e2c:	9c 91       	ld	r25, X
    1e2e:	16 97       	sbiw	r26, 0x06	; 6
    1e30:	82 0f       	add	r24, r18
    1e32:	93 1f       	adc	r25, r19
    1e34:	15 96       	adiw	r26, 0x05	; 5
    1e36:	8d 93       	st	X+, r24
    1e38:	9c 93       	st	X, r25
    1e3a:	16 97       	sbiw	r26, 0x06	; 6
    1e3c:	13 96       	adiw	r26, 0x03	; 3
    1e3e:	2d 91       	ld	r18, X+
    1e40:	3c 91       	ld	r19, X
    1e42:	14 97       	sbiw	r26, 0x04	; 4
    1e44:	82 17       	cp	r24, r18
    1e46:	93 07       	cpc	r25, r19
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <udd_ep_trans_complet+0x90>
    1e4a:	45 c0       	rjmp	.+138    	; 0x1ed6 <udd_ep_trans_complet+0x11a>
    1e4c:	28 1b       	sub	r18, r24
    1e4e:	39 0b       	sbc	r19, r25
    1e50:	21 15       	cp	r18, r1
    1e52:	b4 e0       	ldi	r27, 0x04	; 4
    1e54:	3b 07       	cpc	r19, r27
    1e56:	38 f0       	brcs	.+14     	; 0x1e66 <udd_ep_trans_complet+0xaa>
    1e58:	2f ef       	ldi	r18, 0xFF	; 255
    1e5a:	33 e0       	ldi	r19, 0x03	; 3
    1e5c:	c9 01       	movw	r24, r18
    1e5e:	b4 01       	movw	r22, r8
    1e60:	49 d7       	rcall	.+3730   	; 0x2cf4 <__udivmodhi4>
    1e62:	28 1b       	sub	r18, r24
    1e64:	39 0b       	sbc	r19, r25
    1e66:	f8 01       	movw	r30, r16
    1e68:	80 81       	ld	r24, Z
    1e6a:	81 ff       	sbrs	r24, 1
    1e6c:	09 c0       	rjmp	.+18     	; 0x1e80 <udd_ep_trans_complet+0xc4>
    1e6e:	c9 01       	movw	r24, r18
    1e70:	b4 01       	movw	r22, r8
    1e72:	40 d7       	rcall	.+3712   	; 0x2cf4 <__udivmodhi4>
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	89 2b       	or	r24, r25
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <udd_ep_trans_complet+0xc0>
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	84 2f       	mov	r24, r20
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <udd_ep_trans_complet+0xc6>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	d8 01       	movw	r26, r16
    1e84:	9c 91       	ld	r25, X
    1e86:	80 fb       	bst	r24, 0
    1e88:	91 f9       	bld	r25, 1
    1e8a:	9c 93       	st	X, r25
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ee 0f       	add	r30, r30
    1e90:	ff 1f       	adc	r31, r31
    1e92:	ee 0f       	add	r30, r30
    1e94:	ff 1f       	adc	r31, r31
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	ec 51       	subi	r30, 0x1C	; 28
    1e9c:	fd 4d       	sbci	r31, 0xDD	; 221
    1e9e:	12 8a       	std	Z+18, r1	; 0x12
    1ea0:	13 8a       	std	Z+19, r1	; 0x13
    1ea2:	26 87       	std	Z+14, r18	; 0x0e
    1ea4:	37 87       	std	Z+15, r19	; 0x0f
    1ea6:	11 96       	adiw	r26, 0x01	; 1
    1ea8:	2d 91       	ld	r18, X+
    1eaa:	3c 91       	ld	r19, X
    1eac:	12 97       	sbiw	r26, 0x02	; 2
    1eae:	15 96       	adiw	r26, 0x05	; 5
    1eb0:	8d 91       	ld	r24, X+
    1eb2:	9c 91       	ld	r25, X
    1eb4:	16 97       	sbiw	r26, 0x06	; 6
    1eb6:	82 0f       	add	r24, r18
    1eb8:	93 1f       	adc	r25, r19
    1eba:	cc 0f       	add	r28, r28
    1ebc:	dd 1f       	adc	r29, r29
    1ebe:	cc 0f       	add	r28, r28
    1ec0:	dd 1f       	adc	r29, r29
    1ec2:	cc 0f       	add	r28, r28
    1ec4:	dd 1f       	adc	r29, r29
    1ec6:	cc 50       	subi	r28, 0x0C	; 12
    1ec8:	dd 4d       	sbci	r29, 0xDD	; 221
    1eca:	88 83       	st	Y, r24
    1ecc:	99 83       	std	Y+1, r25	; 0x01
    1ece:	f7 01       	movw	r30, r14
    1ed0:	02 e0       	ldi	r16, 0x02	; 2
    1ed2:	06 93       	lac	Z, r16
    1ed4:	e4 c0       	rjmp	.+456    	; 0x209e <udd_ep_trans_complet+0x2e2>
    1ed6:	d8 01       	movw	r26, r16
    1ed8:	8c 91       	ld	r24, X
    1eda:	81 ff       	sbrs	r24, 1
    1edc:	cd c0       	rjmp	.+410    	; 0x2078 <udd_ep_trans_complet+0x2bc>
    1ede:	8d 7f       	andi	r24, 0xFD	; 253
    1ee0:	8c 93       	st	X, r24
    1ee2:	cc 0f       	add	r28, r28
    1ee4:	dd 1f       	adc	r29, r29
    1ee6:	cc 0f       	add	r28, r28
    1ee8:	dd 1f       	adc	r29, r29
    1eea:	cc 0f       	add	r28, r28
    1eec:	dd 1f       	adc	r29, r29
    1eee:	cc 51       	subi	r28, 0x1C	; 28
    1ef0:	dd 4d       	sbci	r29, 0xDD	; 221
    1ef2:	1a 8a       	std	Y+18, r1	; 0x12
    1ef4:	1b 8a       	std	Y+19, r1	; 0x13
    1ef6:	1e 86       	std	Y+14, r1	; 0x0e
    1ef8:	1f 86       	std	Y+15, r1	; 0x0f
    1efa:	f7 01       	movw	r30, r14
    1efc:	02 e0       	ldi	r16, 0x02	; 2
    1efe:	06 93       	lac	Z, r16
    1f00:	ce c0       	rjmp	.+412    	; 0x209e <udd_ep_trans_complet+0x2e2>
    1f02:	fe 01       	movw	r30, r28
    1f04:	ee 0f       	add	r30, r30
    1f06:	ff 1f       	adc	r31, r31
    1f08:	ee 0f       	add	r30, r30
    1f0a:	ff 1f       	adc	r31, r31
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	ec 51       	subi	r30, 0x1C	; 28
    1f12:	fd 4d       	sbci	r31, 0xDD	; 221
    1f14:	a6 84       	ldd	r10, Z+14	; 0x0e
    1f16:	b7 84       	ldd	r11, Z+15	; 0x0f
    1f18:	d8 01       	movw	r26, r16
    1f1a:	8c 91       	ld	r24, X
    1f1c:	82 ff       	sbrs	r24, 2
    1f1e:	19 c0       	rjmp	.+50     	; 0x1f52 <udd_ep_trans_complet+0x196>
    1f20:	11 96       	adiw	r26, 0x01	; 1
    1f22:	ed 91       	ld	r30, X+
    1f24:	fc 91       	ld	r31, X
    1f26:	12 97       	sbiw	r26, 0x02	; 2
    1f28:	15 96       	adiw	r26, 0x05	; 5
    1f2a:	2d 91       	ld	r18, X+
    1f2c:	3c 91       	ld	r19, X
    1f2e:	16 97       	sbiw	r26, 0x06	; 6
    1f30:	13 96       	adiw	r26, 0x03	; 3
    1f32:	8d 91       	ld	r24, X+
    1f34:	9c 91       	ld	r25, X
    1f36:	14 97       	sbiw	r26, 0x04	; 4
    1f38:	b4 01       	movw	r22, r8
    1f3a:	dc d6       	rcall	.+3512   	; 0x2cf4 <__udivmodhi4>
    1f3c:	b0 e4       	ldi	r27, 0x40	; 64
    1f3e:	db 9e       	mul	r13, r27
    1f40:	b0 01       	movw	r22, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	65 54       	subi	r22, 0x45	; 69
    1f46:	7e 4d       	sbci	r23, 0xDE	; 222
    1f48:	ac 01       	movw	r20, r24
    1f4a:	cf 01       	movw	r24, r30
    1f4c:	82 0f       	add	r24, r18
    1f4e:	93 1f       	adc	r25, r19
    1f50:	0f d7       	rcall	.+3614   	; 0x2d70 <memcpy>
    1f52:	f8 01       	movw	r30, r16
    1f54:	25 81       	ldd	r18, Z+5	; 0x05
    1f56:	36 81       	ldd	r19, Z+6	; 0x06
    1f58:	2a 0d       	add	r18, r10
    1f5a:	3b 1d       	adc	r19, r11
    1f5c:	25 83       	std	Z+5, r18	; 0x05
    1f5e:	36 83       	std	Z+6, r19	; 0x06
    1f60:	83 81       	ldd	r24, Z+3	; 0x03
    1f62:	94 81       	ldd	r25, Z+4	; 0x04
    1f64:	82 17       	cp	r24, r18
    1f66:	93 07       	cpc	r25, r19
    1f68:	68 f4       	brcc	.+26     	; 0x1f84 <udd_ep_trans_complet+0x1c8>
    1f6a:	85 83       	std	Z+5, r24	; 0x05
    1f6c:	96 83       	std	Z+6, r25	; 0x06
    1f6e:	cc 0f       	add	r28, r28
    1f70:	dd 1f       	adc	r29, r29
    1f72:	cc 0f       	add	r28, r28
    1f74:	dd 1f       	adc	r29, r29
    1f76:	cc 0f       	add	r28, r28
    1f78:	dd 1f       	adc	r29, r29
    1f7a:	cc 51       	subi	r28, 0x1C	; 28
    1f7c:	dd 4d       	sbci	r29, 0xDD	; 221
    1f7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1f80:	9b 89       	ldd	r25, Y+19	; 0x13
    1f82:	7a c0       	rjmp	.+244    	; 0x2078 <udd_ep_trans_complet+0x2bc>
    1f84:	fe 01       	movw	r30, r28
    1f86:	ee 0f       	add	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	ec 51       	subi	r30, 0x1C	; 28
    1f94:	fd 4d       	sbci	r31, 0xDD	; 221
    1f96:	42 89       	ldd	r20, Z+18	; 0x12
    1f98:	53 89       	ldd	r21, Z+19	; 0x13
    1f9a:	4a 15       	cp	r20, r10
    1f9c:	5b 05       	cpc	r21, r11
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <udd_ep_trans_complet+0x1e6>
    1fa0:	6b c0       	rjmp	.+214    	; 0x2078 <udd_ep_trans_complet+0x2bc>
    1fa2:	28 17       	cp	r18, r24
    1fa4:	39 07       	cpc	r19, r25
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <udd_ep_trans_complet+0x1ee>
    1fa8:	67 c0       	rjmp	.+206    	; 0x2078 <udd_ep_trans_complet+0x2bc>
    1faa:	ac 01       	movw	r20, r24
    1fac:	42 1b       	sub	r20, r18
    1fae:	53 0b       	sbc	r21, r19
    1fb0:	9a 01       	movw	r18, r20
    1fb2:	21 15       	cp	r18, r1
    1fb4:	54 e0       	ldi	r21, 0x04	; 4
    1fb6:	35 07       	cpc	r19, r21
    1fb8:	50 f0       	brcs	.+20     	; 0x1fce <udd_ep_trans_complet+0x212>
    1fba:	2f ef       	ldi	r18, 0xFF	; 255
    1fbc:	33 e0       	ldi	r19, 0x03	; 3
    1fbe:	c9 01       	movw	r24, r18
    1fc0:	b4 01       	movw	r22, r8
    1fc2:	98 d6       	rcall	.+3376   	; 0x2cf4 <__udivmodhi4>
    1fc4:	d9 01       	movw	r26, r18
    1fc6:	a8 1b       	sub	r26, r24
    1fc8:	b9 0b       	sbc	r27, r25
    1fca:	cd 01       	movw	r24, r26
    1fcc:	07 c0       	rjmp	.+14     	; 0x1fdc <udd_ep_trans_complet+0x220>
    1fce:	c9 01       	movw	r24, r18
    1fd0:	b4 01       	movw	r22, r8
    1fd2:	90 d6       	rcall	.+3360   	; 0x2cf4 <__udivmodhi4>
    1fd4:	f9 01       	movw	r30, r18
    1fd6:	e8 1b       	sub	r30, r24
    1fd8:	f9 0b       	sbc	r31, r25
    1fda:	cf 01       	movw	r24, r30
    1fdc:	fe 01       	movw	r30, r28
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	ee 0f       	add	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	ec 51       	subi	r30, 0x1C	; 28
    1fec:	fd 4d       	sbci	r31, 0xDD	; 221
    1fee:	16 86       	std	Z+14, r1	; 0x0e
    1ff0:	17 86       	std	Z+15, r1	; 0x0f
    1ff2:	88 15       	cp	r24, r8
    1ff4:	99 05       	cpc	r25, r9
    1ff6:	00 f5       	brcc	.+64     	; 0x2038 <udd_ep_trans_complet+0x27c>
    1ff8:	d8 01       	movw	r26, r16
    1ffa:	8c 91       	ld	r24, X
    1ffc:	84 60       	ori	r24, 0x04	; 4
    1ffe:	8c 93       	st	X, r24
    2000:	b0 e4       	ldi	r27, 0x40	; 64
    2002:	db 9e       	mul	r13, r27
    2004:	c0 01       	movw	r24, r0
    2006:	11 24       	eor	r1, r1
    2008:	85 54       	subi	r24, 0x45	; 69
    200a:	9e 4d       	sbci	r25, 0xDE	; 222
    200c:	fe 01       	movw	r30, r28
    200e:	ee 0f       	add	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	ee 0f       	add	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	ee 0f       	add	r30, r30
    2018:	ff 1f       	adc	r31, r31
    201a:	ec 50       	subi	r30, 0x0C	; 12
    201c:	fd 4d       	sbci	r31, 0xDD	; 221
    201e:	80 83       	st	Z, r24
    2020:	91 83       	std	Z+1, r25	; 0x01
    2022:	cc 0f       	add	r28, r28
    2024:	dd 1f       	adc	r29, r29
    2026:	cc 0f       	add	r28, r28
    2028:	dd 1f       	adc	r29, r29
    202a:	cc 0f       	add	r28, r28
    202c:	dd 1f       	adc	r29, r29
    202e:	cc 51       	subi	r28, 0x1C	; 28
    2030:	dd 4d       	sbci	r29, 0xDD	; 221
    2032:	8a 8a       	std	Y+18, r8	; 0x12
    2034:	9b 8a       	std	Y+19, r9	; 0x13
    2036:	1c c0       	rjmp	.+56     	; 0x2070 <udd_ep_trans_complet+0x2b4>
    2038:	f8 01       	movw	r30, r16
    203a:	41 81       	ldd	r20, Z+1	; 0x01
    203c:	52 81       	ldd	r21, Z+2	; 0x02
    203e:	25 81       	ldd	r18, Z+5	; 0x05
    2040:	36 81       	ldd	r19, Z+6	; 0x06
    2042:	24 0f       	add	r18, r20
    2044:	35 1f       	adc	r19, r21
    2046:	fe 01       	movw	r30, r28
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	ee 0f       	add	r30, r30
    2052:	ff 1f       	adc	r31, r31
    2054:	ec 50       	subi	r30, 0x0C	; 12
    2056:	fd 4d       	sbci	r31, 0xDD	; 221
    2058:	20 83       	st	Z, r18
    205a:	31 83       	std	Z+1, r19	; 0x01
    205c:	cc 0f       	add	r28, r28
    205e:	dd 1f       	adc	r29, r29
    2060:	cc 0f       	add	r28, r28
    2062:	dd 1f       	adc	r29, r29
    2064:	cc 0f       	add	r28, r28
    2066:	dd 1f       	adc	r29, r29
    2068:	cc 51       	subi	r28, 0x1C	; 28
    206a:	dd 4d       	sbci	r29, 0xDD	; 221
    206c:	8a 8b       	std	Y+18, r24	; 0x12
    206e:	9b 8b       	std	Y+19, r25	; 0x13
    2070:	f7 01       	movw	r30, r14
    2072:	02 e0       	ldi	r16, 0x02	; 2
    2074:	06 93       	lac	Z, r16
    2076:	13 c0       	rjmp	.+38     	; 0x209e <udd_ep_trans_complet+0x2e2>
    2078:	d8 01       	movw	r26, r16
    207a:	8c 91       	ld	r24, X
    207c:	80 ff       	sbrs	r24, 0
    207e:	0f c0       	rjmp	.+30     	; 0x209e <udd_ep_trans_complet+0x2e2>
    2080:	8e 7f       	andi	r24, 0xFE	; 254
    2082:	8c 93       	st	X, r24
    2084:	17 96       	adiw	r26, 0x07	; 7
    2086:	ed 91       	ld	r30, X+
    2088:	fc 91       	ld	r31, X
    208a:	18 97       	sbiw	r26, 0x08	; 8
    208c:	30 97       	sbiw	r30, 0x00	; 0
    208e:	39 f0       	breq	.+14     	; 0x209e <udd_ep_trans_complet+0x2e2>
    2090:	15 96       	adiw	r26, 0x05	; 5
    2092:	6d 91       	ld	r22, X+
    2094:	7c 91       	ld	r23, X
    2096:	16 97       	sbiw	r26, 0x06	; 6
    2098:	4d 2d       	mov	r20, r13
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	19 95       	eicall
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	ff 90       	pop	r15
    20a8:	ef 90       	pop	r14
    20aa:	df 90       	pop	r13
    20ac:	bf 90       	pop	r11
    20ae:	af 90       	pop	r10
    20b0:	9f 90       	pop	r9
    20b2:	8f 90       	pop	r8
    20b4:	08 95       	ret

000020b6 <udd_attach>:
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	1f 92       	push	r1
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	8f b7       	in	r24, 0x3f	; 63
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	f8 94       	cli
    20c8:	19 81       	ldd	r17, Y+1	; 0x01
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	d5 dc       	rcall	.-1622   	; 0x1a78 <udd_sleep_mode>
    20ce:	ea ec       	ldi	r30, 0xCA	; 202
    20d0:	f4 e0       	ldi	r31, 0x04	; 4
    20d2:	80 e4       	ldi	r24, 0x40	; 64
    20d4:	80 83       	st	Z, r24
    20d6:	80 e2       	ldi	r24, 0x20	; 32
    20d8:	80 83       	st	Z, r24
    20da:	e1 ec       	ldi	r30, 0xC1	; 193
    20dc:	f4 e0       	ldi	r31, 0x04	; 4
    20de:	80 81       	ld	r24, Z
    20e0:	81 60       	ori	r24, 0x01	; 1
    20e2:	80 83       	st	Z, r24
    20e4:	a9 ec       	ldi	r26, 0xC9	; 201
    20e6:	b4 e0       	ldi	r27, 0x04	; 4
    20e8:	8c 91       	ld	r24, X
    20ea:	82 60       	ori	r24, 0x02	; 2
    20ec:	8c 93       	st	X, r24
    20ee:	e8 ec       	ldi	r30, 0xC8	; 200
    20f0:	f4 e0       	ldi	r31, 0x04	; 4
    20f2:	80 81       	ld	r24, Z
    20f4:	80 64       	ori	r24, 0x40	; 64
    20f6:	80 83       	st	Z, r24
    20f8:	8c 91       	ld	r24, X
    20fa:	81 60       	ori	r24, 0x01	; 1
    20fc:	8c 93       	st	X, r24
    20fe:	80 81       	ld	r24, Z
    2100:	80 68       	ori	r24, 0x80	; 128
    2102:	80 83       	st	Z, r24
    2104:	1f bf       	out	0x3f, r17	; 63
    2106:	0f 90       	pop	r0
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	08 95       	ret

00002110 <udd_enable>:
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	1f 92       	push	r1
    211a:	1f 92       	push	r1
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	00 e6       	ldi	r16, 0x60	; 96
    2122:	10 e0       	ldi	r17, 0x00	; 0
    2124:	f8 01       	movw	r30, r16
    2126:	10 82       	st	Z, r1
    2128:	80 e3       	ldi	r24, 0x30	; 48
    212a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sysclk_enable_usb>
    212e:	e0 ec       	ldi	r30, 0xC0	; 192
    2130:	f4 e0       	ldi	r31, 0x04	; 4
    2132:	80 81       	ld	r24, Z
    2134:	80 64       	ori	r24, 0x40	; 64
    2136:	80 83       	st	Z, r24
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	f8 01       	movw	r30, r16
    213c:	80 83       	st	Z, r24
    213e:	8f b7       	in	r24, 0x3f	; 63
    2140:	8a 83       	std	Y+2, r24	; 0x02
    2142:	f8 94       	cli
    2144:	1a 81       	ldd	r17, Y+2	; 0x02
    2146:	e4 ee       	ldi	r30, 0xE4	; 228
    2148:	f2 e2       	ldi	r31, 0x22	; 34
    214a:	15 86       	std	Z+13, r1	; 0x0d
    214c:	15 8a       	std	Z+21, r1	; 0x15
    214e:	15 8e       	std	Z+29, r1	; 0x1d
    2150:	15 a2       	std	Z+37, r1	; 0x25
    2152:	15 a6       	std	Z+45, r1	; 0x2d
    2154:	15 aa       	std	Z+53, r1	; 0x35
    2156:	eb e7       	ldi	r30, 0x7B	; 123
    2158:	f2 e2       	ldi	r31, 0x22	; 34
    215a:	80 81       	ld	r24, Z
    215c:	8e 7f       	andi	r24, 0xFE	; 254
    215e:	80 83       	st	Z, r24
    2160:	e4 e8       	ldi	r30, 0x84	; 132
    2162:	f2 e2       	ldi	r31, 0x22	; 34
    2164:	80 81       	ld	r24, Z
    2166:	8e 7f       	andi	r24, 0xFE	; 254
    2168:	80 83       	st	Z, r24
    216a:	ed e8       	ldi	r30, 0x8D	; 141
    216c:	f2 e2       	ldi	r31, 0x22	; 34
    216e:	80 81       	ld	r24, Z
    2170:	8e 7f       	andi	r24, 0xFE	; 254
    2172:	80 83       	st	Z, r24
    2174:	e6 e9       	ldi	r30, 0x96	; 150
    2176:	f2 e2       	ldi	r31, 0x22	; 34
    2178:	80 81       	ld	r24, Z
    217a:	8e 7f       	andi	r24, 0xFE	; 254
    217c:	80 83       	st	Z, r24
    217e:	6a e1       	ldi	r22, 0x1A	; 26
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	22 da       	rcall	.-3004   	; 0x15ca <nvm_read_byte>
    2186:	8f 3f       	cpi	r24, 0xFF	; 255
    2188:	19 f0       	breq	.+6      	; 0x2190 <udd_enable+0x80>
    218a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    218e:	03 c0       	rjmp	.+6      	; 0x2196 <udd_enable+0x86>
    2190:	8f e1       	ldi	r24, 0x1F	; 31
    2192:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2196:	6b e1       	ldi	r22, 0x1B	; 27
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	16 da       	rcall	.-3028   	; 0x15ca <nvm_read_byte>
    219e:	8f 3f       	cpi	r24, 0xFF	; 255
    21a0:	19 f0       	breq	.+6      	; 0x21a8 <udd_enable+0x98>
    21a2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    21a6:	03 c0       	rjmp	.+6      	; 0x21ae <udd_enable+0x9e>
    21a8:	8f e1       	ldi	r24, 0x1F	; 31
    21aa:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    21ae:	e0 ec       	ldi	r30, 0xC0	; 192
    21b0:	f4 e0       	ldi	r31, 0x04	; 4
    21b2:	80 81       	ld	r24, Z
    21b4:	82 60       	ori	r24, 0x02	; 2
    21b6:	80 83       	st	Z, r24
    21b8:	80 81       	ld	r24, Z
    21ba:	80 68       	ori	r24, 0x80	; 128
    21bc:	80 83       	st	Z, r24
    21be:	80 81       	ld	r24, Z
    21c0:	80 61       	ori	r24, 0x10	; 16
    21c2:	80 83       	st	Z, r24
    21c4:	80 ef       	ldi	r24, 0xF0	; 240
    21c6:	92 e2       	ldi	r25, 0x22	; 34
    21c8:	86 83       	std	Z+6, r24	; 0x06
    21ca:	97 83       	std	Z+7, r25	; 0x07
    21cc:	80 81       	ld	r24, Z
    21ce:	80 62       	ori	r24, 0x20	; 32
    21d0:	80 83       	st	Z, r24
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    21d8:	e8 ec       	ldi	r30, 0xC8	; 200
    21da:	f4 e0       	ldi	r31, 0x04	; 4
    21dc:	80 81       	ld	r24, Z
    21de:	81 60       	ori	r24, 0x01	; 1
    21e0:	80 83       	st	Z, r24
    21e2:	10 92 24 23 	sts	0x2324, r1	; 0x802324 <udd_b_idle>
    21e6:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <sleepmgr_locks+0x5>
    21ea:	8f 3f       	cpi	r24, 0xFF	; 255
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <udd_enable+0xe0>
    21ee:	ff cf       	rjmp	.-2      	; 0x21ee <udd_enable+0xde>
    21f0:	8f b7       	in	r24, 0x3f	; 63
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	f8 94       	cli
    21f6:	99 81       	ldd	r25, Y+1	; 0x01
    21f8:	ea e8       	ldi	r30, 0x8A	; 138
    21fa:	f3 e2       	ldi	r31, 0x23	; 35
    21fc:	85 81       	ldd	r24, Z+5	; 0x05
    21fe:	8f 5f       	subi	r24, 0xFF	; 255
    2200:	85 83       	std	Z+5, r24	; 0x05
    2202:	9f bf       	out	0x3f, r25	; 63
    2204:	58 df       	rcall	.-336    	; 0x20b6 <udd_attach>
    2206:	1f bf       	out	0x3f, r17	; 63
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	08 95       	ret

00002216 <udd_is_high_speed>:
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	08 95       	ret

0000221a <udd_set_address>:
    221a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    221e:	08 95       	ret

00002220 <udd_getaddress>:
    2220:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2224:	08 95       	ret

00002226 <udd_get_frame_number>:
    2226:	80 91 20 23 	lds	r24, 0x2320	; 0x802320 <udd_sram+0x3c>
    222a:	90 91 21 23 	lds	r25, 0x2321	; 0x802321 <udd_sram+0x3d>
    222e:	08 95       	ret

00002230 <udd_get_micro_frame_number>:
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	08 95       	ret

00002236 <udd_set_setup_payload>:
    2236:	e0 e9       	ldi	r30, 0x90	; 144
    2238:	f3 e2       	ldi	r31, 0x23	; 35
    223a:	80 87       	std	Z+8, r24	; 0x08
    223c:	91 87       	std	Z+9, r25	; 0x09
    223e:	62 87       	std	Z+10, r22	; 0x0a
    2240:	73 87       	std	Z+11, r23	; 0x0b
    2242:	08 95       	ret

00002244 <udd_ep_alloc>:
    2244:	28 2f       	mov	r18, r24
    2246:	2f 70       	andi	r18, 0x0F	; 15
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	22 0f       	add	r18, r18
    224c:	33 1f       	adc	r19, r19
    224e:	08 2e       	mov	r0, r24
    2250:	00 0c       	add	r0, r0
    2252:	99 0b       	sbc	r25, r25
    2254:	88 27       	eor	r24, r24
    2256:	99 0f       	add	r25, r25
    2258:	88 1f       	adc	r24, r24
    225a:	99 27       	eor	r25, r25
    225c:	82 0f       	add	r24, r18
    225e:	93 1f       	adc	r25, r19
    2260:	fc 01       	movw	r30, r24
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	ee 0f       	add	r30, r30
    2268:	ff 1f       	adc	r31, r31
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	ec 51       	subi	r30, 0x1C	; 28
    2270:	fd 4d       	sbci	r31, 0xDD	; 221
    2272:	25 85       	ldd	r18, Z+13	; 0x0d
    2274:	20 7c       	andi	r18, 0xC0	; 192
    2276:	09 f0       	breq	.+2      	; 0x227a <udd_ep_alloc+0x36>
    2278:	69 c0       	rjmp	.+210    	; 0x234c <udd_ep_alloc+0x108>
    227a:	63 70       	andi	r22, 0x03	; 3
    227c:	61 30       	cpi	r22, 0x01	; 1
    227e:	11 f0       	breq	.+4      	; 0x2284 <udd_ep_alloc+0x40>
    2280:	18 f4       	brcc	.+6      	; 0x2288 <udd_ep_alloc+0x44>
    2282:	04 c0       	rjmp	.+8      	; 0x228c <udd_ep_alloc+0x48>
    2284:	20 ec       	ldi	r18, 0xC0	; 192
    2286:	03 c0       	rjmp	.+6      	; 0x228e <udd_ep_alloc+0x4a>
    2288:	20 e8       	ldi	r18, 0x80	; 128
    228a:	01 c0       	rjmp	.+2      	; 0x228e <udd_ep_alloc+0x4a>
    228c:	20 e4       	ldi	r18, 0x40	; 64
    228e:	40 38       	cpi	r20, 0x80	; 128
    2290:	51 05       	cpc	r21, r1
    2292:	e9 f0       	breq	.+58     	; 0x22ce <udd_ep_alloc+0x8a>
    2294:	50 f4       	brcc	.+20     	; 0x22aa <udd_ep_alloc+0x66>
    2296:	40 32       	cpi	r20, 0x20	; 32
    2298:	51 05       	cpc	r21, r1
    229a:	a9 f0       	breq	.+42     	; 0x22c6 <udd_ep_alloc+0x82>
    229c:	40 34       	cpi	r20, 0x40	; 64
    229e:	51 05       	cpc	r21, r1
    22a0:	a1 f0       	breq	.+40     	; 0x22ca <udd_ep_alloc+0x86>
    22a2:	40 31       	cpi	r20, 0x10	; 16
    22a4:	51 05       	cpc	r21, r1
    22a6:	d9 f4       	brne	.+54     	; 0x22de <udd_ep_alloc+0x9a>
    22a8:	0c c0       	rjmp	.+24     	; 0x22c2 <udd_ep_alloc+0x7e>
    22aa:	41 15       	cp	r20, r1
    22ac:	32 e0       	ldi	r19, 0x02	; 2
    22ae:	53 07       	cpc	r21, r19
    22b0:	91 f0       	breq	.+36     	; 0x22d6 <udd_ep_alloc+0x92>
    22b2:	4f 3f       	cpi	r20, 0xFF	; 255
    22b4:	33 e0       	ldi	r19, 0x03	; 3
    22b6:	53 07       	cpc	r21, r19
    22b8:	81 f0       	breq	.+32     	; 0x22da <udd_ep_alloc+0x96>
    22ba:	41 15       	cp	r20, r1
    22bc:	51 40       	sbci	r21, 0x01	; 1
    22be:	79 f4       	brne	.+30     	; 0x22de <udd_ep_alloc+0x9a>
    22c0:	08 c0       	rjmp	.+16     	; 0x22d2 <udd_ep_alloc+0x8e>
    22c2:	41 e0       	ldi	r20, 0x01	; 1
    22c4:	0d c0       	rjmp	.+26     	; 0x22e0 <udd_ep_alloc+0x9c>
    22c6:	42 e0       	ldi	r20, 0x02	; 2
    22c8:	0b c0       	rjmp	.+22     	; 0x22e0 <udd_ep_alloc+0x9c>
    22ca:	43 e0       	ldi	r20, 0x03	; 3
    22cc:	09 c0       	rjmp	.+18     	; 0x22e0 <udd_ep_alloc+0x9c>
    22ce:	44 e0       	ldi	r20, 0x04	; 4
    22d0:	07 c0       	rjmp	.+14     	; 0x22e0 <udd_ep_alloc+0x9c>
    22d2:	45 e0       	ldi	r20, 0x05	; 5
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <udd_ep_alloc+0x9c>
    22d6:	46 e0       	ldi	r20, 0x06	; 6
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <udd_ep_alloc+0x9c>
    22da:	47 e0       	ldi	r20, 0x07	; 7
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <udd_ep_alloc+0x9c>
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	fc 01       	movw	r30, r24
    22e2:	ee 0f       	add	r30, r30
    22e4:	ff 1f       	adc	r31, r31
    22e6:	ee 0f       	add	r30, r30
    22e8:	ff 1f       	adc	r31, r31
    22ea:	ee 0f       	add	r30, r30
    22ec:	ff 1f       	adc	r31, r31
    22ee:	ec 51       	subi	r30, 0x1C	; 28
    22f0:	fd 4d       	sbci	r31, 0xDD	; 221
    22f2:	15 86       	std	Z+13, r1	; 0x0d
    22f4:	36 e0       	ldi	r19, 0x06	; 6
    22f6:	34 87       	std	Z+12, r19	; 0x0c
    22f8:	24 2b       	or	r18, r20
    22fa:	25 87       	std	Z+13, r18	; 0x0d
    22fc:	fc 01       	movw	r30, r24
    22fe:	ee 0f       	add	r30, r30
    2300:	ff 1f       	adc	r31, r31
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	ec 51       	subi	r30, 0x1C	; 28
    230c:	fd 4d       	sbci	r31, 0xDD	; 221
    230e:	25 85       	ldd	r18, Z+13	; 0x0d
    2310:	20 7c       	andi	r18, 0xC0	; 192
    2312:	20 3c       	cpi	r18, 0xC0	; 192
    2314:	69 f4       	brne	.+26     	; 0x2330 <udd_ep_alloc+0xec>
    2316:	fc 01       	movw	r30, r24
    2318:	ee 0f       	add	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	ee 0f       	add	r30, r30
    231e:	ff 1f       	adc	r31, r31
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	ec 51       	subi	r30, 0x1C	; 28
    2326:	fd 4d       	sbci	r31, 0xDD	; 221
    2328:	25 85       	ldd	r18, Z+13	; 0x0d
    232a:	27 70       	andi	r18, 0x07	; 7
    232c:	27 30       	cpi	r18, 0x07	; 7
    232e:	81 f0       	breq	.+32     	; 0x2350 <udd_ep_alloc+0x10c>
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	fc 01       	movw	r30, r24
    233e:	ec 51       	subi	r30, 0x1C	; 28
    2340:	fd 4d       	sbci	r31, 0xDD	; 221
    2342:	85 85       	ldd	r24, Z+13	; 0x0d
    2344:	80 62       	ori	r24, 0x20	; 32
    2346:	85 87       	std	Z+13, r24	; 0x0d
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	08 95       	ret
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	08 95       	ret
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	08 95       	ret

00002354 <udd_ep_is_halted>:
    2354:	e8 2f       	mov	r30, r24
    2356:	ef 70       	andi	r30, 0x0F	; 15
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	08 2e       	mov	r0, r24
    2360:	00 0c       	add	r0, r0
    2362:	99 0b       	sbc	r25, r25
    2364:	88 27       	eor	r24, r24
    2366:	99 0f       	add	r25, r25
    2368:	88 1f       	adc	r24, r24
    236a:	99 27       	eor	r25, r25
    236c:	e8 0f       	add	r30, r24
    236e:	f9 1f       	adc	r31, r25
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	ec 51       	subi	r30, 0x1C	; 28
    237e:	fd 4d       	sbci	r31, 0xDD	; 221
    2380:	85 85       	ldd	r24, Z+13	; 0x0d
    2382:	82 fb       	bst	r24, 2
    2384:	88 27       	eor	r24, r24
    2386:	80 f9       	bld	r24, 0
    2388:	08 95       	ret

0000238a <udd_ep_clear_halt>:
    238a:	0f 93       	push	r16
    238c:	28 2f       	mov	r18, r24
    238e:	2f 70       	andi	r18, 0x0F	; 15
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	a9 01       	movw	r20, r18
    2394:	44 0f       	add	r20, r20
    2396:	55 1f       	adc	r21, r21
    2398:	28 2f       	mov	r18, r24
    239a:	08 2e       	mov	r0, r24
    239c:	00 0c       	add	r0, r0
    239e:	33 0b       	sbc	r19, r19
    23a0:	22 27       	eor	r18, r18
    23a2:	33 0f       	add	r19, r19
    23a4:	22 1f       	adc	r18, r18
    23a6:	33 27       	eor	r19, r19
    23a8:	24 0f       	add	r18, r20
    23aa:	35 1f       	adc	r19, r21
    23ac:	a9 01       	movw	r20, r18
    23ae:	44 0f       	add	r20, r20
    23b0:	55 1f       	adc	r21, r21
    23b2:	44 0f       	add	r20, r20
    23b4:	55 1f       	adc	r21, r21
    23b6:	44 0f       	add	r20, r20
    23b8:	55 1f       	adc	r21, r21
    23ba:	fa 01       	movw	r30, r20
    23bc:	e0 51       	subi	r30, 0x10	; 16
    23be:	fd 4d       	sbci	r31, 0xDD	; 221
    23c0:	01 e0       	ldi	r16, 0x01	; 1
    23c2:	06 93       	lac	Z, r16
    23c4:	fa 01       	movw	r30, r20
    23c6:	ec 51       	subi	r30, 0x1C	; 28
    23c8:	fd 4d       	sbci	r31, 0xDD	; 221
    23ca:	95 85       	ldd	r25, Z+13	; 0x0d
    23cc:	92 ff       	sbrs	r25, 2
    23ce:	11 c0       	rjmp	.+34     	; 0x23f2 <udd_ep_clear_halt+0x68>
    23d0:	fa 01       	movw	r30, r20
    23d2:	ec 51       	subi	r30, 0x1C	; 28
    23d4:	fd 4d       	sbci	r31, 0xDD	; 221
    23d6:	95 85       	ldd	r25, Z+13	; 0x0d
    23d8:	9b 7f       	andi	r25, 0xFB	; 251
    23da:	95 87       	std	Z+13, r25	; 0x0d
    23dc:	63 dc       	rcall	.-1850   	; 0x1ca4 <udd_ep_get_job>
    23de:	fc 01       	movw	r30, r24
    23e0:	80 81       	ld	r24, Z
    23e2:	80 ff       	sbrs	r24, 0
    23e4:	06 c0       	rjmp	.+12     	; 0x23f2 <udd_ep_clear_halt+0x68>
    23e6:	8e 7f       	andi	r24, 0xFE	; 254
    23e8:	80 83       	st	Z, r24
    23ea:	07 80       	ldd	r0, Z+7	; 0x07
    23ec:	f0 85       	ldd	r31, Z+8	; 0x08
    23ee:	e0 2d       	mov	r30, r0
    23f0:	19 95       	eicall
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	0f 91       	pop	r16
    23f6:	08 95       	ret

000023f8 <udd_ep_run>:
    23f8:	5f 92       	push	r5
    23fa:	6f 92       	push	r6
    23fc:	7f 92       	push	r7
    23fe:	8f 92       	push	r8
    2400:	9f 92       	push	r9
    2402:	af 92       	push	r10
    2404:	bf 92       	push	r11
    2406:	cf 92       	push	r12
    2408:	df 92       	push	r13
    240a:	ef 92       	push	r14
    240c:	ff 92       	push	r15
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	1f 92       	push	r1
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	78 2e       	mov	r7, r24
    241e:	66 2e       	mov	r6, r22
    2420:	4a 01       	movw	r8, r20
    2422:	59 01       	movw	r10, r18
    2424:	3f dc       	rcall	.-1922   	; 0x1ca4 <udd_ep_get_job>
    2426:	6c 01       	movw	r12, r24
    2428:	57 2c       	mov	r5, r7
    242a:	55 1c       	adc	r5, r5
    242c:	55 24       	eor	r5, r5
    242e:	55 1c       	adc	r5, r5
    2430:	87 2d       	mov	r24, r7
    2432:	8f 70       	andi	r24, 0x0F	; 15
    2434:	e8 2e       	mov	r14, r24
    2436:	f1 2c       	mov	r15, r1
    2438:	ee 0c       	add	r14, r14
    243a:	ff 1c       	adc	r15, r15
    243c:	e5 0c       	add	r14, r5
    243e:	f1 1c       	adc	r15, r1
    2440:	f7 01       	movw	r30, r14
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	ee 0f       	add	r30, r30
    2448:	ff 1f       	adc	r31, r31
    244a:	ee 0f       	add	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	ec 51       	subi	r30, 0x1C	; 28
    2450:	fd 4d       	sbci	r31, 0xDD	; 221
    2452:	85 85       	ldd	r24, Z+13	; 0x0d
    2454:	80 7c       	andi	r24, 0xC0	; 192
    2456:	09 f4       	brne	.+2      	; 0x245a <udd_ep_run+0x62>
    2458:	81 c0       	rjmp	.+258    	; 0x255c <udd_ep_run+0x164>
    245a:	f7 01       	movw	r30, r14
    245c:	ee 0f       	add	r30, r30
    245e:	ff 1f       	adc	r31, r31
    2460:	ee 0f       	add	r30, r30
    2462:	ff 1f       	adc	r31, r31
    2464:	ee 0f       	add	r30, r30
    2466:	ff 1f       	adc	r31, r31
    2468:	ec 51       	subi	r30, 0x1C	; 28
    246a:	fd 4d       	sbci	r31, 0xDD	; 221
    246c:	85 85       	ldd	r24, Z+13	; 0x0d
    246e:	80 7c       	andi	r24, 0xC0	; 192
    2470:	80 3c       	cpi	r24, 0xC0	; 192
    2472:	61 f0       	breq	.+24     	; 0x248c <udd_ep_run+0x94>
    2474:	f7 01       	movw	r30, r14
    2476:	ee 0f       	add	r30, r30
    2478:	ff 1f       	adc	r31, r31
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	ee 0f       	add	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	ec 51       	subi	r30, 0x1C	; 28
    2484:	fd 4d       	sbci	r31, 0xDD	; 221
    2486:	85 85       	ldd	r24, Z+13	; 0x0d
    2488:	82 fd       	sbrc	r24, 2
    248a:	6a c0       	rjmp	.+212    	; 0x2560 <udd_ep_run+0x168>
    248c:	8f b7       	in	r24, 0x3f	; 63
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	f8 94       	cli
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	f6 01       	movw	r30, r12
    2496:	90 81       	ld	r25, Z
    2498:	90 ff       	sbrs	r25, 0
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <udd_ep_run+0xaa>
    249c:	8f bf       	out	0x3f, r24	; 63
    249e:	51 2c       	mov	r5, r1
    24a0:	60 c0       	rjmp	.+192    	; 0x2562 <udd_ep_run+0x16a>
    24a2:	f6 01       	movw	r30, r12
    24a4:	90 81       	ld	r25, Z
    24a6:	91 60       	ori	r25, 0x01	; 1
    24a8:	90 83       	st	Z, r25
    24aa:	8f bf       	out	0x3f, r24	; 63
    24ac:	81 82       	std	Z+1, r8	; 0x01
    24ae:	92 82       	std	Z+2, r9	; 0x02
    24b0:	a3 82       	std	Z+3, r10	; 0x03
    24b2:	b4 82       	std	Z+4, r11	; 0x04
    24b4:	15 82       	std	Z+5, r1	; 0x05
    24b6:	16 82       	std	Z+6, r1	; 0x06
    24b8:	07 83       	std	Z+7, r16	; 0x07
    24ba:	10 87       	std	Z+8, r17	; 0x08
    24bc:	61 10       	cpse	r6, r1
    24be:	06 c0       	rjmp	.+12     	; 0x24cc <udd_ep_run+0xd4>
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	a1 14       	cp	r10, r1
    24c4:	b1 04       	cpc	r11, r1
    24c6:	19 f0       	breq	.+6      	; 0x24ce <udd_ep_run+0xd6>
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	01 c0       	rjmp	.+2      	; 0x24ce <udd_ep_run+0xd6>
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	f6 01       	movw	r30, r12
    24d0:	80 81       	ld	r24, Z
    24d2:	90 fb       	bst	r25, 0
    24d4:	81 f9       	bld	r24, 1
    24d6:	8b 7f       	andi	r24, 0xFB	; 251
    24d8:	80 83       	st	Z, r24
    24da:	55 20       	and	r5, r5
    24dc:	61 f0       	breq	.+24     	; 0x24f6 <udd_ep_run+0xfe>
    24de:	f7 01       	movw	r30, r14
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	ee 0f       	add	r30, r30
    24e6:	ff 1f       	adc	r31, r31
    24e8:	ee 0f       	add	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	ec 51       	subi	r30, 0x1C	; 28
    24ee:	fd 4d       	sbci	r31, 0xDD	; 221
    24f0:	12 8a       	std	Z+18, r1	; 0x12
    24f2:	13 8a       	std	Z+19, r1	; 0x13
    24f4:	2e c0       	rjmp	.+92     	; 0x2552 <udd_ep_run+0x15a>
    24f6:	f7 01       	movw	r30, r14
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	ee 0f       	add	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	ec 51       	subi	r30, 0x1C	; 28
    2506:	fd 4d       	sbci	r31, 0xDD	; 221
    2508:	85 85       	ldd	r24, Z+13	; 0x0d
    250a:	80 7c       	andi	r24, 0xC0	; 192
    250c:	80 3c       	cpi	r24, 0xC0	; 192
    250e:	a1 f4       	brne	.+40     	; 0x2538 <udd_ep_run+0x140>
    2510:	c7 01       	movw	r24, r14
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	80 51       	subi	r24, 0x10	; 16
    2520:	9d 4d       	sbci	r25, 0xDD	; 221
    2522:	97 db       	rcall	.-2258   	; 0x1c52 <udd_ep_get_size>
    2524:	bc 01       	movw	r22, r24
    2526:	c5 01       	movw	r24, r10
    2528:	e5 d3       	rcall	.+1994   	; 0x2cf4 <__udivmodhi4>
    252a:	89 2b       	or	r24, r25
    252c:	29 f0       	breq	.+10     	; 0x2538 <udd_ep_run+0x140>
    252e:	f6 01       	movw	r30, r12
    2530:	80 81       	ld	r24, Z
    2532:	8e 7f       	andi	r24, 0xFE	; 254
    2534:	80 83       	st	Z, r24
    2536:	15 c0       	rjmp	.+42     	; 0x2562 <udd_ep_run+0x16a>
    2538:	f7 01       	movw	r30, r14
    253a:	ee 0f       	add	r30, r30
    253c:	ff 1f       	adc	r31, r31
    253e:	ee 0f       	add	r30, r30
    2540:	ff 1f       	adc	r31, r31
    2542:	ee 0f       	add	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	ec 51       	subi	r30, 0x1C	; 28
    2548:	fd 4d       	sbci	r31, 0xDD	; 221
    254a:	16 86       	std	Z+14, r1	; 0x0e
    254c:	17 86       	std	Z+15, r1	; 0x0f
    254e:	12 8a       	std	Z+18, r1	; 0x12
    2550:	13 8a       	std	Z+19, r1	; 0x13
    2552:	87 2d       	mov	r24, r7
    2554:	33 dc       	rcall	.-1946   	; 0x1dbc <udd_ep_trans_complet>
    2556:	55 24       	eor	r5, r5
    2558:	53 94       	inc	r5
    255a:	03 c0       	rjmp	.+6      	; 0x2562 <udd_ep_run+0x16a>
    255c:	51 2c       	mov	r5, r1
    255e:	01 c0       	rjmp	.+2      	; 0x2562 <udd_ep_run+0x16a>
    2560:	51 2c       	mov	r5, r1
    2562:	85 2d       	mov	r24, r5
    2564:	0f 90       	pop	r0
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	1f 91       	pop	r17
    256c:	0f 91       	pop	r16
    256e:	ff 90       	pop	r15
    2570:	ef 90       	pop	r14
    2572:	df 90       	pop	r13
    2574:	cf 90       	pop	r12
    2576:	bf 90       	pop	r11
    2578:	af 90       	pop	r10
    257a:	9f 90       	pop	r9
    257c:	8f 90       	pop	r8
    257e:	7f 90       	pop	r7
    2580:	6f 90       	pop	r6
    2582:	5f 90       	pop	r5
    2584:	08 95       	ret

00002586 <udd_ep_abort>:
    2586:	ff 92       	push	r15
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	18 2f       	mov	r17, r24
    2592:	f8 2e       	mov	r15, r24
    2594:	ff 1c       	adc	r15, r15
    2596:	ff 24       	eor	r15, r15
    2598:	ff 1c       	adc	r15, r15
    259a:	c8 2f       	mov	r28, r24
    259c:	cf 70       	andi	r28, 0x0F	; 15
    259e:	d0 e0       	ldi	r29, 0x00	; 0
    25a0:	cc 0f       	add	r28, r28
    25a2:	dd 1f       	adc	r29, r29
    25a4:	cf 0d       	add	r28, r15
    25a6:	d1 1d       	adc	r29, r1
    25a8:	7d db       	rcall	.-2310   	; 0x1ca4 <udd_ep_get_job>
    25aa:	dc 01       	movw	r26, r24
    25ac:	fe 01       	movw	r30, r28
    25ae:	ee 0f       	add	r30, r30
    25b0:	ff 1f       	adc	r31, r31
    25b2:	ee 0f       	add	r30, r30
    25b4:	ff 1f       	adc	r31, r31
    25b6:	ee 0f       	add	r30, r30
    25b8:	ff 1f       	adc	r31, r31
    25ba:	e0 51       	subi	r30, 0x10	; 16
    25bc:	fd 4d       	sbci	r31, 0xDD	; 221
    25be:	02 e0       	ldi	r16, 0x02	; 2
    25c0:	05 93       	las	Z, r16
    25c2:	8c 91       	ld	r24, X
    25c4:	80 ff       	sbrs	r24, 0
    25c6:	22 c0       	rjmp	.+68     	; 0x260c <udd_ep_abort+0x86>
    25c8:	8e 7f       	andi	r24, 0xFE	; 254
    25ca:	8c 93       	st	X, r24
    25cc:	17 96       	adiw	r26, 0x07	; 7
    25ce:	ed 91       	ld	r30, X+
    25d0:	fc 91       	ld	r31, X
    25d2:	18 97       	sbiw	r26, 0x08	; 8
    25d4:	30 97       	sbiw	r30, 0x00	; 0
    25d6:	d1 f0       	breq	.+52     	; 0x260c <udd_ep_abort+0x86>
    25d8:	ff 20       	and	r15, r15
    25da:	59 f0       	breq	.+22     	; 0x25f2 <udd_ep_abort+0x6c>
    25dc:	cc 0f       	add	r28, r28
    25de:	dd 1f       	adc	r29, r29
    25e0:	cc 0f       	add	r28, r28
    25e2:	dd 1f       	adc	r29, r29
    25e4:	cc 0f       	add	r28, r28
    25e6:	dd 1f       	adc	r29, r29
    25e8:	cc 51       	subi	r28, 0x1C	; 28
    25ea:	dd 4d       	sbci	r29, 0xDD	; 221
    25ec:	6a 89       	ldd	r22, Y+18	; 0x12
    25ee:	7b 89       	ldd	r23, Y+19	; 0x13
    25f0:	0a c0       	rjmp	.+20     	; 0x2606 <udd_ep_abort+0x80>
    25f2:	cc 0f       	add	r28, r28
    25f4:	dd 1f       	adc	r29, r29
    25f6:	cc 0f       	add	r28, r28
    25f8:	dd 1f       	adc	r29, r29
    25fa:	cc 0f       	add	r28, r28
    25fc:	dd 1f       	adc	r29, r29
    25fe:	cc 51       	subi	r28, 0x1C	; 28
    2600:	dd 4d       	sbci	r29, 0xDD	; 221
    2602:	6e 85       	ldd	r22, Y+14	; 0x0e
    2604:	7f 85       	ldd	r23, Y+15	; 0x0f
    2606:	41 2f       	mov	r20, r17
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	19 95       	eicall
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	1f 91       	pop	r17
    2612:	0f 91       	pop	r16
    2614:	ff 90       	pop	r15
    2616:	08 95       	ret

00002618 <udd_ep_free>:
    2618:	cf 93       	push	r28
    261a:	c8 2f       	mov	r28, r24
    261c:	b4 df       	rcall	.-152    	; 0x2586 <udd_ep_abort>
    261e:	ec 2f       	mov	r30, r28
    2620:	ef 70       	andi	r30, 0x0F	; 15
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	ee 0f       	add	r30, r30
    2626:	ff 1f       	adc	r31, r31
    2628:	8c 2f       	mov	r24, r28
    262a:	cc 0f       	add	r28, r28
    262c:	99 0b       	sbc	r25, r25
    262e:	88 27       	eor	r24, r24
    2630:	99 0f       	add	r25, r25
    2632:	88 1f       	adc	r24, r24
    2634:	99 27       	eor	r25, r25
    2636:	e8 0f       	add	r30, r24
    2638:	f9 1f       	adc	r31, r25
    263a:	ee 0f       	add	r30, r30
    263c:	ff 1f       	adc	r31, r31
    263e:	ee 0f       	add	r30, r30
    2640:	ff 1f       	adc	r31, r31
    2642:	ee 0f       	add	r30, r30
    2644:	ff 1f       	adc	r31, r31
    2646:	ec 51       	subi	r30, 0x1C	; 28
    2648:	fd 4d       	sbci	r31, 0xDD	; 221
    264a:	15 86       	std	Z+13, r1	; 0x0d
    264c:	cf 91       	pop	r28
    264e:	08 95       	ret

00002650 <udd_ep_set_halt>:
    2650:	e8 2f       	mov	r30, r24
    2652:	ef 70       	andi	r30, 0x0F	; 15
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	28 2f       	mov	r18, r24
    265c:	08 2e       	mov	r0, r24
    265e:	00 0c       	add	r0, r0
    2660:	33 0b       	sbc	r19, r19
    2662:	22 27       	eor	r18, r18
    2664:	33 0f       	add	r19, r19
    2666:	22 1f       	adc	r18, r18
    2668:	33 27       	eor	r19, r19
    266a:	e2 0f       	add	r30, r18
    266c:	f3 1f       	adc	r31, r19
    266e:	ee 0f       	add	r30, r30
    2670:	ff 1f       	adc	r31, r31
    2672:	ee 0f       	add	r30, r30
    2674:	ff 1f       	adc	r31, r31
    2676:	ee 0f       	add	r30, r30
    2678:	ff 1f       	adc	r31, r31
    267a:	ec 51       	subi	r30, 0x1C	; 28
    267c:	fd 4d       	sbci	r31, 0xDD	; 221
    267e:	95 85       	ldd	r25, Z+13	; 0x0d
    2680:	94 60       	ori	r25, 0x04	; 4
    2682:	95 87       	std	Z+13, r25	; 0x0d
    2684:	80 df       	rcall	.-256    	; 0x2586 <udd_ep_abort>
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	08 95       	ret

0000268a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    268a:	1f 92       	push	r1
    268c:	0f 92       	push	r0
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	0f 92       	push	r0
    2692:	11 24       	eor	r1, r1
    2694:	0b b6       	in	r0, 0x3b	; 59
    2696:	0f 92       	push	r0
    2698:	0f 93       	push	r16
    269a:	2f 93       	push	r18
    269c:	3f 93       	push	r19
    269e:	4f 93       	push	r20
    26a0:	5f 93       	push	r21
    26a2:	6f 93       	push	r22
    26a4:	7f 93       	push	r23
    26a6:	8f 93       	push	r24
    26a8:	9f 93       	push	r25
    26aa:	af 93       	push	r26
    26ac:	bf 93       	push	r27
    26ae:	ef 93       	push	r30
    26b0:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    26b2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    26b6:	88 23       	and	r24, r24
    26b8:	3c f4       	brge	.+14     	; 0x26c8 <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    26ba:	80 e8       	ldi	r24, 0x80	; 128
    26bc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    26c0:	0e 94 f9 07 	call	0xff2	; 0xff2 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    26c4:	f7 d1       	rcall	.+1006   	; 0x2ab4 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    26c6:	88 c0       	rjmp	.+272    	; 0x27d8 <__vector_125+0x14e>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    26c8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    26cc:	82 ff       	sbrs	r24, 2
    26ce:	20 c0       	rjmp	.+64     	; 0x2710 <__vector_125+0x86>
		udd_ack_underflow_event();
    26d0:	84 e0       	ldi	r24, 0x04	; 4
    26d2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    26d6:	80 91 f8 22 	lds	r24, 0x22F8	; 0x8022f8 <udd_sram+0x14>
    26da:	86 ff       	sbrs	r24, 6
    26dc:	7d c0       	rjmp	.+250    	; 0x27d8 <__vector_125+0x14e>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    26de:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    26e2:	81 fd       	sbrc	r24, 1
    26e4:	79 c0       	rjmp	.+242    	; 0x27d8 <__vector_125+0x14e>
    26e6:	f9 da       	rcall	.-2574   	; 0x1cda <udd_ctrl_interrupt_tc_setup>
    26e8:	81 11       	cpse	r24, r1
    26ea:	76 c0       	rjmp	.+236    	; 0x27d8 <__vector_125+0x14e>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    26ec:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <udd_ep_control_state>
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	11 f4       	brne	.+4      	; 0x26f8 <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    26f4:	2c da       	rcall	.-2984   	; 0x1b4e <udd_ctrl_send_zlp_in>
    26f6:	70 c0       	rjmp	.+224    	; 0x27d8 <__vector_125+0x14e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    26f8:	84 30       	cpi	r24, 0x04	; 4
    26fa:	09 f0       	breq	.+2      	; 0x26fe <__vector_125+0x74>
    26fc:	6d c0       	rjmp	.+218    	; 0x27d8 <__vector_125+0x14e>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    26fe:	e9 ef       	ldi	r30, 0xF9	; 249
    2700:	f2 e2       	ldi	r31, 0x22	; 34
    2702:	04 e0       	ldi	r16, 0x04	; 4
    2704:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2706:	e1 ef       	ldi	r30, 0xF1	; 241
    2708:	f2 e2       	ldi	r31, 0x22	; 34
    270a:	04 e0       	ldi	r16, 0x04	; 4
    270c:	05 93       	las	Z, r16
    270e:	64 c0       	rjmp	.+200    	; 0x27d8 <__vector_125+0x14e>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2710:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2714:	81 ff       	sbrs	r24, 1
    2716:	5b c0       	rjmp	.+182    	; 0x27ce <__vector_125+0x144>
		udd_ack_overflow_event();
    2718:	82 e0       	ldi	r24, 0x02	; 2
    271a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    271e:	80 91 f0 22 	lds	r24, 0x22F0	; 0x8022f0 <udd_sram+0xc>
    2722:	86 ff       	sbrs	r24, 6
    2724:	59 c0       	rjmp	.+178    	; 0x27d8 <__vector_125+0x14e>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2726:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    272a:	81 fd       	sbrc	r24, 1
    272c:	55 c0       	rjmp	.+170    	; 0x27d8 <__vector_125+0x14e>
    272e:	d5 da       	rcall	.-2646   	; 0x1cda <udd_ctrl_interrupt_tc_setup>
    2730:	81 11       	cpse	r24, r1
    2732:	52 c0       	rjmp	.+164    	; 0x27d8 <__vector_125+0x14e>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2734:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <udd_ep_control_state>
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	41 f4       	brne	.+16     	; 0x274c <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    273c:	84 e0       	ldi	r24, 0x04	; 4
    273e:	80 93 e3 22 	sts	0x22E3, r24	; 0x8022e3 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2742:	e0 ef       	ldi	r30, 0xF0	; 240
    2744:	f2 e2       	ldi	r31, 0x22	; 34
    2746:	02 e0       	ldi	r16, 0x02	; 2
    2748:	06 93       	lac	Z, r16
    274a:	46 c0       	rjmp	.+140    	; 0x27d8 <__vector_125+0x14e>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    274c:	83 30       	cpi	r24, 0x03	; 3
    274e:	09 f0       	breq	.+2      	; 0x2752 <__vector_125+0xc8>
    2750:	43 c0       	rjmp	.+134    	; 0x27d8 <__vector_125+0x14e>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2752:	e9 ef       	ldi	r30, 0xF9	; 249
    2754:	f2 e2       	ldi	r31, 0x22	; 34
    2756:	04 e0       	ldi	r16, 0x04	; 4
    2758:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    275a:	e1 ef       	ldi	r30, 0xF1	; 241
    275c:	f2 e2       	ldi	r31, 0x22	; 34
    275e:	04 e0       	ldi	r16, 0x04	; 4
    2760:	05 93       	las	Z, r16
    2762:	3a c0       	rjmp	.+116    	; 0x27d8 <__vector_125+0x14e>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2764:	80 e1       	ldi	r24, 0x10	; 16
    2766:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	0c df       	rcall	.-488    	; 0x2586 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    276e:	81 e8       	ldi	r24, 0x81	; 129
    2770:	0a df       	rcall	.-492    	; 0x2586 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2772:	82 e0       	ldi	r24, 0x02	; 2
    2774:	08 df       	rcall	.-496    	; 0x2586 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2776:	82 e8       	ldi	r24, 0x82	; 130
    2778:	06 df       	rcall	.-500    	; 0x2586 <udd_ep_abort>
		}
#endif
		udc_reset();
    277a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    277e:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2782:	e4 ee       	ldi	r30, 0xE4	; 228
    2784:	f2 e2       	ldi	r31, 0x22	; 34
    2786:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    2788:	96 e0       	ldi	r25, 0x06	; 6
    278a:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    278c:	83 e4       	ldi	r24, 0x43	; 67
    278e:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2790:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2792:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2794:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2796:	8f e9       	ldi	r24, 0x9F	; 159
    2798:	92 e2       	ldi	r25, 0x22	; 34
    279a:	80 8b       	std	Z+16, r24	; 0x10
    279c:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    279e:	a4 d9       	rcall	.-3256   	; 0x1ae8 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    27a0:	1b c0       	rjmp	.+54     	; 0x27d8 <__vector_125+0x14e>
	}

	if (udd_is_suspend_event()) {
    27a2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27a6:	86 ff       	sbrs	r24, 6
    27a8:	07 c0       	rjmp	.+14     	; 0x27b8 <__vector_125+0x12e>
		udd_ack_suspend_event();
    27aa:	80 e4       	ldi	r24, 0x40	; 64
    27ac:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	62 d9       	rcall	.-3388   	; 0x1a78 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    27b4:	7d d1       	rcall	.+762    	; 0x2ab0 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    27b6:	10 c0       	rjmp	.+32     	; 0x27d8 <__vector_125+0x14e>
	}

	if (udd_is_resume_event()) {
    27b8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27bc:	85 ff       	sbrs	r24, 5
    27be:	0c c0       	rjmp	.+24     	; 0x27d8 <__vector_125+0x14e>
		udd_ack_resume_event();
    27c0:	80 e2       	ldi	r24, 0x20	; 32
    27c2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	57 d9       	rcall	.-3410   	; 0x1a78 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    27ca:	73 d1       	rcall	.+742    	; 0x2ab2 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    27cc:	05 c0       	rjmp	.+10     	; 0x27d8 <__vector_125+0x14e>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    27ce:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27d2:	84 fd       	sbrc	r24, 4
    27d4:	c7 cf       	rjmp	.-114    	; 0x2764 <__vector_125+0xda>
    27d6:	e5 cf       	rjmp	.-54     	; 0x27a2 <__vector_125+0x118>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    27d8:	ff 91       	pop	r31
    27da:	ef 91       	pop	r30
    27dc:	bf 91       	pop	r27
    27de:	af 91       	pop	r26
    27e0:	9f 91       	pop	r25
    27e2:	8f 91       	pop	r24
    27e4:	7f 91       	pop	r23
    27e6:	6f 91       	pop	r22
    27e8:	5f 91       	pop	r21
    27ea:	4f 91       	pop	r20
    27ec:	3f 91       	pop	r19
    27ee:	2f 91       	pop	r18
    27f0:	0f 91       	pop	r16
    27f2:	0f 90       	pop	r0
    27f4:	0b be       	out	0x3b, r0	; 59
    27f6:	0f 90       	pop	r0
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	0f 90       	pop	r0
    27fc:	1f 90       	pop	r1
    27fe:	18 95       	reti

00002800 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2800:	1f 92       	push	r1
    2802:	0f 92       	push	r0
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	0f 92       	push	r0
    2808:	11 24       	eor	r1, r1
    280a:	0b b6       	in	r0, 0x3b	; 59
    280c:	0f 92       	push	r0
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	2f 93       	push	r18
    2814:	3f 93       	push	r19
    2816:	4f 93       	push	r20
    2818:	5f 93       	push	r21
    281a:	6f 93       	push	r22
    281c:	7f 93       	push	r23
    281e:	8f 93       	push	r24
    2820:	9f 93       	push	r25
    2822:	af 93       	push	r26
    2824:	bf 93       	push	r27
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	ef 93       	push	r30
    282c:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    282e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2832:	81 fd       	sbrc	r24, 1
    2834:	03 c0       	rjmp	.+6      	; 0x283c <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2836:	51 da       	rcall	.-2910   	; 0x1cda <udd_ctrl_interrupt_tc_setup>
    2838:	81 11       	cpse	r24, r1
    283a:	c3 c0       	rjmp	.+390    	; 0x29c2 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2842:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2846:	81 95       	neg	r24
    2848:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    284a:	e0 ef       	ldi	r30, 0xF0	; 240
    284c:	f2 e2       	ldi	r31, 0x22	; 34
    284e:	e8 1b       	sub	r30, r24
    2850:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2852:	20 81       	ld	r18, Z
    2854:	31 81       	ldd	r19, Z+1	; 0x01
    2856:	20 5f       	subi	r18, 0xF0	; 240
    2858:	32 42       	sbci	r19, 0x22	; 34
    285a:	36 95       	lsr	r19
    285c:	27 95       	ror	r18
    285e:	36 95       	lsr	r19
    2860:	27 95       	ror	r18
    2862:	36 95       	lsr	r19
    2864:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2866:	82 2f       	mov	r24, r18
    2868:	86 95       	lsr	r24
    286a:	20 fd       	sbrc	r18, 0
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <__vector_126+0x72>
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	01 c0       	rjmp	.+2      	; 0x2874 <__vector_126+0x74>
    2872:	90 e8       	ldi	r25, 0x80	; 128
    2874:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2876:	e8 2f       	mov	r30, r24
    2878:	ef 70       	andi	r30, 0x0F	; 15
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2880:	28 2f       	mov	r18, r24
    2882:	08 2e       	mov	r0, r24
    2884:	00 0c       	add	r0, r0
    2886:	33 0b       	sbc	r19, r19
    2888:	22 27       	eor	r18, r18
    288a:	33 0f       	add	r19, r19
    288c:	22 1f       	adc	r18, r18
    288e:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2890:	e2 0f       	add	r30, r18
    2892:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2894:	df 01       	movw	r26, r30
    2896:	aa 0f       	add	r26, r26
    2898:	bb 1f       	adc	r27, r27
    289a:	aa 0f       	add	r26, r26
    289c:	bb 1f       	adc	r27, r27
    289e:	aa 0f       	add	r26, r26
    28a0:	bb 1f       	adc	r27, r27
    28a2:	ac 51       	subi	r26, 0x1C	; 28
    28a4:	bd 4d       	sbci	r27, 0xDD	; 221
    28a6:	1c 96       	adiw	r26, 0x0c	; 12
    28a8:	9c 91       	ld	r25, X
    28aa:	95 ff       	sbrs	r25, 5
    28ac:	8a c0       	rjmp	.+276    	; 0x29c2 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    28ae:	ee 0f       	add	r30, r30
    28b0:	ff 1f       	adc	r31, r31
    28b2:	ee 0f       	add	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	e0 51       	subi	r30, 0x10	; 16
    28bc:	fd 4d       	sbci	r31, 0xDD	; 221
    28be:	00 e2       	ldi	r16, 0x20	; 32
    28c0:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    28c2:	81 11       	cpse	r24, r1
    28c4:	79 c0       	rjmp	.+242    	; 0x29b8 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    28c6:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <udd_ep_control_state>
    28ca:	84 30       	cpi	r24, 0x04	; 4
    28cc:	19 f4       	brne	.+6      	; 0x28d4 <__vector_126+0xd4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    28ce:	4d d9       	rcall	.-3430   	; 0x1b6a <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    28d0:	0b d9       	rcall	.-3562   	; 0x1ae8 <udd_ctrl_init>
    28d2:	77 c0       	rjmp	.+238    	; 0x29c2 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    28d4:	00 91 f2 22 	lds	r16, 0x22F2	; 0x8022f2 <udd_sram+0xe>
    28d8:	10 91 f3 22 	lds	r17, 0x22F3	; 0x8022f3 <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    28dc:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq+0xa>
    28e0:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0xb>
    28e4:	c0 91 df 22 	lds	r28, 0x22DF	; 0x8022df <udd_ctrl_payload_nb_trans>
    28e8:	d0 91 e0 22 	lds	r29, 0x22E0	; 0x8022e0 <udd_ctrl_payload_nb_trans+0x1>
    28ec:	9e 01       	movw	r18, r28
    28ee:	20 0f       	add	r18, r16
    28f0:	31 1f       	adc	r19, r17
    28f2:	82 17       	cp	r24, r18
    28f4:	93 07       	cpc	r25, r19
    28f6:	18 f4       	brcc	.+6      	; 0x28fe <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    28f8:	8c 01       	movw	r16, r24
    28fa:	0c 1b       	sub	r16, r28
    28fc:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    28fe:	80 91 98 23 	lds	r24, 0x2398	; 0x802398 <udd_g_ctrlreq+0x8>
    2902:	90 91 99 23 	lds	r25, 0x2399	; 0x802399 <udd_g_ctrlreq+0x9>
    2906:	a8 01       	movw	r20, r16
    2908:	6f e9       	ldi	r22, 0x9F	; 159
    290a:	72 e2       	ldi	r23, 0x22	; 34
    290c:	8c 0f       	add	r24, r28
    290e:	9d 1f       	adc	r25, r29
    2910:	2f d2       	rcall	.+1118   	; 0x2d70 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2912:	c0 0f       	add	r28, r16
    2914:	d1 1f       	adc	r29, r17
    2916:	c0 93 df 22 	sts	0x22DF, r28	; 0x8022df <udd_ctrl_payload_nb_trans>
    291a:	d0 93 e0 22 	sts	0x22E0, r29	; 0x8022e0 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    291e:	00 34       	cpi	r16, 0x40	; 64
    2920:	11 05       	cpc	r17, r1
    2922:	69 f4       	brne	.+26     	; 0x293e <__vector_126+0x13e>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2924:	80 91 e1 22 	lds	r24, 0x22E1	; 0x8022e1 <udd_ctrl_prev_payload_nb_trans>
    2928:	90 91 e2 22 	lds	r25, 0x22E2	; 0x8022e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    292c:	8c 0f       	add	r24, r28
    292e:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2930:	20 91 96 23 	lds	r18, 0x2396	; 0x802396 <udd_g_ctrlreq+0x6>
    2934:	30 91 97 23 	lds	r19, 0x2397	; 0x802397 <udd_g_ctrlreq+0x7>
    2938:	82 17       	cp	r24, r18
    293a:	93 07       	cpc	r25, r19
    293c:	80 f0       	brcs	.+32     	; 0x295e <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    293e:	e0 e9       	ldi	r30, 0x90	; 144
    2940:	f3 e2       	ldi	r31, 0x23	; 35
    2942:	c2 87       	std	Z+10, r28	; 0x0a
    2944:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2946:	06 84       	ldd	r0, Z+14	; 0x0e
    2948:	f7 85       	ldd	r31, Z+15	; 0x0f
    294a:	e0 2d       	mov	r30, r0
    294c:	30 97       	sbiw	r30, 0x00	; 0
    294e:	29 f0       	breq	.+10     	; 0x295a <__vector_126+0x15a>
			if (!udd_g_ctrlreq.over_under_run()) {
    2950:	19 95       	eicall
    2952:	81 11       	cpse	r24, r1
    2954:	02 c0       	rjmp	.+4      	; 0x295a <__vector_126+0x15a>
				// Stall ZLP
				udd_ctrl_stall_data();
    2956:	ed d8       	rcall	.-3622   	; 0x1b32 <udd_ctrl_stall_data>
    2958:	34 c0       	rjmp	.+104    	; 0x29c2 <__vector_126+0x1c2>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    295a:	f9 d8       	rcall	.-3598   	; 0x1b4e <udd_ctrl_send_zlp_in>
    295c:	32 c0       	rjmp	.+100    	; 0x29c2 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    295e:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq+0xa>
    2962:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0xb>
    2966:	c8 17       	cp	r28, r24
    2968:	d9 07       	cpc	r29, r25
    296a:	f9 f4       	brne	.+62     	; 0x29aa <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    296c:	e0 91 9e 23 	lds	r30, 0x239E	; 0x80239e <udd_g_ctrlreq+0xe>
    2970:	f0 91 9f 23 	lds	r31, 0x239F	; 0x80239f <udd_g_ctrlreq+0xf>
    2974:	30 97       	sbiw	r30, 0x00	; 0
    2976:	11 f4       	brne	.+4      	; 0x297c <__vector_126+0x17c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2978:	dc d8       	rcall	.-3656   	; 0x1b32 <udd_ctrl_stall_data>
    297a:	23 c0       	rjmp	.+70     	; 0x29c2 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    297c:	19 95       	eicall
    297e:	81 11       	cpse	r24, r1
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2982:	d7 d8       	rcall	.-3666   	; 0x1b32 <udd_ctrl_stall_data>
    2984:	1e c0       	rjmp	.+60     	; 0x29c2 <__vector_126+0x1c2>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2986:	20 91 e1 22 	lds	r18, 0x22E1	; 0x8022e1 <udd_ctrl_prev_payload_nb_trans>
    298a:	30 91 e2 22 	lds	r19, 0x22E2	; 0x8022e2 <udd_ctrl_prev_payload_nb_trans+0x1>
    298e:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <udd_ctrl_payload_nb_trans>
    2992:	90 91 e0 22 	lds	r25, 0x22E0	; 0x8022e0 <udd_ctrl_payload_nb_trans+0x1>
    2996:	82 0f       	add	r24, r18
    2998:	93 1f       	adc	r25, r19
    299a:	80 93 e1 22 	sts	0x22E1, r24	; 0x8022e1 <udd_ctrl_prev_payload_nb_trans>
    299e:	90 93 e2 22 	sts	0x22E2, r25	; 0x8022e2 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    29a2:	10 92 df 22 	sts	0x22DF, r1	; 0x8022df <udd_ctrl_payload_nb_trans>
    29a6:	10 92 e0 22 	sts	0x22E0, r1	; 0x8022e0 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    29aa:	e0 ef       	ldi	r30, 0xF0	; 240
    29ac:	f2 e2       	ldi	r31, 0x22	; 34
    29ae:	02 e0       	ldi	r16, 0x02	; 2
    29b0:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    29b2:	00 e2       	ldi	r16, 0x20	; 32
    29b4:	06 93       	lac	Z, r16
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    29b8:	80 38       	cpi	r24, 0x80	; 128
    29ba:	11 f4       	brne	.+4      	; 0x29c0 <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    29bc:	de d8       	rcall	.-3652   	; 0x1b7a <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    29be:	01 c0       	rjmp	.+2      	; 0x29c2 <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    29c0:	fd d9       	rcall	.-3078   	; 0x1dbc <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    29c2:	ff 91       	pop	r31
    29c4:	ef 91       	pop	r30
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	bf 91       	pop	r27
    29cc:	af 91       	pop	r26
    29ce:	9f 91       	pop	r25
    29d0:	8f 91       	pop	r24
    29d2:	7f 91       	pop	r23
    29d4:	6f 91       	pop	r22
    29d6:	5f 91       	pop	r21
    29d8:	4f 91       	pop	r20
    29da:	3f 91       	pop	r19
    29dc:	2f 91       	pop	r18
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	0f 90       	pop	r0
    29e4:	0b be       	out	0x3b, r0	; 59
    29e6:	0f 90       	pop	r0
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	0f 90       	pop	r0
    29ec:	1f 90       	pop	r1
    29ee:	18 95       	reti

000029f0 <setUpSerial>:

char receiveChar()
{
	while( !(USARTE0_STATUS & USART_RXCIF_bm) ); //Wait until receive finish
	return USARTE0_DATA;
}
    29f0:	10 92 a7 0a 	sts	0x0AA7, r1	; 0x800aa7 <__TEXT_REGION_LENGTH__+0x700aa7>
    29f4:	8c e0       	ldi	r24, 0x0C	; 12
    29f6:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x700aa6>
    29fa:	10 92 a3 0a 	sts	0x0AA3, r1	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
    29fe:	83 e0       	ldi	r24, 0x03	; 3
    2a00:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
    2a04:	88 e1       	ldi	r24, 0x18	; 24
    2a06:	80 93 a4 0a 	sts	0x0AA4, r24	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
    2a0a:	08 95       	ret

00002a0c <sendChar>:
    2a0c:	e1 ea       	ldi	r30, 0xA1	; 161
    2a0e:	fa e0       	ldi	r31, 0x0A	; 10
    2a10:	90 81       	ld	r25, Z
    2a12:	95 ff       	sbrs	r25, 5
    2a14:	fd cf       	rjmp	.-6      	; 0x2a10 <sendChar+0x4>
    2a16:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    2a1a:	08 95       	ret

00002a1c <receiveString>:

void receiveString()
{
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	c5 e2       	ldi	r28, 0x25	; 37
    2a22:	d3 e2       	ldi	r29, 0x23	; 35
	int i = 0;
	while(1){
		//char inp = receiveChar();
		char inp = usart_getchar(USART_SERIAL_EXAMPLE);
    2a24:	80 ea       	ldi	r24, 0xA0	; 160
    2a26:	9a e0       	ldi	r25, 0x0A	; 10
    2a28:	0e 94 ef 0a 	call	0x15de	; 0x15de <usart_getchar>
		if(inp=='\n') break;
    2a2c:	8a 30       	cpi	r24, 0x0A	; 10
    2a2e:	11 f0       	breq	.+4      	; 0x2a34 <receiveString+0x18>
		else reads[i++] = inp;
    2a30:	89 93       	st	Y+, r24
	}
    2a32:	f8 cf       	rjmp	.-16     	; 0x2a24 <receiveString+0x8>
}
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	08 95       	ret

00002a3a <main>:
/*! \brief Main function. Execution starts here.
 */
int main(void)
{
	sysclk_init();
    2a3a:	0e 94 4e 01 	call	0x29c	; 0x29c <sysclk_init>
	irq_initialize_vectors();
    2a3e:	87 e0       	ldi	r24, 0x07	; 7
    2a40:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    2a44:	78 94       	sei
	board_init();
    2a46:	0e 94 ad 0a 	call	0x155a	; 0x155a <board_init>
	udc_start();
    2a4a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <udc_start>
	PORTE_OUTSET = PIN3_bm; // PC3 as TX
    2a4e:	88 e0       	ldi	r24, 0x08	; 8
    2a50:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	PORTE_DIRSET = PIN3_bm; //TX pin as output
    2a54:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	
	PORTE_OUTCLR = PIN2_bm; //PC2 as RX
    2a58:	84 e0       	ldi	r24, 0x04	; 4
    2a5a:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
	PORTE_DIRCLR = PIN2_bm; //RX pin as input
    2a5e:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
	setUpSerial();
    2a62:	c6 df       	rcall	.-116    	; 0x29f0 <setUpSerial>
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    2a64:	66 eb       	ldi	r22, 0xB6	; 182
    2a66:	70 e2       	ldi	r23, 0x20	; 32
    2a68:	80 ea       	ldi	r24, 0xA0	; 160
    2a6a:	9a e0       	ldi	r25, 0x0A	; 10
    2a6c:	0e 94 0e 0c 	call	0x181c	; 0x181c <usart_init_rs232>
	
	while (true)
	{	
		while(!udi_cdc_is_rx_ready()){}	
		udi_cdc_read_buf(temp, sizeof(temp));
		char z = temp;
    2a70:	0d eb       	ldi	r16, 0xBD	; 189
    2a72:	10 e2       	ldi	r17, 0x20	; 32
	
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
	
	while (true)
	{	
		while(!udi_cdc_is_rx_ready()){}	
    2a74:	0e 94 1a 05 	call	0xa34	; 0xa34 <udi_cdc_is_rx_ready>
    2a78:	88 23       	and	r24, r24
    2a7a:	e1 f3       	breq	.-8      	; 0x2a74 <main+0x3a>
		udi_cdc_read_buf(temp, sizeof(temp));
    2a7c:	62 e0       	ldi	r22, 0x02	; 2
    2a7e:	70 e0       	ldi	r23, 0x00	; 0
    2a80:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <temp>
    2a84:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <temp+0x1>
    2a88:	0e 94 dd 05 	call	0xbba	; 0xbba <udi_cdc_read_buf>
		char z = temp;
    2a8c:	f8 01       	movw	r30, r16
    2a8e:	c0 81       	ld	r28, Z
		
		//while(!udi_cdc_is_tx_ready()){}
		//udi_cdc_write_buf(temp, sizeof(temp));
		
		while(!udi_cdc_is_tx_ready()){}
    2a90:	0e 94 19 06 	call	0xc32	; 0xc32 <udi_cdc_is_tx_ready>
    2a94:	88 23       	and	r24, r24
    2a96:	e1 f3       	breq	.-8      	; 0x2a90 <main+0x56>
		udi_cdc_write_buf(temp, sizeof(temp));
    2a98:	62 e0       	ldi	r22, 0x02	; 2
    2a9a:	70 e0       	ldi	r23, 0x00	; 0
    2a9c:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <temp>
    2aa0:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <temp+0x1>
    2aa4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <udi_cdc_write_buf>
		//send char command to RTOS board
		sendChar(z);
    2aa8:	8c 2f       	mov	r24, r28
    2aaa:	b0 df       	rcall	.-160    	; 0x2a0c <sendChar>
		//receivestring
		receiveString();
    2aac:	b7 df       	rcall	.-146    	; 0x2a1c <receiveString>
	}
    2aae:	e2 cf       	rjmp	.-60     	; 0x2a74 <main+0x3a>

00002ab0 <main_suspend_action>:
}

void main_suspend_action(void)
{
    2ab0:	08 95       	ret

00002ab2 <main_resume_action>:
	//ui_powerdown();
}

void main_resume_action(void)
{
    2ab2:	08 95       	ret

00002ab4 <main_sof_action>:
	//ui_wakeup();
}

void main_sof_action(void)
{
	if (!main_b_cdc_enable)
    2ab4:	80 91 89 23 	lds	r24, 0x2389	; 0x802389 <main_b_cdc_enable>
    2ab8:	88 23       	and	r24, r24
    2aba:	19 f0       	breq	.+6      	; 0x2ac2 <main_sof_action+0xe>
		return;
	ui_process(udd_get_frame_number());
    2abc:	b4 db       	rcall	.-2200   	; 0x2226 <udd_get_frame_number>
    2abe:	0c 94 41 01 	jmp	0x282	; 0x282 <ui_process>
    2ac2:	08 95       	ret

00002ac4 <main_cdc_enable>:
}
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    2ac4:	91 e0       	ldi	r25, 0x01	; 1
    2ac6:	90 93 89 23 	sts	0x2389, r25	; 0x802389 <main_b_cdc_enable>
	// Open communication
	uart_open(port);
    2aca:	79 d0       	rcall	.+242    	; 0x2bbe <uart_open>
	return true;
}
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	08 95       	ret

00002ad0 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    2ad0:	10 92 89 23 	sts	0x2389, r1	; 0x802389 <main_b_cdc_enable>
	// Close communication
	uart_close(port);
    2ad4:	85 c0       	rjmp	.+266    	; 0x2be0 <uart_close>
    2ad6:	08 95       	ret

00002ad8 <main_cdc_set_dtr>:
}

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) {
    2ad8:	66 23       	and	r22, r22
    2ada:	19 f0       	breq	.+6      	; 0x2ae2 <main_cdc_set_dtr+0xa>
		// Host terminal has open COM
		ui_com_open(port);
    2adc:	0c 94 27 01 	jmp	0x24e	; 0x24e <ui_com_open>
    2ae0:	08 95       	ret
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    2ae2:	0c 94 2b 01 	jmp	0x256	; 0x256 <ui_com_close>
    2ae6:	08 95       	ret

00002ae8 <uart_config>:
#include "uart.h"
#include "main.h"
#include "ui.h"

void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    2ae8:	ff 92       	push	r15
    2aea:	0f 93       	push	r16
    2aec:	1f 93       	push	r17
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	8b 01       	movw	r16, r22
	uint8_t reg_ctrlc;
	uint16_t bsel;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;

	switch (cfg->bCharFormat) {
    2af4:	fb 01       	movw	r30, r22
    2af6:	84 81       	ldd	r24, Z+4	; 0x04
    2af8:	82 30       	cpi	r24, 0x02	; 2
    2afa:	21 f4       	brne	.+8      	; 0x2b04 <uart_config+0x1c>
	case CDC_STOP_BITS_2:
		reg_ctrlc |= USART_SBMODE_bm;
    2afc:	68 94       	set
    2afe:	ff 24       	eor	r15, r15
    2b00:	f3 f8       	bld	r15, 3
    2b02:	01 c0       	rjmp	.+2      	; 0x2b06 <uart_config+0x1e>
void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
	uint8_t reg_ctrlc;
	uint16_t bsel;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;
    2b04:	f1 2c       	mov	r15, r1
	default:
		// Default stop bit = 1 stop bit
		break;
	}

	switch (cfg->bParityType) {
    2b06:	f8 01       	movw	r30, r16
    2b08:	85 81       	ldd	r24, Z+5	; 0x05
    2b0a:	81 30       	cpi	r24, 0x01	; 1
    2b0c:	31 f0       	breq	.+12     	; 0x2b1a <uart_config+0x32>
    2b0e:	82 30       	cpi	r24, 0x02	; 2
    2b10:	39 f4       	brne	.+14     	; 0x2b20 <uart_config+0x38>
	case CDC_PAR_EVEN:
		reg_ctrlc |= USART_PMODE_EVEN_gc;
    2b12:	ff 2d       	mov	r31, r15
    2b14:	f0 62       	ori	r31, 0x20	; 32
    2b16:	ff 2e       	mov	r15, r31
		break;
    2b18:	03 c0       	rjmp	.+6      	; 0x2b20 <uart_config+0x38>
	case CDC_PAR_ODD:
		reg_ctrlc |= USART_PMODE_ODD_gc;
    2b1a:	8f 2d       	mov	r24, r15
    2b1c:	80 63       	ori	r24, 0x30	; 48
    2b1e:	f8 2e       	mov	r15, r24
	case CDC_PAR_NONE:
		reg_ctrlc |= USART_PMODE_DISABLED_gc;
		break;
	}

	switch (cfg->bDataBits) {
    2b20:	f8 01       	movw	r30, r16
    2b22:	86 81       	ldd	r24, Z+6	; 0x06
    2b24:	86 30       	cpi	r24, 0x06	; 6
    2b26:	49 f0       	breq	.+18     	; 0x2b3a <uart_config+0x52>
    2b28:	18 f4       	brcc	.+6      	; 0x2b30 <uart_config+0x48>
    2b2a:	85 30       	cpi	r24, 0x05	; 5
    2b2c:	a9 f0       	breq	.+42     	; 0x2b58 <uart_config+0x70>
    2b2e:	0d c0       	rjmp	.+26     	; 0x2b4a <uart_config+0x62>
    2b30:	87 30       	cpi	r24, 0x07	; 7
    2b32:	39 f0       	breq	.+14     	; 0x2b42 <uart_config+0x5a>
    2b34:	89 30       	cpi	r24, 0x09	; 9
    2b36:	69 f0       	breq	.+26     	; 0x2b52 <uart_config+0x6a>
    2b38:	08 c0       	rjmp	.+16     	; 0x2b4a <uart_config+0x62>
	case 5:
		reg_ctrlc |= USART_CHSIZE_5BIT_gc;
		break;
	case 6:
		reg_ctrlc |= USART_CHSIZE_6BIT_gc;
    2b3a:	ff 2d       	mov	r31, r15
    2b3c:	f1 60       	ori	r31, 0x01	; 1
    2b3e:	ff 2e       	mov	r15, r31
		break;
    2b40:	0b c0       	rjmp	.+22     	; 0x2b58 <uart_config+0x70>
	case 7:
		reg_ctrlc |= USART_CHSIZE_7BIT_gc;
    2b42:	8f 2d       	mov	r24, r15
    2b44:	82 60       	ori	r24, 0x02	; 2
    2b46:	f8 2e       	mov	r15, r24
		break;
    2b48:	07 c0       	rjmp	.+14     	; 0x2b58 <uart_config+0x70>
	default:
	case 8:
		reg_ctrlc |= USART_CHSIZE_8BIT_gc;
    2b4a:	ef 2d       	mov	r30, r15
    2b4c:	e3 60       	ori	r30, 0x03	; 3
    2b4e:	fe 2e       	mov	r15, r30
		break;
    2b50:	03 c0       	rjmp	.+6      	; 0x2b58 <uart_config+0x70>
	case 9:
		reg_ctrlc |= USART_CHSIZE_9BIT_gc;
    2b52:	ff 2d       	mov	r31, r15
    2b54:	f7 60       	ori	r31, 0x07	; 7
    2b56:	ff 2e       	mov	r15, r31
		break;
	}

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    2b58:	60 e1       	ldi	r22, 0x10	; 16
    2b5a:	83 e0       	ldi	r24, 0x03	; 3
    2b5c:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
	// Set configuration
	USART.CTRLC = reg_ctrlc;
    2b60:	c0 ea       	ldi	r28, 0xA0	; 160
    2b62:	d8 e0       	ldi	r29, 0x08	; 8
    2b64:	fd 82       	std	Y+5, r15	; 0x05
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
    2b66:	f8 01       	movw	r30, r16
    2b68:	80 81       	ld	r24, Z
    2b6a:	91 81       	ldd	r25, Z+1	; 0x01
    2b6c:	a2 81       	ldd	r26, Z+2	; 0x02
    2b6e:	b3 81       	ldd	r27, Z+3	; 0x03
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	aa 1f       	adc	r26, r26
    2b76:	bb 1f       	adc	r27, r27
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	aa 1f       	adc	r26, r26
    2b7e:	bb 1f       	adc	r27, r27
    2b80:	9c 01       	movw	r18, r24
    2b82:	ad 01       	movw	r20, r26
    2b84:	22 0f       	add	r18, r18
    2b86:	33 1f       	adc	r19, r19
    2b88:	44 1f       	adc	r20, r20
    2b8a:	55 1f       	adc	r21, r21

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
	// Set configuration
	USART.CTRLC = reg_ctrlc;
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	7c e6       	ldi	r23, 0x6C	; 108
    2b90:	8c ed       	ldi	r24, 0xDC	; 220
    2b92:	92 e0       	ldi	r25, 0x02	; 2
    2b94:	c3 d0       	rcall	.+390    	; 0x2d1c <__udivmodsi4>
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
    2b96:	da 01       	movw	r26, r20
    2b98:	c9 01       	movw	r24, r18
    2b9a:	01 96       	adiw	r24, 0x01	; 1
    2b9c:	a1 1d       	adc	r26, r1
    2b9e:	b1 1d       	adc	r27, r1
    2ba0:	b6 95       	lsr	r27
    2ba2:	a7 95       	ror	r26
    2ba4:	97 95       	ror	r25
    2ba6:	87 95       	ror	r24

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
	// Set configuration
	USART.CTRLC = reg_ctrlc;
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
    2ba8:	9c 01       	movw	r18, r24
    2baa:	21 50       	subi	r18, 0x01	; 1
    2bac:	31 09       	sbc	r19, r1
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
	USART.BAUDCTRLA = bsel & 0xFF;
    2bae:	2e 83       	std	Y+6, r18	; 0x06
	USART.BAUDCTRLB = bsel >> 8;
    2bb0:	3f 83       	std	Y+7, r19	; 0x07
}
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	ff 90       	pop	r15
    2bbc:	08 95       	ret

00002bbe <uart_open>:

void uart_open(uint8_t port)
{
	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    2bbe:	60 e1       	ldi	r22, 0x10	; 16
    2bc0:	83 e0       	ldi	r24, 0x03	; 3
    2bc2:	0e 94 c9 01 	call	0x392	; 0x392 <sysclk_enable_module>
	// Open UART communication
	USART_PORT.DIRSET = USART_PORT_PIN_TX; // TX as output.
    2bc6:	e0 e4       	ldi	r30, 0x40	; 64
    2bc8:	f6 e0       	ldi	r31, 0x06	; 6
    2bca:	88 e0       	ldi	r24, 0x08	; 8
    2bcc:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR = USART_PORT_PIN_RX; // RX as input.
    2bce:	84 e0       	ldi	r24, 0x04	; 4
    2bd0:	82 83       	std	Z+2, r24	; 0x02

	// Enable both RX and TX
	USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm;
    2bd2:	e0 ea       	ldi	r30, 0xA0	; 160
    2bd4:	f8 e0       	ldi	r31, 0x08	; 8
    2bd6:	8c e1       	ldi	r24, 0x1C	; 28
    2bd8:	84 83       	std	Z+4, r24	; 0x04
	// Enable interrupt with priority higher than USB
	USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    2bda:	80 e3       	ldi	r24, 0x30	; 48
    2bdc:	83 83       	std	Z+3, r24	; 0x03
    2bde:	08 95       	ret

00002be0 <uart_close>:
			USART_DREINTLVL_OFF_gc;
}

void uart_close(uint8_t port)
{
	sysclk_disable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    2be0:	60 e1       	ldi	r22, 0x10	; 16
    2be2:	83 e0       	ldi	r24, 0x03	; 3
    2be4:	0e 94 df 01 	call	0x3be	; 0x3be <sysclk_disable_module>
	// Disable interrupts
	USART.CTRLA = 0;
    2be8:	e0 ea       	ldi	r30, 0xA0	; 160
    2bea:	f8 e0       	ldi	r31, 0x08	; 8
    2bec:	13 82       	std	Z+3, r1	; 0x03
	// Close RS232 communication
	USART.CTRLB = 0;
    2bee:	14 82       	std	Z+4, r1	; 0x04
    2bf0:	08 95       	ret

00002bf2 <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	// If UART is open
	if (USART.CTRLA!=0) {
    2bf2:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    2bf6:	88 23       	and	r24, r24
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <uart_rx_notify+0xe>
		// Enable UART TX interrupt to send values
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    2bfa:	83 e3       	ldi	r24, 0x33	; 51
    2bfc:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    2c00:	08 95       	ret

00002c02 <__vector_25>:
	}
}


ISR(USART_RX_Vect)
{
    2c02:	1f 92       	push	r1
    2c04:	0f 92       	push	r0
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	0f 92       	push	r0
    2c0a:	11 24       	eor	r1, r1
    2c0c:	0b b6       	in	r0, 0x3b	; 59
    2c0e:	0f 92       	push	r0
    2c10:	2f 93       	push	r18
    2c12:	3f 93       	push	r19
    2c14:	4f 93       	push	r20
    2c16:	5f 93       	push	r21
    2c18:	6f 93       	push	r22
    2c1a:	7f 93       	push	r23
    2c1c:	8f 93       	push	r24
    2c1e:	9f 93       	push	r25
    2c20:	af 93       	push	r26
    2c22:	bf 93       	push	r27
    2c24:	cf 93       	push	r28
    2c26:	ef 93       	push	r30
    2c28:	ff 93       	push	r31
	uint8_t value;

	// Data received
	ui_com_tx_start();
    2c2a:	0e 94 37 01 	call	0x26e	; 0x26e <ui_com_tx_start>

	if (0 != (USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))) {
    2c2e:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
    2c32:	88 71       	andi	r24, 0x18	; 24
    2c34:	21 f0       	breq	.+8      	; 0x2c3e <__vector_25+0x3c>
		udi_cdc_signal_framing_error();
    2c36:	0e 94 36 04 	call	0x86c	; 0x86c <udi_cdc_signal_framing_error>
		ui_com_error();
    2c3a:	0e 94 3f 01 	call	0x27e	; 0x27e <ui_com_error>
	}

	// Transfer UART RX fifo to CDC TX
	value = USART.DATA;
    2c3e:	c0 91 a0 08 	lds	r28, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	if (!udi_cdc_is_tx_ready()) {
    2c42:	0e 94 19 06 	call	0xc32	; 0xc32 <udi_cdc_is_tx_ready>
    2c46:	81 11       	cpse	r24, r1
    2c48:	05 c0       	rjmp	.+10     	; 0x2c54 <__vector_25+0x52>
		// Fifo full
		udi_cdc_signal_overrun();
    2c4a:	0e 94 3c 04 	call	0x878	; 0x878 <udi_cdc_signal_overrun>
		ui_com_overflow();
    2c4e:	0e 94 40 01 	call	0x280	; 0x280 <ui_com_overflow>
    2c52:	04 c0       	rjmp	.+8      	; 0x2c5c <__vector_25+0x5a>
	}else{
		udi_cdc_putc(value);
    2c54:	8c 2f       	mov	r24, r28
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <udi_cdc_putc>
	}
	ui_com_tx_stop();
    2c5c:	0e 94 3b 01 	call	0x276	; 0x276 <ui_com_tx_stop>
}
    2c60:	ff 91       	pop	r31
    2c62:	ef 91       	pop	r30
    2c64:	cf 91       	pop	r28
    2c66:	bf 91       	pop	r27
    2c68:	af 91       	pop	r26
    2c6a:	9f 91       	pop	r25
    2c6c:	8f 91       	pop	r24
    2c6e:	7f 91       	pop	r23
    2c70:	6f 91       	pop	r22
    2c72:	5f 91       	pop	r21
    2c74:	4f 91       	pop	r20
    2c76:	3f 91       	pop	r19
    2c78:	2f 91       	pop	r18
    2c7a:	0f 90       	pop	r0
    2c7c:	0b be       	out	0x3b, r0	; 59
    2c7e:	0f 90       	pop	r0
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	0f 90       	pop	r0
    2c84:	1f 90       	pop	r1
    2c86:	18 95       	reti

00002c88 <__vector_26>:

ISR(USART_DRE_Vect)
{
    2c88:	1f 92       	push	r1
    2c8a:	0f 92       	push	r0
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	0f 92       	push	r0
    2c90:	11 24       	eor	r1, r1
    2c92:	0b b6       	in	r0, 0x3b	; 59
    2c94:	0f 92       	push	r0
    2c96:	2f 93       	push	r18
    2c98:	3f 93       	push	r19
    2c9a:	4f 93       	push	r20
    2c9c:	5f 93       	push	r21
    2c9e:	6f 93       	push	r22
    2ca0:	7f 93       	push	r23
    2ca2:	8f 93       	push	r24
    2ca4:	9f 93       	push	r25
    2ca6:	af 93       	push	r26
    2ca8:	bf 93       	push	r27
    2caa:	ef 93       	push	r30
    2cac:	ff 93       	push	r31
	// Data send
	if (udi_cdc_is_rx_ready()) {
    2cae:	0e 94 1a 05 	call	0xa34	; 0xa34 <udi_cdc_is_rx_ready>
    2cb2:	88 23       	and	r24, r24
    2cb4:	39 f0       	breq	.+14     	; 0x2cc4 <__vector_26+0x3c>
		// Transmit next data
		ui_com_rx_start();
    2cb6:	0e 94 2f 01 	call	0x25e	; 0x25e <ui_com_rx_start>
		USART.DATA = udi_cdc_getc();
    2cba:	0e 94 71 05 	call	0xae2	; 0xae2 <udi_cdc_getc>
    2cbe:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    2cc2:	05 c0       	rjmp	.+10     	; 0x2cce <__vector_26+0x46>
	} else {
		// Fifo empty then Stop UART transmission
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc |
    2cc4:	80 e3       	ldi	r24, 0x30	; 48
    2cc6:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
				(register8_t) USART_DREINTLVL_OFF_gc;
		ui_com_rx_stop();
    2cca:	0e 94 33 01 	call	0x266	; 0x266 <ui_com_rx_stop>
	}
}
    2cce:	ff 91       	pop	r31
    2cd0:	ef 91       	pop	r30
    2cd2:	bf 91       	pop	r27
    2cd4:	af 91       	pop	r26
    2cd6:	9f 91       	pop	r25
    2cd8:	8f 91       	pop	r24
    2cda:	7f 91       	pop	r23
    2cdc:	6f 91       	pop	r22
    2cde:	5f 91       	pop	r21
    2ce0:	4f 91       	pop	r20
    2ce2:	3f 91       	pop	r19
    2ce4:	2f 91       	pop	r18
    2ce6:	0f 90       	pop	r0
    2ce8:	0b be       	out	0x3b, r0	; 59
    2cea:	0f 90       	pop	r0
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	0f 90       	pop	r0
    2cf0:	1f 90       	pop	r1
    2cf2:	18 95       	reti

00002cf4 <__udivmodhi4>:
    2cf4:	aa 1b       	sub	r26, r26
    2cf6:	bb 1b       	sub	r27, r27
    2cf8:	51 e1       	ldi	r21, 0x11	; 17
    2cfa:	07 c0       	rjmp	.+14     	; 0x2d0a <__udivmodhi4_ep>

00002cfc <__udivmodhi4_loop>:
    2cfc:	aa 1f       	adc	r26, r26
    2cfe:	bb 1f       	adc	r27, r27
    2d00:	a6 17       	cp	r26, r22
    2d02:	b7 07       	cpc	r27, r23
    2d04:	10 f0       	brcs	.+4      	; 0x2d0a <__udivmodhi4_ep>
    2d06:	a6 1b       	sub	r26, r22
    2d08:	b7 0b       	sbc	r27, r23

00002d0a <__udivmodhi4_ep>:
    2d0a:	88 1f       	adc	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	5a 95       	dec	r21
    2d10:	a9 f7       	brne	.-22     	; 0x2cfc <__udivmodhi4_loop>
    2d12:	80 95       	com	r24
    2d14:	90 95       	com	r25
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	08 95       	ret

00002d1c <__udivmodsi4>:
    2d1c:	a1 e2       	ldi	r26, 0x21	; 33
    2d1e:	1a 2e       	mov	r1, r26
    2d20:	aa 1b       	sub	r26, r26
    2d22:	bb 1b       	sub	r27, r27
    2d24:	fd 01       	movw	r30, r26
    2d26:	0d c0       	rjmp	.+26     	; 0x2d42 <__udivmodsi4_ep>

00002d28 <__udivmodsi4_loop>:
    2d28:	aa 1f       	adc	r26, r26
    2d2a:	bb 1f       	adc	r27, r27
    2d2c:	ee 1f       	adc	r30, r30
    2d2e:	ff 1f       	adc	r31, r31
    2d30:	a2 17       	cp	r26, r18
    2d32:	b3 07       	cpc	r27, r19
    2d34:	e4 07       	cpc	r30, r20
    2d36:	f5 07       	cpc	r31, r21
    2d38:	20 f0       	brcs	.+8      	; 0x2d42 <__udivmodsi4_ep>
    2d3a:	a2 1b       	sub	r26, r18
    2d3c:	b3 0b       	sbc	r27, r19
    2d3e:	e4 0b       	sbc	r30, r20
    2d40:	f5 0b       	sbc	r31, r21

00002d42 <__udivmodsi4_ep>:
    2d42:	66 1f       	adc	r22, r22
    2d44:	77 1f       	adc	r23, r23
    2d46:	88 1f       	adc	r24, r24
    2d48:	99 1f       	adc	r25, r25
    2d4a:	1a 94       	dec	r1
    2d4c:	69 f7       	brne	.-38     	; 0x2d28 <__udivmodsi4_loop>
    2d4e:	60 95       	com	r22
    2d50:	70 95       	com	r23
    2d52:	80 95       	com	r24
    2d54:	90 95       	com	r25
    2d56:	9b 01       	movw	r18, r22
    2d58:	ac 01       	movw	r20, r24
    2d5a:	bd 01       	movw	r22, r26
    2d5c:	cf 01       	movw	r24, r30
    2d5e:	08 95       	ret

00002d60 <__tablejump2__>:
    2d60:	ee 0f       	add	r30, r30
    2d62:	ff 1f       	adc	r31, r31
    2d64:	88 1f       	adc	r24, r24
    2d66:	8b bf       	out	0x3b, r24	; 59
    2d68:	07 90       	elpm	r0, Z+
    2d6a:	f6 91       	elpm	r31, Z
    2d6c:	e0 2d       	mov	r30, r0
    2d6e:	19 94       	eijmp

00002d70 <memcpy>:
    2d70:	fb 01       	movw	r30, r22
    2d72:	dc 01       	movw	r26, r24
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <memcpy+0xa>
    2d76:	01 90       	ld	r0, Z+
    2d78:	0d 92       	st	X+, r0
    2d7a:	41 50       	subi	r20, 0x01	; 1
    2d7c:	50 40       	sbci	r21, 0x00	; 0
    2d7e:	d8 f7       	brcc	.-10     	; 0x2d76 <memcpy+0x6>
    2d80:	08 95       	ret

00002d82 <_exit>:
    2d82:	f8 94       	cli

00002d84 <__stop_program>:
    2d84:	ff cf       	rjmp	.-2      	; 0x2d84 <__stop_program>
